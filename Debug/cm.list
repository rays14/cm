
cm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000930c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800949c  0800949c  0001949c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009584  08009584  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08009584  08009584  00019584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800958c  0800958c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800958c  0800958c  0001958c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009590  08009590  00019590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08009594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000094  08009628  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08009628  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001604b  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c4a  00000000  00000000  0003610f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00038d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  0003a280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000037d1  00000000  00000000  0003b658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170f9  00000000  00000000  0003ee29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001066d6  00000000  00000000  00055f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c5f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006464  00000000  00000000  0015c648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009484 	.word	0x08009484

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08009484 	.word	0x08009484

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_frsub>:
 80008dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80008e0:	e002      	b.n	80008e8 <__addsf3>
 80008e2:	bf00      	nop

080008e4 <__aeabi_fsub>:
 80008e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080008e8 <__addsf3>:
 80008e8:	0042      	lsls	r2, r0, #1
 80008ea:	bf1f      	itttt	ne
 80008ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80008f0:	ea92 0f03 	teqne	r2, r3
 80008f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80008f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008fc:	d06a      	beq.n	80009d4 <__addsf3+0xec>
 80008fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000902:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000906:	bfc1      	itttt	gt
 8000908:	18d2      	addgt	r2, r2, r3
 800090a:	4041      	eorgt	r1, r0
 800090c:	4048      	eorgt	r0, r1
 800090e:	4041      	eorgt	r1, r0
 8000910:	bfb8      	it	lt
 8000912:	425b      	neglt	r3, r3
 8000914:	2b19      	cmp	r3, #25
 8000916:	bf88      	it	hi
 8000918:	4770      	bxhi	lr
 800091a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800091e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000922:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800092e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000932:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000936:	bf18      	it	ne
 8000938:	4249      	negne	r1, r1
 800093a:	ea92 0f03 	teq	r2, r3
 800093e:	d03f      	beq.n	80009c0 <__addsf3+0xd8>
 8000940:	f1a2 0201 	sub.w	r2, r2, #1
 8000944:	fa41 fc03 	asr.w	ip, r1, r3
 8000948:	eb10 000c 	adds.w	r0, r0, ip
 800094c:	f1c3 0320 	rsb	r3, r3, #32
 8000950:	fa01 f103 	lsl.w	r1, r1, r3
 8000954:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000958:	d502      	bpl.n	8000960 <__addsf3+0x78>
 800095a:	4249      	negs	r1, r1
 800095c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000960:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000964:	d313      	bcc.n	800098e <__addsf3+0xa6>
 8000966:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800096a:	d306      	bcc.n	800097a <__addsf3+0x92>
 800096c:	0840      	lsrs	r0, r0, #1
 800096e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000972:	f102 0201 	add.w	r2, r2, #1
 8000976:	2afe      	cmp	r2, #254	; 0xfe
 8000978:	d251      	bcs.n	8000a1e <__addsf3+0x136>
 800097a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800097e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000982:	bf08      	it	eq
 8000984:	f020 0001 	biceq.w	r0, r0, #1
 8000988:	ea40 0003 	orr.w	r0, r0, r3
 800098c:	4770      	bx	lr
 800098e:	0049      	lsls	r1, r1, #1
 8000990:	eb40 0000 	adc.w	r0, r0, r0
 8000994:	3a01      	subs	r2, #1
 8000996:	bf28      	it	cs
 8000998:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800099c:	d2ed      	bcs.n	800097a <__addsf3+0x92>
 800099e:	fab0 fc80 	clz	ip, r0
 80009a2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009a6:	ebb2 020c 	subs.w	r2, r2, ip
 80009aa:	fa00 f00c 	lsl.w	r0, r0, ip
 80009ae:	bfaa      	itet	ge
 80009b0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009b4:	4252      	neglt	r2, r2
 80009b6:	4318      	orrge	r0, r3
 80009b8:	bfbc      	itt	lt
 80009ba:	40d0      	lsrlt	r0, r2
 80009bc:	4318      	orrlt	r0, r3
 80009be:	4770      	bx	lr
 80009c0:	f092 0f00 	teq	r2, #0
 80009c4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80009c8:	bf06      	itte	eq
 80009ca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80009ce:	3201      	addeq	r2, #1
 80009d0:	3b01      	subne	r3, #1
 80009d2:	e7b5      	b.n	8000940 <__addsf3+0x58>
 80009d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009dc:	bf18      	it	ne
 80009de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009e2:	d021      	beq.n	8000a28 <__addsf3+0x140>
 80009e4:	ea92 0f03 	teq	r2, r3
 80009e8:	d004      	beq.n	80009f4 <__addsf3+0x10c>
 80009ea:	f092 0f00 	teq	r2, #0
 80009ee:	bf08      	it	eq
 80009f0:	4608      	moveq	r0, r1
 80009f2:	4770      	bx	lr
 80009f4:	ea90 0f01 	teq	r0, r1
 80009f8:	bf1c      	itt	ne
 80009fa:	2000      	movne	r0, #0
 80009fc:	4770      	bxne	lr
 80009fe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a02:	d104      	bne.n	8000a0e <__addsf3+0x126>
 8000a04:	0040      	lsls	r0, r0, #1
 8000a06:	bf28      	it	cs
 8000a08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a0c:	4770      	bx	lr
 8000a0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a12:	bf3c      	itt	cc
 8000a14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a18:	4770      	bxcc	lr
 8000a1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a26:	4770      	bx	lr
 8000a28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a2c:	bf16      	itet	ne
 8000a2e:	4608      	movne	r0, r1
 8000a30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a34:	4601      	movne	r1, r0
 8000a36:	0242      	lsls	r2, r0, #9
 8000a38:	bf06      	itte	eq
 8000a3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a3e:	ea90 0f01 	teqeq	r0, r1
 8000a42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a46:	4770      	bx	lr

08000a48 <__aeabi_ui2f>:
 8000a48:	f04f 0300 	mov.w	r3, #0
 8000a4c:	e004      	b.n	8000a58 <__aeabi_i2f+0x8>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_i2f>:
 8000a50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a54:	bf48      	it	mi
 8000a56:	4240      	negmi	r0, r0
 8000a58:	ea5f 0c00 	movs.w	ip, r0
 8000a5c:	bf08      	it	eq
 8000a5e:	4770      	bxeq	lr
 8000a60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a64:	4601      	mov	r1, r0
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	e01c      	b.n	8000aa6 <__aeabi_l2f+0x2a>

08000a6c <__aeabi_ul2f>:
 8000a6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a70:	bf08      	it	eq
 8000a72:	4770      	bxeq	lr
 8000a74:	f04f 0300 	mov.w	r3, #0
 8000a78:	e00a      	b.n	8000a90 <__aeabi_l2f+0x14>
 8000a7a:	bf00      	nop

08000a7c <__aeabi_l2f>:
 8000a7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a80:	bf08      	it	eq
 8000a82:	4770      	bxeq	lr
 8000a84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000a88:	d502      	bpl.n	8000a90 <__aeabi_l2f+0x14>
 8000a8a:	4240      	negs	r0, r0
 8000a8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a90:	ea5f 0c01 	movs.w	ip, r1
 8000a94:	bf02      	ittt	eq
 8000a96:	4684      	moveq	ip, r0
 8000a98:	4601      	moveq	r1, r0
 8000a9a:	2000      	moveq	r0, #0
 8000a9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000aa0:	bf08      	it	eq
 8000aa2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000aaa:	fabc f28c 	clz	r2, ip
 8000aae:	3a08      	subs	r2, #8
 8000ab0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ab4:	db10      	blt.n	8000ad8 <__aeabi_l2f+0x5c>
 8000ab6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000aba:	4463      	add	r3, ip
 8000abc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ac0:	f1c2 0220 	rsb	r2, r2, #32
 8000ac4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ac8:	fa20 f202 	lsr.w	r2, r0, r2
 8000acc:	eb43 0002 	adc.w	r0, r3, r2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f102 0220 	add.w	r2, r2, #32
 8000adc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ae0:	f1c2 0220 	rsb	r2, r2, #32
 8000ae4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ae8:	fa21 f202 	lsr.w	r2, r1, r2
 8000aec:	eb43 0002 	adc.w	r0, r3, r2
 8000af0:	bf08      	it	eq
 8000af2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ldivmod>:
 8000af8:	b97b      	cbnz	r3, 8000b1a <__aeabi_ldivmod+0x22>
 8000afa:	b972      	cbnz	r2, 8000b1a <__aeabi_ldivmod+0x22>
 8000afc:	2900      	cmp	r1, #0
 8000afe:	bfbe      	ittt	lt
 8000b00:	2000      	movlt	r0, #0
 8000b02:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b06:	e006      	blt.n	8000b16 <__aeabi_ldivmod+0x1e>
 8000b08:	bf08      	it	eq
 8000b0a:	2800      	cmpeq	r0, #0
 8000b0c:	bf1c      	itt	ne
 8000b0e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b12:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b16:	f000 b9a7 	b.w	8000e68 <__aeabi_idiv0>
 8000b1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b22:	2900      	cmp	r1, #0
 8000b24:	db09      	blt.n	8000b3a <__aeabi_ldivmod+0x42>
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	db1a      	blt.n	8000b60 <__aeabi_ldivmod+0x68>
 8000b2a:	f000 f835 	bl	8000b98 <__udivmoddi4>
 8000b2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b36:	b004      	add	sp, #16
 8000b38:	4770      	bx	lr
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db1b      	blt.n	8000b7c <__aeabi_ldivmod+0x84>
 8000b44:	f000 f828 	bl	8000b98 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4240      	negs	r0, r0
 8000b54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b58:	4252      	negs	r2, r2
 8000b5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b5e:	4770      	bx	lr
 8000b60:	4252      	negs	r2, r2
 8000b62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b66:	f000 f817 	bl	8000b98 <__udivmoddi4>
 8000b6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b72:	b004      	add	sp, #16
 8000b74:	4240      	negs	r0, r0
 8000b76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b7a:	4770      	bx	lr
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b82:	f000 f809 	bl	8000b98 <__udivmoddi4>
 8000b86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b8e:	b004      	add	sp, #16
 8000b90:	4252      	negs	r2, r2
 8000b92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b96:	4770      	bx	lr

08000b98 <__udivmoddi4>:
 8000b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b9c:	9d08      	ldr	r5, [sp, #32]
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	468e      	mov	lr, r1
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d14d      	bne.n	8000c42 <__udivmoddi4+0xaa>
 8000ba6:	428a      	cmp	r2, r1
 8000ba8:	4694      	mov	ip, r2
 8000baa:	d969      	bls.n	8000c80 <__udivmoddi4+0xe8>
 8000bac:	fab2 f282 	clz	r2, r2
 8000bb0:	b152      	cbz	r2, 8000bc8 <__udivmoddi4+0x30>
 8000bb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb6:	f1c2 0120 	rsb	r1, r2, #32
 8000bba:	fa20 f101 	lsr.w	r1, r0, r1
 8000bbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bc6:	4094      	lsls	r4, r2
 8000bc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bcc:	0c21      	lsrs	r1, r4, #16
 8000bce:	fbbe f6f8 	udiv	r6, lr, r8
 8000bd2:	fa1f f78c 	uxth.w	r7, ip
 8000bd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bde:	fb06 f107 	mul.w	r1, r6, r7
 8000be2:	4299      	cmp	r1, r3
 8000be4:	d90a      	bls.n	8000bfc <__udivmoddi4+0x64>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bee:	f080 811f 	bcs.w	8000e30 <__udivmoddi4+0x298>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 811c 	bls.w	8000e30 <__udivmoddi4+0x298>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	4463      	add	r3, ip
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 f707 	mul.w	r7, r0, r7
 8000c10:	42a7      	cmp	r7, r4
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x92>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1c:	f080 810a 	bcs.w	8000e34 <__udivmoddi4+0x29c>
 8000c20:	42a7      	cmp	r7, r4
 8000c22:	f240 8107 	bls.w	8000e34 <__udivmoddi4+0x29c>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2e:	1be4      	subs	r4, r4, r7
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa4>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0xc2>
 8000c46:	2d00      	cmp	r5, #0
 8000c48:	f000 80ef 	beq.w	8000e2a <__udivmoddi4+0x292>
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c52:	4630      	mov	r0, r6
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	fab3 f683 	clz	r6, r3
 8000c5e:	2e00      	cmp	r6, #0
 8000c60:	d14a      	bne.n	8000cf8 <__udivmoddi4+0x160>
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d302      	bcc.n	8000c6c <__udivmoddi4+0xd4>
 8000c66:	4282      	cmp	r2, r0
 8000c68:	f200 80f9 	bhi.w	8000e5e <__udivmoddi4+0x2c6>
 8000c6c:	1a84      	subs	r4, r0, r2
 8000c6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c72:	2001      	movs	r0, #1
 8000c74:	469e      	mov	lr, r3
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d0e0      	beq.n	8000c3c <__udivmoddi4+0xa4>
 8000c7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c7e:	e7dd      	b.n	8000c3c <__udivmoddi4+0xa4>
 8000c80:	b902      	cbnz	r2, 8000c84 <__udivmoddi4+0xec>
 8000c82:	deff      	udf	#255	; 0xff
 8000c84:	fab2 f282 	clz	r2, r2
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	f040 8092 	bne.w	8000db2 <__udivmoddi4+0x21a>
 8000c8e:	eba1 010c 	sub.w	r1, r1, ip
 8000c92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c96:	fa1f fe8c 	uxth.w	lr, ip
 8000c9a:	2601      	movs	r6, #1
 8000c9c:	0c20      	lsrs	r0, r4, #16
 8000c9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ca2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ca6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000caa:	fb0e f003 	mul.w	r0, lr, r3
 8000cae:	4288      	cmp	r0, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0x12c>
 8000cb2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x12a>
 8000cbc:	4288      	cmp	r0, r1
 8000cbe:	f200 80cb 	bhi.w	8000e58 <__udivmoddi4+0x2c0>
 8000cc2:	4643      	mov	r3, r8
 8000cc4:	1a09      	subs	r1, r1, r0
 8000cc6:	b2a4      	uxth	r4, r4
 8000cc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ccc:	fb07 1110 	mls	r1, r7, r0, r1
 8000cd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd8:	45a6      	cmp	lr, r4
 8000cda:	d908      	bls.n	8000cee <__udivmoddi4+0x156>
 8000cdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ce4:	d202      	bcs.n	8000cec <__udivmoddi4+0x154>
 8000ce6:	45a6      	cmp	lr, r4
 8000ce8:	f200 80bb 	bhi.w	8000e62 <__udivmoddi4+0x2ca>
 8000cec:	4608      	mov	r0, r1
 8000cee:	eba4 040e 	sub.w	r4, r4, lr
 8000cf2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cf6:	e79c      	b.n	8000c32 <__udivmoddi4+0x9a>
 8000cf8:	f1c6 0720 	rsb	r7, r6, #32
 8000cfc:	40b3      	lsls	r3, r6
 8000cfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d06:	fa20 f407 	lsr.w	r4, r0, r7
 8000d0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d0e:	431c      	orrs	r4, r3
 8000d10:	40f9      	lsrs	r1, r7
 8000d12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d16:	fa00 f306 	lsl.w	r3, r0, r6
 8000d1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d1e:	0c20      	lsrs	r0, r4, #16
 8000d20:	fa1f fe8c 	uxth.w	lr, ip
 8000d24:	fb09 1118 	mls	r1, r9, r8, r1
 8000d28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d30:	4288      	cmp	r0, r1
 8000d32:	fa02 f206 	lsl.w	r2, r2, r6
 8000d36:	d90b      	bls.n	8000d50 <__udivmoddi4+0x1b8>
 8000d38:	eb1c 0101 	adds.w	r1, ip, r1
 8000d3c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d40:	f080 8088 	bcs.w	8000e54 <__udivmoddi4+0x2bc>
 8000d44:	4288      	cmp	r0, r1
 8000d46:	f240 8085 	bls.w	8000e54 <__udivmoddi4+0x2bc>
 8000d4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	1a09      	subs	r1, r1, r0
 8000d52:	b2a4      	uxth	r4, r4
 8000d54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d58:	fb09 1110 	mls	r1, r9, r0, r1
 8000d5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d64:	458e      	cmp	lr, r1
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x1e2>
 8000d68:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d70:	d26c      	bcs.n	8000e4c <__udivmoddi4+0x2b4>
 8000d72:	458e      	cmp	lr, r1
 8000d74:	d96a      	bls.n	8000e4c <__udivmoddi4+0x2b4>
 8000d76:	3802      	subs	r0, #2
 8000d78:	4461      	add	r1, ip
 8000d7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d82:	eba1 010e 	sub.w	r1, r1, lr
 8000d86:	42a1      	cmp	r1, r4
 8000d88:	46c8      	mov	r8, r9
 8000d8a:	46a6      	mov	lr, r4
 8000d8c:	d356      	bcc.n	8000e3c <__udivmoddi4+0x2a4>
 8000d8e:	d053      	beq.n	8000e38 <__udivmoddi4+0x2a0>
 8000d90:	b15d      	cbz	r5, 8000daa <__udivmoddi4+0x212>
 8000d92:	ebb3 0208 	subs.w	r2, r3, r8
 8000d96:	eb61 010e 	sbc.w	r1, r1, lr
 8000d9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000da2:	40f1      	lsrs	r1, r6
 8000da4:	431f      	orrs	r7, r3
 8000da6:	e9c5 7100 	strd	r7, r1, [r5]
 8000daa:	2600      	movs	r6, #0
 8000dac:	4631      	mov	r1, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	f1c2 0320 	rsb	r3, r2, #32
 8000db6:	40d8      	lsrs	r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	4301      	orrs	r1, r0
 8000dc4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc8:	fa1f fe8c 	uxth.w	lr, ip
 8000dcc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dd0:	fb07 3610 	mls	r6, r7, r0, r3
 8000dd4:	0c0b      	lsrs	r3, r1, #16
 8000dd6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dda:	fb00 f60e 	mul.w	r6, r0, lr
 8000dde:	429e      	cmp	r6, r3
 8000de0:	fa04 f402 	lsl.w	r4, r4, r2
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x260>
 8000de6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dee:	d22f      	bcs.n	8000e50 <__udivmoddi4+0x2b8>
 8000df0:	429e      	cmp	r6, r3
 8000df2:	d92d      	bls.n	8000e50 <__udivmoddi4+0x2b8>
 8000df4:	3802      	subs	r0, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	b289      	uxth	r1, r1
 8000dfc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e00:	fb07 3316 	mls	r3, r7, r6, r3
 8000e04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e08:	fb06 f30e 	mul.w	r3, r6, lr
 8000e0c:	428b      	cmp	r3, r1
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x28a>
 8000e10:	eb1c 0101 	adds.w	r1, ip, r1
 8000e14:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e18:	d216      	bcs.n	8000e48 <__udivmoddi4+0x2b0>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d914      	bls.n	8000e48 <__udivmoddi4+0x2b0>
 8000e1e:	3e02      	subs	r6, #2
 8000e20:	4461      	add	r1, ip
 8000e22:	1ac9      	subs	r1, r1, r3
 8000e24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e28:	e738      	b.n	8000c9c <__udivmoddi4+0x104>
 8000e2a:	462e      	mov	r6, r5
 8000e2c:	4628      	mov	r0, r5
 8000e2e:	e705      	b.n	8000c3c <__udivmoddi4+0xa4>
 8000e30:	4606      	mov	r6, r0
 8000e32:	e6e3      	b.n	8000bfc <__udivmoddi4+0x64>
 8000e34:	4618      	mov	r0, r3
 8000e36:	e6f8      	b.n	8000c2a <__udivmoddi4+0x92>
 8000e38:	454b      	cmp	r3, r9
 8000e3a:	d2a9      	bcs.n	8000d90 <__udivmoddi4+0x1f8>
 8000e3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e44:	3801      	subs	r0, #1
 8000e46:	e7a3      	b.n	8000d90 <__udivmoddi4+0x1f8>
 8000e48:	4646      	mov	r6, r8
 8000e4a:	e7ea      	b.n	8000e22 <__udivmoddi4+0x28a>
 8000e4c:	4620      	mov	r0, r4
 8000e4e:	e794      	b.n	8000d7a <__udivmoddi4+0x1e2>
 8000e50:	4640      	mov	r0, r8
 8000e52:	e7d1      	b.n	8000df8 <__udivmoddi4+0x260>
 8000e54:	46d0      	mov	r8, sl
 8000e56:	e77b      	b.n	8000d50 <__udivmoddi4+0x1b8>
 8000e58:	3b02      	subs	r3, #2
 8000e5a:	4461      	add	r1, ip
 8000e5c:	e732      	b.n	8000cc4 <__udivmoddi4+0x12c>
 8000e5e:	4630      	mov	r0, r6
 8000e60:	e709      	b.n	8000c76 <__udivmoddi4+0xde>
 8000e62:	4464      	add	r4, ip
 8000e64:	3802      	subs	r0, #2
 8000e66:	e742      	b.n	8000cee <__udivmoddi4+0x156>

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <avg>:
        }
    }
}
#endif

float avg(uint32_t *data, uint32_t len, uint32_t newValue) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
    float    avg = 0;
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
    float    sum = 0;
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
    uint32_t i   = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]

    // Shift all values
    sum = sum - (float)data[0];
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	ee07 3a90 	vmov	s15, r3
 8000e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e94:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9c:	edc7 7a05 	vstr	s15, [r7, #20]
    for (i = 1; i < len; i++) {
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	e00f      	b.n	8000ec6 <avg+0x5a>
        data[i - 1] = data[i];
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	441a      	add	r2, r3
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	68f9      	ldr	r1, [r7, #12]
 8000eba:	440b      	add	r3, r1
 8000ebc:	6812      	ldr	r2, [r2, #0]
 8000ebe:	601a      	str	r2, [r3, #0]
    for (i = 1; i < len; i++) {
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	61fb      	str	r3, [r7, #28]
 8000ec6:	69fa      	ldr	r2, [r7, #28]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d3eb      	bcc.n	8000ea6 <avg+0x3a>
    }
    data[i - 1] = newValue;
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	601a      	str	r2, [r3, #0]
    sum = sum + (float)newValue;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	ee07 3a90 	vmov	s15, r3
 8000ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eea:	ed97 7a05 	vldr	s14, [r7, #20]
 8000eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef2:	edc7 7a05 	vstr	s15, [r7, #20]
    avg = sum / len;
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f00:	edd7 6a05 	vldr	s13, [r7, #20]
 8000f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f08:	edc7 7a06 	vstr	s15, [r7, #24]

    return avg;
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	ee07 3a90 	vmov	s15, r3
}
 8000f12:	eeb0 0a67 	vmov.f32	s0, s15
 8000f16:	3724      	adds	r7, #36	; 0x24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  {                // if the interrupt source is channel1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7f1b      	ldrb	r3, [r3, #28]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d160      	bne.n	8000ff2 <HAL_TIM_IC_CaptureCallback+0xd2>
        if (isFirstCaptured == 0) {                                  // if the first value is not captured
 8000f30:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d10a      	bne.n	8000f4e <HAL_TIM_IC_CaptureCallback+0x2e>
            icVal1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000f38:	2100      	movs	r1, #0
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f006 fd16 	bl	800796c <HAL_TIM_ReadCapturedValue>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a2f      	ldr	r2, [pc, #188]	; (8001000 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000f44:	6013      	str	r3, [r2, #0]
            isFirstCaptured = 1;                                     // set the first captured as true
 8000f46:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
            // ------------------------------------------------------------------

            isFirstCaptured = 0; // set it back to false
        }
    }
}
 8000f4c:	e051      	b.n	8000ff2 <HAL_TIM_IC_CaptureCallback+0xd2>
            icVal2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8000f4e:	2100      	movs	r1, #0
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f006 fd0b 	bl	800796c <HAL_TIM_ReadCapturedValue>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a2a      	ldr	r2, [pc, #168]	; (8001004 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000f5a:	6013      	str	r3, [r2, #0]
            if (icVal2 > icVal1) {
 8000f5c:	4b29      	ldr	r3, [pc, #164]	; (8001004 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b27      	ldr	r3, [pc, #156]	; (8001000 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d907      	bls.n	8000f78 <HAL_TIM_IC_CaptureCallback+0x58>
                difference = icVal2 - icVal1;
 8000f68:	4b26      	ldr	r3, [pc, #152]	; (8001004 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b24      	ldr	r3, [pc, #144]	; (8001000 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	4a25      	ldr	r2, [pc, #148]	; (8001008 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e00d      	b.n	8000f94 <HAL_TIM_IC_CaptureCallback+0x74>
            } else if (icVal1 > icVal2) {
 8000f78:	4b21      	ldr	r3, [pc, #132]	; (8001000 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b21      	ldr	r3, [pc, #132]	; (8001004 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d907      	bls.n	8000f94 <HAL_TIM_IC_CaptureCallback+0x74>
                difference = (0xffffffff - icVal1) + icVal2;
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000f92:	6013      	str	r3, [r2, #0]
            float refClock = TIMCLOCK / (PRESCALAR);
 8000f94:	4b1d      	ldr	r3, [pc, #116]	; (800100c <HAL_TIM_IC_CaptureCallback+0xec>)
 8000f96:	60fb      	str	r3, [r7, #12]
            float mFactor  = 1000000 / refClock;
 8000f98:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001010 <HAL_TIM_IC_CaptureCallback+0xf0>
 8000f9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa4:	edc7 7a02 	vstr	s15, [r7, #8]
            usWidth  = difference * mFactor;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fc0:	ee17 2a90 	vmov	r2, s15
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000fc6:	601a      	str	r2, [r3, #0]
            if (usWidth < htim->Init.Period) {                        // Check to make sure we are not getting overflow
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d90b      	bls.n	8000fec <HAL_TIM_IC_CaptureCallback+0xcc>
                avgWidth = avg(data, AVG_DATA_LEN, usWidth);
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	210a      	movs	r1, #10
 8000fdc:	480e      	ldr	r0, [pc, #56]	; (8001018 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000fde:	f7ff ff45 	bl	8000e6c <avg>
 8000fe2:	eef0 7a40 	vmov.f32	s15, s0
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000fe8:	edc3 7a00 	vstr	s15, [r3]
            isFirstCaptured = 0; // set it back to false
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200001f4 	.word	0x200001f4
 8001000:	200001e8 	.word	0x200001e8
 8001004:	200001ec 	.word	0x200001ec
 8001008:	200001f0 	.word	0x200001f0
 800100c:	49742400 	.word	0x49742400
 8001010:	49742400 	.word	0x49742400
 8001014:	200001f8 	.word	0x200001f8
 8001018:	200001fc 	.word	0x200001fc
 800101c:	20000224 	.word	0x20000224

08001020 <delay>:

void delay(uint32_t maxDelayAmount) {
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    volatile uint32_t amount = maxDelayAmount;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	60fb      	str	r3, [r7, #12]
    while (amount > 0) {
 800102c:	e002      	b.n	8001034 <delay+0x14>
        amount--;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3b01      	subs	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
    while (amount > 0) {
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f9      	bne.n	800102e <delay+0xe>
    }
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <channelSelect>:

void channelSelect(int channel) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
 8001060:	615a      	str	r2, [r3, #20]
    if (channel == 1) {
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d102      	bne.n	800106e <channelSelect+0x26>
        sConfig.Channel = ADC_CHANNEL_4;
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <channelSelect+0x70>)
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	e00a      	b.n	8001084 <channelSelect+0x3c>
    } else if (channel == 2) {
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d102      	bne.n	800107a <channelSelect+0x32>
        sConfig.Channel = ADC_CHANNEL_13;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <channelSelect+0x74>)
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	e004      	b.n	8001084 <channelSelect+0x3c>
    } else if (channel == 3) {
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b03      	cmp	r3, #3
 800107e:	d101      	bne.n	8001084 <channelSelect+0x3c>
        sConfig.Channel = ADC_CHANNEL_14;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <channelSelect+0x78>)
 8001082:	60bb      	str	r3, [r7, #8]
    }
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001084:	2306      	movs	r3, #6
 8001086:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001088:	2307      	movs	r3, #7
 800108a:	613b      	str	r3, [r7, #16]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800108c:	237f      	movs	r3, #127	; 0x7f
 800108e:	617b      	str	r3, [r7, #20]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001090:	2304      	movs	r3, #4
 8001092:	61bb      	str	r3, [r7, #24]
    sConfig.Offset = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	4619      	mov	r1, r3
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <channelSelect+0x7c>)
 80010a0:	f002 fa68 	bl	8003574 <HAL_ADC_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <channelSelect+0x66>
        Error_Handler();
 80010aa:	f000 fcb5 	bl	8001a18 <Error_Handler>
    }
}
 80010ae:	bf00      	nop
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	10c00010 	.word	0x10c00010
 80010bc:	36902000 	.word	0x36902000
 80010c0:	3ac04000 	.word	0x3ac04000
 80010c4:	200000b0 	.word	0x200000b0

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ce:	f001 fc5c 	bl	800298a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d2:	f000 facb 	bl	800166c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d6:	f000 fc6f 	bl	80019b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010da:	f000 fbef 	bl	80018bc <MX_TIM2_Init>
  MX_CAN1_Init();
 80010de:	f000 fb75 	bl	80017cc <MX_CAN1_Init>
  MX_ADC1_Init();
 80010e2:	f000 fb15 	bl	8001710 <MX_ADC1_Init>
  MX_I2C1_Init();
 80010e6:	f000 fba9 	bl	800183c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80010ea:	2108      	movs	r1, #8
 80010ec:	48b4      	ldr	r0, [pc, #720]	; (80013c0 <main+0x2f8>)
 80010ee:	f005 fec5 	bl	8006e7c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80010f2:	48b3      	ldr	r0, [pc, #716]	; (80013c0 <main+0x2f8>)
 80010f4:	f005 fdf0 	bl	8006cd8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80010f8:	2100      	movs	r1, #0
 80010fa:	48b1      	ldr	r0, [pc, #708]	; (80013c0 <main+0x2f8>)
 80010fc:	f006 f81c 	bl	8007138 <HAL_TIM_IC_Start_IT>
  MS5837Init(&hi2c1);
 8001100:	48b0      	ldr	r0, [pc, #704]	; (80013c4 <main+0x2fc>)
 8001102:	f000 fcad 	bl	8001a60 <MS5837Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  pwmOnTime = 2000;
 8001106:	4bb0      	ldr	r3, [pc, #704]	; (80013c8 <main+0x300>)
 8001108:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800110c:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      // Decrement toggle counter.
      counter--;
 800110e:	4baf      	ldr	r3, [pc, #700]	; (80013cc <main+0x304>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3b01      	subs	r3, #1
 8001114:	4aad      	ldr	r2, [pc, #692]	; (80013cc <main+0x304>)
 8001116:	6013      	str	r3, [r2, #0]
      if (counter == 0) {
 8001118:	4bac      	ldr	r3, [pc, #688]	; (80013cc <main+0x304>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d109      	bne.n	8001134 <main+0x6c>
          counter = MAX_COUNT;
 8001120:	4baa      	ldr	r3, [pc, #680]	; (80013cc <main+0x304>)
 8001122:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001126:	601a      	str	r2, [r3, #0]
          toggle = 1 - toggle;
 8001128:	4ba9      	ldr	r3, [pc, #676]	; (80013d0 <main+0x308>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f1c3 0301 	rsb	r3, r3, #1
 8001130:	4aa7      	ldr	r2, [pc, #668]	; (80013d0 <main+0x308>)
 8001132:	6013      	str	r3, [r2, #0]
      } else {
          pwmOnTime--;
      }
#endif

      printf("usWidth = %d", (int)usWidth);
 8001134:	4ba7      	ldr	r3, [pc, #668]	; (80013d4 <main+0x30c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	48a7      	ldr	r0, [pc, #668]	; (80013d8 <main+0x310>)
 800113c:	f007 fd02 	bl	8008b44 <iprintf>

      // Toggle PB8 - CN1 pin 10.
      if (toggle) {
 8001140:	4ba3      	ldr	r3, [pc, #652]	; (80013d0 <main+0x308>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <main+0x8e>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800114e:	48a3      	ldr	r0, [pc, #652]	; (80013dc <main+0x314>)
 8001150:	f003 fc30 	bl	80049b4 <HAL_GPIO_WritePin>
 8001154:	e005      	b.n	8001162 <main+0x9a>
      } else {
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115c:	489f      	ldr	r0, [pc, #636]	; (80013dc <main+0x314>)
 800115e:	f003 fc29 	bl	80049b4 <HAL_GPIO_WritePin>
      }
      delay(5000);
 8001162:	f241 3088 	movw	r0, #5000	; 0x1388
 8001166:	f7ff ff5b 	bl	8001020 <delay>

      switch (cmFsm) {
 800116a:	4b9d      	ldr	r3, [pc, #628]	; (80013e0 <main+0x318>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b07      	cmp	r3, #7
 8001170:	f200 8257 	bhi.w	8001622 <main+0x55a>
 8001174:	a201      	add	r2, pc, #4	; (adr r2, 800117c <main+0xb4>)
 8001176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117a:	bf00      	nop
 800117c:	0800119d 	.word	0x0800119d
 8001180:	080011ab 	.word	0x080011ab
 8001184:	080014f5 	.word	0x080014f5
 8001188:	080014fd 	.word	0x080014fd
 800118c:	08001505 	.word	0x08001505
 8001190:	0800150d 	.word	0x0800150d
 8001194:	08001515 	.word	0x08001515
 8001198:	0800151d 	.word	0x0800151d
      case INIT:            // Initialize
          canIdCounter = 0;
 800119c:	4b91      	ldr	r3, [pc, #580]	; (80013e4 <main+0x31c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
          cmFsm = CANID;
 80011a2:	4b8f      	ldr	r3, [pc, #572]	; (80013e0 <main+0x318>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
          break;
 80011a8:	e23c      	b.n	8001624 <main+0x55c>
      case CANID:           // Read PWM and identify myself.
          canIdCounter++;
 80011aa:	4b8e      	ldr	r3, [pc, #568]	; (80013e4 <main+0x31c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	4a8c      	ldr	r2, [pc, #560]	; (80013e4 <main+0x31c>)
 80011b2:	6013      	str	r3, [r2, #0]
          if (canIdCounter > SECS(4)) {
 80011b4:	4b8b      	ldr	r3, [pc, #556]	; (80013e4 <main+0x31c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80011bc:	f240 8196 	bls.w	80014ec <main+0x424>
              cmFsm = CANVALVECMD;
 80011c0:	4b87      	ldr	r3, [pc, #540]	; (80013e0 <main+0x318>)
 80011c2:	2202      	movs	r2, #2
 80011c4:	701a      	strb	r2, [r3, #0]

              float duty = avgWidth / htim2.Init.Period;
 80011c6:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <main+0x320>)
 80011c8:	edd3 6a00 	vldr	s13, [r3]
 80011cc:	4b7c      	ldr	r3, [pc, #496]	; (80013c0 <main+0x2f8>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011dc:	edc7 7a00 	vstr	s15, [r7]

              if (duty >= 89.0f && duty < 100.0f) {
 80011e0:	edd7 7a00 	vldr	s15, [r7]
 80011e4:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80013ec <main+0x324>
 80011e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	db1e      	blt.n	8001230 <main+0x168>
 80011f2:	edd7 7a00 	vldr	s15, [r7]
 80011f6:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80013f0 <main+0x328>
 80011fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001202:	d515      	bpl.n	8001230 <main+0x168>
                  myCANAddress = canAddresses[0];
 8001204:	4b7b      	ldr	r3, [pc, #492]	; (80013f4 <main+0x32c>)
 8001206:	881a      	ldrh	r2, [r3, #0]
 8001208:	4b7b      	ldr	r3, [pc, #492]	; (80013f8 <main+0x330>)
 800120a:	801a      	strh	r2, [r3, #0]
                  TIM2->CCR3 = (uint32_t)(0.8f * (float)htim2.Init.Period);
 800120c:	4b6c      	ldr	r3, [pc, #432]	; (80013c0 <main+0x2f8>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001218:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80013fc <main+0x334>
 800121c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001228:	ee17 2a90 	vmov	r2, s15
 800122c:	63da      	str	r2, [r3, #60]	; 0x3c
 800122e:	e15d      	b.n	80014ec <main+0x424>
              } else if (duty > 79.0f && duty < 89.0f) {
 8001230:	edd7 7a00 	vldr	s15, [r7]
 8001234:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001400 <main+0x338>
 8001238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	dd1e      	ble.n	8001280 <main+0x1b8>
 8001242:	edd7 7a00 	vldr	s15, [r7]
 8001246:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80013ec <main+0x324>
 800124a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800124e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001252:	d515      	bpl.n	8001280 <main+0x1b8>
                  myCANAddress = canAddresses[1];
 8001254:	4b67      	ldr	r3, [pc, #412]	; (80013f4 <main+0x32c>)
 8001256:	885a      	ldrh	r2, [r3, #2]
 8001258:	4b67      	ldr	r3, [pc, #412]	; (80013f8 <main+0x330>)
 800125a:	801a      	strh	r2, [r3, #0]
                  TIM2->CCR3 = (uint32_t)(0.7f * (float)htim2.Init.Period);
 800125c:	4b58      	ldr	r3, [pc, #352]	; (80013c0 <main+0x2f8>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001268:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001404 <main+0x33c>
 800126c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001278:	ee17 2a90 	vmov	r2, s15
 800127c:	63da      	str	r2, [r3, #60]	; 0x3c
 800127e:	e135      	b.n	80014ec <main+0x424>
              } else if (duty > 69.0f && duty < 79.0f) {
 8001280:	edd7 7a00 	vldr	s15, [r7]
 8001284:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001408 <main+0x340>
 8001288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001290:	dd1e      	ble.n	80012d0 <main+0x208>
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001400 <main+0x338>
 800129a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	d515      	bpl.n	80012d0 <main+0x208>
                  myCANAddress = canAddresses[2];
 80012a4:	4b53      	ldr	r3, [pc, #332]	; (80013f4 <main+0x32c>)
 80012a6:	889a      	ldrh	r2, [r3, #4]
 80012a8:	4b53      	ldr	r3, [pc, #332]	; (80013f8 <main+0x330>)
 80012aa:	801a      	strh	r2, [r3, #0]
                  TIM2->CCR3 = (uint32_t)(0.6f * (float)htim2.Init.Period);
 80012ac:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <main+0x2f8>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012b8:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800140c <main+0x344>
 80012bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c8:	ee17 2a90 	vmov	r2, s15
 80012cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80012ce:	e10d      	b.n	80014ec <main+0x424>
              } else if (duty > 59.0f && duty < 69.0f) {
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001410 <main+0x348>
 80012d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e0:	dd1e      	ble.n	8001320 <main+0x258>
 80012e2:	edd7 7a00 	vldr	s15, [r7]
 80012e6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001408 <main+0x340>
 80012ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f2:	d515      	bpl.n	8001320 <main+0x258>
                  myCANAddress = canAddresses[3];
 80012f4:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <main+0x32c>)
 80012f6:	88da      	ldrh	r2, [r3, #6]
 80012f8:	4b3f      	ldr	r3, [pc, #252]	; (80013f8 <main+0x330>)
 80012fa:	801a      	strh	r2, [r3, #0]
                  TIM2->CCR3 = (uint32_t)(0.5f * (float)htim2.Init.Period);
 80012fc:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <main+0x2f8>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001308:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800130c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001318:	ee17 2a90 	vmov	r2, s15
 800131c:	63da      	str	r2, [r3, #60]	; 0x3c
 800131e:	e0e5      	b.n	80014ec <main+0x424>
              } else if (duty > 49.0f && duty < 59.0f) {
 8001320:	edd7 7a00 	vldr	s15, [r7]
 8001324:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001414 <main+0x34c>
 8001328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	dd1e      	ble.n	8001370 <main+0x2a8>
 8001332:	edd7 7a00 	vldr	s15, [r7]
 8001336:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001410 <main+0x348>
 800133a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001342:	d515      	bpl.n	8001370 <main+0x2a8>
                  myCANAddress = canAddresses[4];
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <main+0x32c>)
 8001346:	891a      	ldrh	r2, [r3, #8]
 8001348:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <main+0x330>)
 800134a:	801a      	strh	r2, [r3, #0]
                  TIM2->CCR3 = (uint32_t)(0.4f * (float)htim2.Init.Period);
 800134c:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <main+0x2f8>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001358:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001418 <main+0x350>
 800135c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001368:	ee17 2a90 	vmov	r2, s15
 800136c:	63da      	str	r2, [r3, #60]	; 0x3c
 800136e:	e0bd      	b.n	80014ec <main+0x424>
              } else if (duty > 39.0f && duty < 49.0f) {
 8001370:	edd7 7a00 	vldr	s15, [r7]
 8001374:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001420 <main+0x358>
 8001378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001380:	dd50      	ble.n	8001424 <main+0x35c>
 8001382:	edd7 7a00 	vldr	s15, [r7]
 8001386:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001414 <main+0x34c>
 800138a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800138e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001392:	d547      	bpl.n	8001424 <main+0x35c>
                  myCANAddress = canAddresses[5];
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <main+0x32c>)
 8001396:	895a      	ldrh	r2, [r3, #10]
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <main+0x330>)
 800139a:	801a      	strh	r2, [r3, #0]
                  TIM2->CCR3 = (uint32_t)(0.3f * (float)htim2.Init.Period);
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <main+0x2f8>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013a8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800141c <main+0x354>
 80013ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b8:	ee17 2a90 	vmov	r2, s15
 80013bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80013be:	e095      	b.n	80014ec <main+0x424>
 80013c0:	20000190 	.word	0x20000190
 80013c4:	2000013c 	.word	0x2000013c
 80013c8:	200001e0 	.word	0x200001e0
 80013cc:	20000014 	.word	0x20000014
 80013d0:	20000018 	.word	0x20000018
 80013d4:	200001f8 	.word	0x200001f8
 80013d8:	0800949c 	.word	0x0800949c
 80013dc:	48000400 	.word	0x48000400
 80013e0:	200001dc 	.word	0x200001dc
 80013e4:	200001e4 	.word	0x200001e4
 80013e8:	20000224 	.word	0x20000224
 80013ec:	42b20000 	.word	0x42b20000
 80013f0:	42c80000 	.word	0x42c80000
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000010 	.word	0x20000010
 80013fc:	3f4ccccd 	.word	0x3f4ccccd
 8001400:	429e0000 	.word	0x429e0000
 8001404:	3f333333 	.word	0x3f333333
 8001408:	428a0000 	.word	0x428a0000
 800140c:	3f19999a 	.word	0x3f19999a
 8001410:	426c0000 	.word	0x426c0000
 8001414:	42440000 	.word	0x42440000
 8001418:	3ecccccd 	.word	0x3ecccccd
 800141c:	3e99999a 	.word	0x3e99999a
 8001420:	421c0000 	.word	0x421c0000
              } else if (duty > 29.0f && duty < 39.0f) {
 8001424:	edd7 7a00 	vldr	s15, [r7]
 8001428:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 800142c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001434:	dd1e      	ble.n	8001474 <main+0x3ac>
 8001436:	edd7 7a00 	vldr	s15, [r7]
 800143a:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8001420 <main+0x358>
 800143e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001446:	d515      	bpl.n	8001474 <main+0x3ac>
                  myCANAddress = canAddresses[6];
 8001448:	4b77      	ldr	r3, [pc, #476]	; (8001628 <main+0x560>)
 800144a:	899a      	ldrh	r2, [r3, #12]
 800144c:	4b77      	ldr	r3, [pc, #476]	; (800162c <main+0x564>)
 800144e:	801a      	strh	r2, [r3, #0]
                  TIM2->CCR3 = (uint32_t)(0.2f * (float)htim2.Init.Period);
 8001450:	4b77      	ldr	r3, [pc, #476]	; (8001630 <main+0x568>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	ee07 3a90 	vmov	s15, r3
 8001458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800145c:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001634 <main+0x56c>
 8001460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800146c:	ee17 2a90 	vmov	r2, s15
 8001470:	63da      	str	r2, [r3, #60]	; 0x3c
 8001472:	e03b      	b.n	80014ec <main+0x424>
              } else if (duty > 19.0f && duty < 29.0f) {
 8001474:	edd7 7a00 	vldr	s15, [r7]
 8001478:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800147c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	dd1e      	ble.n	80014c4 <main+0x3fc>
 8001486:	edd7 7a00 	vldr	s15, [r7]
 800148a:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 800148e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001496:	d515      	bpl.n	80014c4 <main+0x3fc>
                  myCANAddress = canAddresses[7];
 8001498:	4b63      	ldr	r3, [pc, #396]	; (8001628 <main+0x560>)
 800149a:	89da      	ldrh	r2, [r3, #14]
 800149c:	4b63      	ldr	r3, [pc, #396]	; (800162c <main+0x564>)
 800149e:	801a      	strh	r2, [r3, #0]
                  TIM2->CCR3 = (uint32_t)(0.1f * (float)htim2.Init.Period);
 80014a0:	4b63      	ldr	r3, [pc, #396]	; (8001630 <main+0x568>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ac:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001638 <main+0x570>
 80014b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014bc:	ee17 2a90 	vmov	r2, s15
 80014c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80014c2:	e013      	b.n	80014ec <main+0x424>
              } else {
                  cmFsm = INIT;
 80014c4:	4b5d      	ldr	r3, [pc, #372]	; (800163c <main+0x574>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
                  TIM2->CCR3 = (uint32_t)(0.95f * (float)htim2.Init.Period);
 80014ca:	4b59      	ldr	r3, [pc, #356]	; (8001630 <main+0x568>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d6:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001640 <main+0x578>
 80014da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e6:	ee17 2a90 	vmov	r2, s15
 80014ea:	63da      	str	r2, [r3, #60]	; 0x3c
              }
          }

          // IMPORTANT : Jump state for testing only
          cmFsm = CANVALVECMD;
 80014ec:	4b53      	ldr	r3, [pc, #332]	; (800163c <main+0x574>)
 80014ee:	2202      	movs	r2, #2
 80014f0:	701a      	strb	r2, [r3, #0]
          break;
 80014f2:	e097      	b.n	8001624 <main+0x55c>
      case CANVALVECMD:     // Read CAN bus valve commands and act upon then.
          cmFsm = CANPRESSUREREAD;
 80014f4:	4b51      	ldr	r3, [pc, #324]	; (800163c <main+0x574>)
 80014f6:	2203      	movs	r2, #3
 80014f8:	701a      	strb	r2, [r3, #0]
          break;
 80014fa:	e093      	b.n	8001624 <main+0x55c>
      case CANPRESSUREREAD: // Read pressure.
          cmFsm = CANHEIGHTREAD;
 80014fc:	4b4f      	ldr	r3, [pc, #316]	; (800163c <main+0x574>)
 80014fe:	2204      	movs	r2, #4
 8001500:	701a      	strb	r2, [r3, #0]
          break;
 8001502:	e08f      	b.n	8001624 <main+0x55c>
      case CANHEIGHTREAD:   // Read height.
          cmFsm = TEMPREAD;
 8001504:	4b4d      	ldr	r3, [pc, #308]	; (800163c <main+0x574>)
 8001506:	2205      	movs	r2, #5
 8001508:	701a      	strb	r2, [r3, #0]
          break;
 800150a:	e08b      	b.n	8001624 <main+0x55c>
      case TEMPREAD:        // Read temperature.
          cmFsm = READADC;
 800150c:	4b4b      	ldr	r3, [pc, #300]	; (800163c <main+0x574>)
 800150e:	2206      	movs	r2, #6
 8001510:	701a      	strb	r2, [r3, #0]
          break;
 8001512:	e087      	b.n	8001624 <main+0x55c>
      case READADC:         // Read ADC.
          cmFsm = CANSTATUSREPORT;
 8001514:	4b49      	ldr	r3, [pc, #292]	; (800163c <main+0x574>)
 8001516:	2207      	movs	r2, #7
 8001518:	701a      	strb	r2, [r3, #0]
          break;
 800151a:	e083      	b.n	8001624 <main+0x55c>
      case CANSTATUSREPORT:  // Report status.
          channelSelect(1);
 800151c:	2001      	movs	r0, #1
 800151e:	f7ff fd93 	bl	8001048 <channelSelect>
          HAL_ADC_Start(&hadc1);
 8001522:	4848      	ldr	r0, [pc, #288]	; (8001644 <main+0x57c>)
 8001524:	f001 fe52 	bl	80031cc <HAL_ADC_Start>
          HAL_ADC_PollForConversion(&hadc1, 1000);
 8001528:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800152c:	4845      	ldr	r0, [pc, #276]	; (8001644 <main+0x57c>)
 800152e:	f001 ff3b 	bl	80033a8 <HAL_ADC_PollForConversion>
          adcVal[0] = HAL_ADC_GetValue(&hadc1);
 8001532:	4844      	ldr	r0, [pc, #272]	; (8001644 <main+0x57c>)
 8001534:	f002 f810 	bl	8003558 <HAL_ADC_GetValue>
 8001538:	4603      	mov	r3, r0
 800153a:	4a43      	ldr	r2, [pc, #268]	; (8001648 <main+0x580>)
 800153c:	6013      	str	r3, [r2, #0]
          HAL_ADC_Stop(&hadc1);
 800153e:	4841      	ldr	r0, [pc, #260]	; (8001644 <main+0x57c>)
 8001540:	f001 fefe 	bl	8003340 <HAL_ADC_Stop>

          channelSelect(2);
 8001544:	2002      	movs	r0, #2
 8001546:	f7ff fd7f 	bl	8001048 <channelSelect>
          HAL_ADC_Start(&hadc1);
 800154a:	483e      	ldr	r0, [pc, #248]	; (8001644 <main+0x57c>)
 800154c:	f001 fe3e 	bl	80031cc <HAL_ADC_Start>
          HAL_ADC_PollForConversion(&hadc1, 1000);
 8001550:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001554:	483b      	ldr	r0, [pc, #236]	; (8001644 <main+0x57c>)
 8001556:	f001 ff27 	bl	80033a8 <HAL_ADC_PollForConversion>
          adcVal[1] = HAL_ADC_GetValue(&hadc1);
 800155a:	483a      	ldr	r0, [pc, #232]	; (8001644 <main+0x57c>)
 800155c:	f001 fffc 	bl	8003558 <HAL_ADC_GetValue>
 8001560:	4603      	mov	r3, r0
 8001562:	4a39      	ldr	r2, [pc, #228]	; (8001648 <main+0x580>)
 8001564:	6053      	str	r3, [r2, #4]
          HAL_ADC_Stop(&hadc1);
 8001566:	4837      	ldr	r0, [pc, #220]	; (8001644 <main+0x57c>)
 8001568:	f001 feea 	bl	8003340 <HAL_ADC_Stop>

          channelSelect(3);
 800156c:	2003      	movs	r0, #3
 800156e:	f7ff fd6b 	bl	8001048 <channelSelect>
          HAL_ADC_Start(&hadc1);
 8001572:	4834      	ldr	r0, [pc, #208]	; (8001644 <main+0x57c>)
 8001574:	f001 fe2a 	bl	80031cc <HAL_ADC_Start>
          HAL_ADC_PollForConversion(&hadc1, 1000);
 8001578:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800157c:	4831      	ldr	r0, [pc, #196]	; (8001644 <main+0x57c>)
 800157e:	f001 ff13 	bl	80033a8 <HAL_ADC_PollForConversion>
          adcVal[2] = HAL_ADC_GetValue(&hadc1);
 8001582:	4830      	ldr	r0, [pc, #192]	; (8001644 <main+0x57c>)
 8001584:	f001 ffe8 	bl	8003558 <HAL_ADC_GetValue>
 8001588:	4603      	mov	r3, r0
 800158a:	4a2f      	ldr	r2, [pc, #188]	; (8001648 <main+0x580>)
 800158c:	6093      	str	r3, [r2, #8]
          HAL_ADC_Stop(&hadc1);
 800158e:	482d      	ldr	r0, [pc, #180]	; (8001644 <main+0x57c>)
 8001590:	f001 fed6 	bl	8003340 <HAL_ADC_Stop>

          adcVoltage[0] = 3.3f * ((float)adcVal[0] / 4095.0f);
 8001594:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <main+0x580>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015a0:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800164c <main+0x584>
 80015a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001650 <main+0x588>
 80015ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <main+0x58c>)
 80015b2:	edc3 7a00 	vstr	s15, [r3]
          adcVoltage[1] = 3.3f * ((float)adcVal[1] / 4095.0f);
 80015b6:	4b24      	ldr	r3, [pc, #144]	; (8001648 <main+0x580>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015c2:	eddf 6a22 	vldr	s13, [pc, #136]	; 800164c <main+0x584>
 80015c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ca:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001650 <main+0x588>
 80015ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <main+0x58c>)
 80015d4:	edc3 7a01 	vstr	s15, [r3, #4]
          adcVoltage[2] = 3.3f * ((float)adcVal[2] / 4095.0f);
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <main+0x580>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015e4:	eddf 6a19 	vldr	s13, [pc, #100]	; 800164c <main+0x584>
 80015e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ec:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001650 <main+0x588>
 80015f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <main+0x58c>)
 80015f6:	edc3 7a02 	vstr	s15, [r3, #8]

          i2cTransDelay = 1;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <main+0x590>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
          int32_t i2cStatus = MS5837Read(&hi2c1, &sensorResult);
 8001600:	4916      	ldr	r1, [pc, #88]	; (800165c <main+0x594>)
 8001602:	4817      	ldr	r0, [pc, #92]	; (8001660 <main+0x598>)
 8001604:	f000 fabc 	bl	8001b80 <MS5837Read>
 8001608:	6078      	str	r0, [r7, #4]

          temperature = sensorResult.temperature;
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <main+0x594>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4a15      	ldr	r2, [pc, #84]	; (8001664 <main+0x59c>)
 8001610:	6013      	str	r3, [r2, #0]
          pressure    = sensorResult.pressure;
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <main+0x594>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a14      	ldr	r2, [pc, #80]	; (8001668 <main+0x5a0>)
 8001618:	6013      	str	r3, [r2, #0]


          cmFsm = CANVALVECMD;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <main+0x574>)
 800161c:	2202      	movs	r2, #2
 800161e:	701a      	strb	r2, [r3, #0]
          break;
 8001620:	e000      	b.n	8001624 <main+0x55c>
      default:
          break;
 8001622:	bf00      	nop
      counter--;
 8001624:	e573      	b.n	800110e <main+0x46>
 8001626:	bf00      	nop
 8001628:	20000000 	.word	0x20000000
 800162c:	20000010 	.word	0x20000010
 8001630:	20000190 	.word	0x20000190
 8001634:	3e4ccccd 	.word	0x3e4ccccd
 8001638:	3dcccccd 	.word	0x3dcccccd
 800163c:	200001dc 	.word	0x200001dc
 8001640:	3f733333 	.word	0x3f733333
 8001644:	200000b0 	.word	0x200000b0
 8001648:	20000228 	.word	0x20000228
 800164c:	457ff000 	.word	0x457ff000
 8001650:	40533333 	.word	0x40533333
 8001654:	20000234 	.word	0x20000234
 8001658:	20000020 	.word	0x20000020
 800165c:	20000240 	.word	0x20000240
 8001660:	2000013c 	.word	0x2000013c
 8001664:	20000248 	.word	0x20000248
 8001668:	2000024c 	.word	0x2000024c

0800166c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b096      	sub	sp, #88	; 0x58
 8001670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	2244      	movs	r2, #68	; 0x44
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f006 ff6c 	bl	8008558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001680:	463b      	mov	r3, r7
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800168e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001692:	f004 f847 	bl	8005724 <HAL_PWREx_ControlVoltageScaling>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800169c:	f000 f9bc 	bl	8001a18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016a0:	2302      	movs	r3, #2
 80016a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016aa:	2310      	movs	r3, #16
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ae:	2302      	movs	r3, #2
 80016b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016b2:	2302      	movs	r3, #2
 80016b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016b6:	2301      	movs	r3, #1
 80016b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80016ba:	230a      	movs	r3, #10
 80016bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016be:	2307      	movs	r3, #7
 80016c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016c6:	2302      	movs	r3, #2
 80016c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 f87e 	bl	80057d0 <HAL_RCC_OscConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0x72>
  {
    Error_Handler();
 80016da:	f000 f99d 	bl	8001a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016de:	230f      	movs	r3, #15
 80016e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e2:	2303      	movs	r3, #3
 80016e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016f2:	463b      	mov	r3, r7
 80016f4:	2104      	movs	r1, #4
 80016f6:	4618      	mov	r0, r3
 80016f8:	f004 fc46 	bl	8005f88 <HAL_RCC_ClockConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001702:	f000 f989 	bl	8001a18 <Error_Handler>
  }
}
 8001706:	bf00      	nop
 8001708:	3758      	adds	r7, #88	; 0x58
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
 8001730:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  // Manually copy this from the IOC generated code!!

  // Common config
  hadc1.Instance = ADC1;
 8001732:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <MX_ADC1_Init+0xb4>)
 8001734:	4a24      	ldr	r2, [pc, #144]	; (80017c8 <MX_ADC1_Init+0xb8>)
 8001736:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001738:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <MX_ADC1_Init+0xb4>)
 800173a:	2200      	movs	r2, #0
 800173c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800173e:	4b21      	ldr	r3, [pc, #132]	; (80017c4 <MX_ADC1_Init+0xb4>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <MX_ADC1_Init+0xb4>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800174a:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <MX_ADC1_Init+0xb4>)
 800174c:	2201      	movs	r2, #1
 800174e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <MX_ADC1_Init+0xb4>)
 8001752:	2204      	movs	r2, #4
 8001754:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <MX_ADC1_Init+0xb4>)
 8001758:	2200      	movs	r2, #0
 800175a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <MX_ADC1_Init+0xb4>)
 800175e:	2200      	movs	r2, #0
 8001760:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <MX_ADC1_Init+0xb4>)
 8001764:	2201      	movs	r2, #1
 8001766:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001768:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_ADC1_Init+0xb4>)
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <MX_ADC1_Init+0xb4>)
 8001772:	2200      	movs	r2, #0
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <MX_ADC1_Init+0xb4>)
 8001778:	2200      	movs	r2, #0
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_ADC1_Init+0xb4>)
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_ADC1_Init+0xb4>)
 8001786:	2200      	movs	r2, #0
 8001788:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_ADC1_Init+0xb4>)
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001792:	480c      	ldr	r0, [pc, #48]	; (80017c4 <MX_ADC1_Init+0xb4>)
 8001794:	f001 fbc4 	bl	8002f20 <HAL_ADC_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800179e:	f000 f93b 	bl	8001a18 <Error_Handler>
  }
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_ADC1_Init+0xb4>)
 80017ae:	f002 fc99 	bl	80040e4 <HAL_ADCEx_MultiModeConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80017b8:	f000 f92e 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
#endif
  /* USER CODE END ADC1_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	; 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200000b0 	.word	0x200000b0
 80017c8:	50040000 	.word	0x50040000

080017cc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <MX_CAN1_Init+0x68>)
 80017d2:	4a19      	ldr	r2, [pc, #100]	; (8001838 <MX_CAN1_Init+0x6c>)
 80017d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <MX_CAN1_Init+0x68>)
 80017d8:	2228      	movs	r2, #40	; 0x28
 80017da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <MX_CAN1_Init+0x68>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MX_CAN1_Init+0x68>)
 80017e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017e8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <MX_CAN1_Init+0x68>)
 80017ec:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80017f0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <MX_CAN1_Init+0x68>)
 80017f4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80017f8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_CAN1_Init+0x68>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_CAN1_Init+0x68>)
 8001802:	2200      	movs	r2, #0
 8001804:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <MX_CAN1_Init+0x68>)
 8001808:	2200      	movs	r2, #0
 800180a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_CAN1_Init+0x68>)
 800180e:	2200      	movs	r2, #0
 8001810:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <MX_CAN1_Init+0x68>)
 8001814:	2200      	movs	r2, #0
 8001816:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_CAN1_Init+0x68>)
 800181a:	2200      	movs	r2, #0
 800181c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_CAN1_Init+0x68>)
 8001820:	f002 fd10 	bl	8004244 <HAL_CAN_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800182a:	f000 f8f5 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000114 	.word	0x20000114
 8001838:	40006400 	.word	0x40006400

0800183c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <MX_I2C1_Init+0x74>)
 8001842:	4a1c      	ldr	r2, [pc, #112]	; (80018b4 <MX_I2C1_Init+0x78>)
 8001844:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <MX_I2C1_Init+0x74>)
 8001848:	4a1b      	ldr	r2, [pc, #108]	; (80018b8 <MX_I2C1_Init+0x7c>)
 800184a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800184c:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <MX_I2C1_Init+0x74>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <MX_I2C1_Init+0x74>)
 8001854:	2201      	movs	r2, #1
 8001856:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001858:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <MX_I2C1_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_I2C1_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <MX_I2C1_Init+0x74>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_I2C1_Init+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_I2C1_Init+0x74>)
 8001872:	2200      	movs	r2, #0
 8001874:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001876:	480e      	ldr	r0, [pc, #56]	; (80018b0 <MX_I2C1_Init+0x74>)
 8001878:	f003 f8b4 	bl	80049e4 <HAL_I2C_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001882:	f000 f8c9 	bl	8001a18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001886:	2100      	movs	r1, #0
 8001888:	4809      	ldr	r0, [pc, #36]	; (80018b0 <MX_I2C1_Init+0x74>)
 800188a:	f003 fea5 	bl	80055d8 <HAL_I2CEx_ConfigAnalogFilter>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001894:	f000 f8c0 	bl	8001a18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001898:	2100      	movs	r1, #0
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_I2C1_Init+0x74>)
 800189c:	f003 fee7 	bl	800566e <HAL_I2CEx_ConfigDigitalFilter>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018a6:	f000 f8b7 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2000013c 	.word	0x2000013c
 80018b4:	40005400 	.word	0x40005400
 80018b8:	10909cec 	.word	0x10909cec

080018bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08e      	sub	sp, #56	; 0x38
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018dc:	463b      	mov	r3, r7
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]
 80018ea:	615a      	str	r2, [r3, #20]
 80018ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018ee:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <MX_TIM2_Init+0xf8>)
 80018f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80018f6:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <MX_TIM2_Init+0xf8>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fc:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <MX_TIM2_Init+0xf8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001902:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <MX_TIM2_Init+0xf8>)
 8001904:	f242 7210 	movw	r2, #10000	; 0x2710
 8001908:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800190a:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <MX_TIM2_Init+0xf8>)
 800190c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001910:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001912:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <MX_TIM2_Init+0xf8>)
 8001914:	2280      	movs	r2, #128	; 0x80
 8001916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001918:	4826      	ldr	r0, [pc, #152]	; (80019b4 <MX_TIM2_Init+0xf8>)
 800191a:	f005 fbb5 	bl	8007088 <HAL_TIM_IC_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001924:	f000 f878 	bl	8001a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001928:	4822      	ldr	r0, [pc, #136]	; (80019b4 <MX_TIM2_Init+0xf8>)
 800192a:	f005 fa45 	bl	8006db8 <HAL_TIM_PWM_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001934:	f000 f870 	bl	8001a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001944:	4619      	mov	r1, r3
 8001946:	481b      	ldr	r0, [pc, #108]	; (80019b4 <MX_TIM2_Init+0xf8>)
 8001948:	f006 fd36 	bl	80083b8 <HAL_TIMEx_MasterConfigSynchronization>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001952:	f000 f861 	bl	8001a18 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001956:	230a      	movs	r3, #10
 8001958:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800195a:	2301      	movs	r3, #1
 800195c:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	2200      	movs	r2, #0
 800196c:	4619      	mov	r1, r3
 800196e:	4811      	ldr	r0, [pc, #68]	; (80019b4 <MX_TIM2_Init+0xf8>)
 8001970:	f005 fe4b 	bl	800760a <HAL_TIM_IC_ConfigChannel>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 800197a:	f000 f84d 	bl	8001a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197e:	2360      	movs	r3, #96	; 0x60
 8001980:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800198e:	463b      	mov	r3, r7
 8001990:	2208      	movs	r2, #8
 8001992:	4619      	mov	r1, r3
 8001994:	4807      	ldr	r0, [pc, #28]	; (80019b4 <MX_TIM2_Init+0xf8>)
 8001996:	f005 fed5 	bl	8007744 <HAL_TIM_PWM_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80019a0:	f000 f83a 	bl	8001a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019a4:	4803      	ldr	r0, [pc, #12]	; (80019b4 <MX_TIM2_Init+0xf8>)
 80019a6:	f000 fea9 	bl	80026fc <HAL_TIM_MspPostInit>

}
 80019aa:	bf00      	nop
 80019ac:	3738      	adds	r7, #56	; 0x38
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000190 	.word	0x20000190

080019b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <MX_GPIO_Init+0x5c>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <MX_GPIO_Init+0x5c>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <MX_GPIO_Init+0x5c>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_GPIO_Init+0x5c>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <MX_GPIO_Init+0x5c>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_GPIO_Init+0x5c>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_GPIO_Init+0x5c>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <MX_GPIO_Init+0x5c>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_GPIO_Init+0x5c>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]

}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000

08001a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1c:	b672      	cpsid	i
}
 8001a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <Error_Handler+0x8>

08001a22 <swap_24>:
 * @post
 * @param src
 * @return
 */
static inline uint32_t swap_24(uint32_t src)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b087      	sub	sp, #28
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
    uint32_t low_bytes = src & 0x000000FF;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	617b      	str	r3, [r7, #20]
    uint32_t high_bytes = src & 0x00FF0000;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001a36:	613b      	str	r3, [r7, #16]
    uint32_t shift_results = src & 0x0000FF00;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001a3e:	60fb      	str	r3, [r7, #12]
    shift_results = shift_results | (low_bytes << 16);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	041b      	lsls	r3, r3, #16
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
    return (shift_results | (high_bytes >> 16));
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	0c1a      	lsrs	r2, r3, #16
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	371c      	adds	r7, #28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <MS5837Init>:
 * @post
 * @param handle
 * @return
 */
int32_t MS5837Init(I2C_HandleTypeDef *handle)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	757b      	strb	r3, [r7, #21]
    uint8_t reset = MS5837_RESET;
 8001a6c:	231e      	movs	r3, #30
 8001a6e:	72fb      	strb	r3, [r7, #11]
    uint8_t address_offset = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	72bb      	strb	r3, [r7, #10]

    if (handle != NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d010      	beq.n	8001a9c <MS5837Init+0x3c>
    {
        i2c_handle = handle;
 8001a7a:	4a3e      	ldr	r2, [pc, #248]	; (8001b74 <MS5837Init+0x114>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6013      	str	r3, [r2, #0]
    else
    {
        return (MS5837_ERROR_INVALID_HANDLE);
    }

    status = HAL_I2C_IsDeviceReady(i2c_handle, MS5837_ADDRESS_SHIFT, MS5837_TRIAL, HAL_MAX_DELAY);
 8001a80:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <MS5837Init+0x114>)
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a88:	2201      	movs	r2, #1
 8001a8a:	21ec      	movs	r1, #236	; 0xec
 8001a8c:	f003 fa24 	bl	8004ed8 <HAL_I2C_IsDeviceReady>
 8001a90:	4603      	mov	r3, r0
 8001a92:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK)
 8001a94:	7d7b      	ldrb	r3, [r7, #21]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d006      	beq.n	8001aa8 <MS5837Init+0x48>
 8001a9a:	e002      	b.n	8001aa2 <MS5837Init+0x42>
        return (MS5837_ERROR_INVALID_HANDLE);
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aa0:	e063      	b.n	8001b6a <MS5837Init+0x10a>
    {
        return (MS5837_ERROR_DEVICE_NOTREADY);
 8001aa2:	f06f 0302 	mvn.w	r3, #2
 8001aa6:	e060      	b.n	8001b6a <MS5837Init+0x10a>
    }

    status = HAL_I2C_Master_Transmit(i2c_handle, MS5837_ADDRESS_SHIFT, &reset, sizeof(uint8_t), HAL_MAX_DELAY);
 8001aa8:	4b32      	ldr	r3, [pc, #200]	; (8001b74 <MS5837Init+0x114>)
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	f107 020b 	add.w	r2, r7, #11
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	21ec      	movs	r1, #236	; 0xec
 8001aba:	f003 f823 	bl	8004b04 <HAL_I2C_Master_Transmit>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK)
 8001ac2:	7d7b      	ldrb	r3, [r7, #21]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <MS5837Init+0x6e>
    {
        return (MS5837_ERROR_TRANSMIT_RESET);
 8001ac8:	f06f 0303 	mvn.w	r3, #3
 8001acc:	e04d      	b.n	8001b6a <MS5837Init+0x10a>
    }

    for (int16_t index = 0; index < MS5837_PROM_SIZE; ++index)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	82fb      	strh	r3, [r7, #22]
 8001ad2:	e045      	b.n	8001b60 <MS5837Init+0x100>
    {
        address_offset = MS5837_PROM_READ_START | (index << 1);
 8001ad4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	72bb      	strb	r3, [r7, #10]
        status = HAL_I2C_Master_Transmit(i2c_handle, MS5837_ADDRESS_SHIFT, &address_offset, sizeof(uint8_t), HAL_MAX_DELAY);
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <MS5837Init+0x114>)
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	f107 020a 	add.w	r2, r7, #10
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2301      	movs	r3, #1
 8001af6:	21ec      	movs	r1, #236	; 0xec
 8001af8:	f003 f804 	bl	8004b04 <HAL_I2C_Master_Transmit>
 8001afc:	4603      	mov	r3, r0
 8001afe:	757b      	strb	r3, [r7, #21]
        if (status != HAL_OK)
 8001b00:	7d7b      	ldrb	r3, [r7, #21]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <MS5837Init+0xac>
        {
            return (MS5837_ERROR_TRANSMIT_PROM);
 8001b06:	f06f 0304 	mvn.w	r3, #4
 8001b0a:	e02e      	b.n	8001b6a <MS5837Init+0x10a>
        }

        status = HAL_I2C_Master_Receive(i2c_handle, MS5837_ADDRESS_SHIFT, (uint8_t*) &MS5837_Prom[index], sizeof(uint16_t),
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <MS5837Init+0x114>)
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4a18      	ldr	r2, [pc, #96]	; (8001b78 <MS5837Init+0x118>)
 8001b18:	441a      	add	r2, r3
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2302      	movs	r3, #2
 8001b22:	21ec      	movs	r1, #236	; 0xec
 8001b24:	f003 f8e2 	bl	8004cec <HAL_I2C_Master_Receive>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	757b      	strb	r3, [r7, #21]
        HAL_MAX_DELAY);

        if (status != HAL_OK)
 8001b2c:	7d7b      	ldrb	r3, [r7, #21]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <MS5837Init+0xd8>
        {
            return (MS5837_ERROR_RECIEVE_PROM);
 8001b32:	f06f 0305 	mvn.w	r3, #5
 8001b36:	e018      	b.n	8001b6a <MS5837Init+0x10a>
        }

        MS5837_Prom[index] = __REV16(MS5837_Prom[index]);
 8001b38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <MS5837Init+0x118>)
 8001b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b42:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	ba5b      	rev16	r3, r3
 8001b48:	60fb      	str	r3, [r7, #12]
  return result;
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b50:	b291      	uxth	r1, r2
 8001b52:	4a09      	ldr	r2, [pc, #36]	; (8001b78 <MS5837Init+0x118>)
 8001b54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int16_t index = 0; index < MS5837_PROM_SIZE; ++index)
 8001b58:	8afb      	ldrh	r3, [r7, #22]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	82fb      	strh	r3, [r7, #22]
 8001b60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b64:	2b06      	cmp	r3, #6
 8001b66:	ddb5      	ble.n	8001ad4 <MS5837Init+0x74>
    }
    return MS5837_SUCCESS;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000260 	.word	0x20000260
 8001b78:	20000250 	.word	0x20000250
 8001b7c:	00000000 	.word	0x00000000

08001b80 <MS5837Read>:
 * @param handle
 * @param result
 * @return
 */
int32_t MS5837Read(I2C_HandleTypeDef *handle, MS5837_Sensor_Result *result)
{
 8001b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b84:	ed2d 8b02 	vpush	{d8}
 8001b88:	b0f0      	sub	sp, #448	; 0x1c0
 8001b8a:	af02      	add	r7, sp, #8
 8001b8c:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
 8001b90:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
    HAL_StatusTypeDef status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
    uint32_t D_value = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

    // D1 and D2 need to be unsigned 32-bit integers (long 0-4294967295)
    uint32_t D1 = 0;    // Store uncompensated pressure value
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    uint32_t D2 = 0;    // Store uncompensated temperature value
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

    // These three variables are used for the conversion steps
    // They should be signed 32-bit integer initially
    // i.e. signed long from -2147483648 to 2147483647
    int64_t dT = 0;
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
    int32_t TEMP = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

    // These values need to be signed 64 bit integers
    // (long long = int64_t)
    int64_t OFF = 0;
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
    int64_t SENS = 0;
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170

    int64_t Ti = 0;
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
    int64_t OFFi = 0;
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
    int64_t SENSi = 0;
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0

    int32_t P = 0; // First order pressure in mbar, initially as a signed long integer
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    UNUSED(P);
    int32_t P2 = 0; // Second order pressure in mbar, initially as a signed long integer
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168


    if (handle != NULL)
 8001c06:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d008      	beq.n	8001c20 <MS5837Read+0xa0>
    {
        i2c_handle = handle;
 8001c0e:	4a57      	ldr	r2, [pc, #348]	; (8001d6c <MS5837Read+0x1ec>)
 8001c10:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001c14:	6013      	str	r3, [r2, #0]
    else
    {
        return (MS5837_ERROR_INVALID_HANDLE);
    }

    if (result == NULL)
 8001c16:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d106      	bne.n	8001c2c <MS5837Read+0xac>
 8001c1e:	e002      	b.n	8001c26 <MS5837Read+0xa6>
        return (MS5837_ERROR_INVALID_HANDLE);
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c24:	e3e3      	b.n	80023ee <MS5837Read+0x86e>
    {
        return MS5837_ERROR_INVALID_POINTER;
 8001c26:	f06f 0301 	mvn.w	r3, #1
 8001c2a:	e3e0      	b.n	80023ee <MS5837Read+0x86e>
    }
    else
    {
        result->pressure = 0.0f;
 8001c2c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	6013      	str	r3, [r2, #0]
        result->temperature = 0.0f;
 8001c36:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	6053      	str	r3, [r2, #4]
    }

    // First read the D1 register for pressure
    status = HAL_I2C_Master_Transmit(i2c_handle, MS5837_ADDRESS_SHIFT, &d1_address, sizeof(uint8_t), HAL_MAX_DELAY);
 8001c40:	4b4a      	ldr	r3, [pc, #296]	; (8001d6c <MS5837Read+0x1ec>)
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	4a48      	ldr	r2, [pc, #288]	; (8001d70 <MS5837Read+0x1f0>)
 8001c4e:	21ec      	movs	r1, #236	; 0xec
 8001c50:	f002 ff58 	bl	8004b04 <HAL_I2C_Master_Transmit>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
    if (status != HAL_OK)
 8001c5a:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <MS5837Read+0xe8>
    {
        return (MS5837_ERROR_TRANSMIT_READ_D1);
 8001c62:	f06f 0306 	mvn.w	r3, #6
 8001c66:	e3c2      	b.n	80023ee <MS5837Read+0x86e>
    }

    //osDelay(I2C_DELAY_D1);
    HAL_Delay(i2cTransDelay);
 8001c68:	4b42      	ldr	r3, [pc, #264]	; (8001d74 <MS5837Read+0x1f4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 ff01 	bl	8002a74 <HAL_Delay>

    status = HAL_I2C_Master_Transmit(i2c_handle, MS5837_ADDRESS_SHIFT, &adc_read, sizeof(uint8_t), HAL_MAX_DELAY);
 8001c72:	4b3e      	ldr	r3, [pc, #248]	; (8001d6c <MS5837Read+0x1ec>)
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	4a3e      	ldr	r2, [pc, #248]	; (8001d78 <MS5837Read+0x1f8>)
 8001c80:	21ec      	movs	r1, #236	; 0xec
 8001c82:	f002 ff3f 	bl	8004b04 <HAL_I2C_Master_Transmit>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
    if (status != HAL_OK)
 8001c8c:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <MS5837Read+0x11a>
    {
        return (MS5837_ERROR_READ_ADC);
 8001c94:	f06f 030a 	mvn.w	r3, #10
 8001c98:	e3a9      	b.n	80023ee <MS5837Read+0x86e>
    }

    HAL_Delay(i2cTransDelay);
 8001c9a:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <MS5837Read+0x1f4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 fee8 	bl	8002a74 <HAL_Delay>

    status = HAL_I2C_Master_Receive(i2c_handle, MS5837_ADDRESS_SHIFT, (uint8_t*) &D_value, sizeof(uint32_t), HAL_MAX_DELAY);
 8001ca4:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <MS5837Read+0x1ec>)
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	21ec      	movs	r1, #236	; 0xec
 8001cb6:	f003 f819 	bl	8004cec <HAL_I2C_Master_Receive>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
    if (status != HAL_OK)
 8001cc0:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <MS5837Read+0x14e>
    {
        return (MS5837_ERROR_RECIEVE_READ_D1);
 8001cc8:	f06f 0307 	mvn.w	r3, #7
 8001ccc:	e38f      	b.n	80023ee <MS5837Read+0x86e>
    }

    D1 = swap_24(D_value);
 8001cce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fea5 	bl	8001a22 <swap_24>
 8001cd8:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198

    HAL_Delay(i2cTransDelay);
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <MS5837Read+0x1f4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 fec7 	bl	8002a74 <HAL_Delay>

    // Second we read the D2 register for temperature
    status = HAL_I2C_Master_Transmit(i2c_handle, MS5837_ADDRESS_SHIFT, &d2_address, sizeof(uint8_t), HAL_MAX_DELAY);
 8001ce6:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <MS5837Read+0x1ec>)
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	4a22      	ldr	r2, [pc, #136]	; (8001d7c <MS5837Read+0x1fc>)
 8001cf4:	21ec      	movs	r1, #236	; 0xec
 8001cf6:	f002 ff05 	bl	8004b04 <HAL_I2C_Master_Transmit>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
    if (status != HAL_OK)
 8001d00:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <MS5837Read+0x18e>
    {
        return (MS5837_ERROR_TRANSMIT_READ_D1);
 8001d08:	f06f 0306 	mvn.w	r3, #6
 8001d0c:	e36f      	b.n	80023ee <MS5837Read+0x86e>
    }

    //osDelay(I2C_DELAY_D2);
    HAL_Delay(i2cTransDelay);
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <MS5837Read+0x1f4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 feae 	bl	8002a74 <HAL_Delay>

    status = HAL_I2C_Master_Transmit(i2c_handle, MS5837_ADDRESS_SHIFT, &adc_read, sizeof(uint8_t), HAL_MAX_DELAY);
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <MS5837Read+0x1ec>)
 8001d1a:	6818      	ldr	r0, [r3, #0]
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	2301      	movs	r3, #1
 8001d24:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <MS5837Read+0x1f8>)
 8001d26:	21ec      	movs	r1, #236	; 0xec
 8001d28:	f002 feec 	bl	8004b04 <HAL_I2C_Master_Transmit>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
    if (status != HAL_OK)
 8001d32:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <MS5837Read+0x1c0>
    {
        return (MS5837_ERROR_READ_ADC);
 8001d3a:	f06f 030a 	mvn.w	r3, #10
 8001d3e:	e356      	b.n	80023ee <MS5837Read+0x86e>
    }

    status = HAL_I2C_Master_Receive(i2c_handle, MS5837_ADDRESS_SHIFT, (uint8_t*) &D_value, sizeof(uint32_t), HAL_MAX_DELAY);
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <MS5837Read+0x1ec>)
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2304      	movs	r3, #4
 8001d50:	21ec      	movs	r1, #236	; 0xec
 8001d52:	f002 ffcb 	bl	8004cec <HAL_I2C_Master_Receive>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
    if (status != HAL_OK)
 8001d5c:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00d      	beq.n	8001d80 <MS5837Read+0x200>
    {
        return (MS5837_ERROR_RECIEVE_READ_D2);
 8001d64:	f06f 0309 	mvn.w	r3, #9
 8001d68:	e341      	b.n	80023ee <MS5837Read+0x86e>
 8001d6a:	bf00      	nop
 8001d6c:	20000260 	.word	0x20000260
 8001d70:	2000001c 	.word	0x2000001c
 8001d74:	20000020 	.word	0x20000020
 8001d78:	20000264 	.word	0x20000264
 8001d7c:	2000001d 	.word	0x2000001d
    }

    D2 = swap_24(D_value);
 8001d80:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fe4c 	bl	8001a22 <swap_24>
 8001d8a:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194

//    // Calculate temperature
    dT = (int32_t)D2 - ((int32_t)MS5837_Prom[MS5837_C5] << 8);
 8001d8e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d92:	4bdb      	ldr	r3, [pc, #876]	; (8002100 <MS5837Read+0x580>)
 8001d94:	895b      	ldrh	r3, [r3, #10]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	17da      	asrs	r2, r3, #31
 8001d9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d9e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001da0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001da4:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
    TEMP = 2000 + ((int64_t)dT * (int64_t)MS5837_Prom[MS5837_C6] >> 23);
 8001da8:	4bd5      	ldr	r3, [pc, #852]	; (8002100 <MS5837Read+0x580>)
 8001daa:	899b      	ldrh	r3, [r3, #12]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2200      	movs	r2, #0
 8001db0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001db4:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8001db8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001dbc:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	fb02 f203 	mul.w	r2, r2, r3
 8001dc6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001dca:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
 8001dce:	4601      	mov	r1, r0
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	441a      	add	r2, r3
 8001dd6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001dda:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8001dde:	fba3 4501 	umull	r4, r5, r3, r1
 8001de2:	1953      	adds	r3, r2, r5
 8001de4:	461d      	mov	r5, r3
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	0de2      	lsrs	r2, r4, #23
 8001df0:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 8001df4:	15eb      	asrs	r3, r5, #23
 8001df6:	4613      	mov	r3, r2
 8001df8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001dfc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

    OFF = (MS5837_Prom[MS5837_C2] << 16) + ((MS5837_Prom[MS5837_C4] * dT) >> 7);
 8001e00:	4bbf      	ldr	r3, [pc, #764]	; (8002100 <MS5837Read+0x580>)
 8001e02:	889b      	ldrh	r3, [r3, #4]
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	17da      	asrs	r2, r3, #31
 8001e08:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001e0c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8001e10:	4bbb      	ldr	r3, [pc, #748]	; (8002100 <MS5837Read+0x580>)
 8001e12:	891b      	ldrh	r3, [r3, #8]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	2200      	movs	r2, #0
 8001e18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001e1c:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8001e20:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e24:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8001e28:	462a      	mov	r2, r5
 8001e2a:	fb02 f203 	mul.w	r2, r2, r3
 8001e2e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001e32:	4621      	mov	r1, r4
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	441a      	add	r2, r3
 8001e3a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e3e:	4621      	mov	r1, r4
 8001e40:	fba3 8901 	umull	r8, r9, r3, r1
 8001e44:	eb02 0309 	add.w	r3, r2, r9
 8001e48:	4699      	mov	r9, r3
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 8001e56:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
 8001e5a:	ea4f 13e9 	mov.w	r3, r9, asr #7
 8001e5e:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 8001e62:	4621      	mov	r1, r4
 8001e64:	1889      	adds	r1, r1, r2
 8001e66:	6439      	str	r1, [r7, #64]	; 0x40
 8001e68:	4629      	mov	r1, r5
 8001e6a:	eb43 0101 	adc.w	r1, r3, r1
 8001e6e:	6479      	str	r1, [r7, #68]	; 0x44
 8001e70:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001e74:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
    SENS = ((int64_t)MS5837_Prom[MS5837_C1] << 15) + ((int64_t)(MS5837_Prom[MS5837_C3] * dT) >> 8);
 8001e78:	4ba1      	ldr	r3, [pc, #644]	; (8002100 <MS5837Read+0x580>)
 8001e7a:	885b      	ldrh	r3, [r3, #2]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e84:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8001e88:	f04f 0000 	mov.w	r0, #0
 8001e8c:	f04f 0100 	mov.w	r1, #0
 8001e90:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8001e94:	462b      	mov	r3, r5
 8001e96:	03d9      	lsls	r1, r3, #15
 8001e98:	4623      	mov	r3, r4
 8001e9a:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 8001e9e:	4623      	mov	r3, r4
 8001ea0:	03d8      	lsls	r0, r3, #15
 8001ea2:	4b97      	ldr	r3, [pc, #604]	; (8002100 <MS5837Read+0x580>)
 8001ea4:	88db      	ldrh	r3, [r3, #6]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001eae:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001eb2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001eb6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8001eba:	464a      	mov	r2, r9
 8001ebc:	fb02 f203 	mul.w	r2, r2, r3
 8001ec0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ec4:	4644      	mov	r4, r8
 8001ec6:	fb04 f303 	mul.w	r3, r4, r3
 8001eca:	441a      	add	r2, r3
 8001ecc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ed0:	4644      	mov	r4, r8
 8001ed2:	fba3 ab04 	umull	sl, fp, r3, r4
 8001ed6:	eb02 030b 	add.w	r3, r2, fp
 8001eda:	469b      	mov	fp, r3
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8001ee8:	ea42 620b 	orr.w	r2, r2, fp, lsl #24
 8001eec:	ea4f 232b 	mov.w	r3, fp, asr #8
 8001ef0:	1884      	adds	r4, r0, r2
 8001ef2:	63bc      	str	r4, [r7, #56]	; 0x38
 8001ef4:	eb41 0303 	adc.w	r3, r1, r3
 8001ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001efa:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001efe:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
    P = ((D1 * SENS >> 21) - OFF) >> 13;
 8001f02:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001f06:	2200      	movs	r2, #0
 8001f08:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001f0c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8001f10:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001f14:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8001f18:	462a      	mov	r2, r5
 8001f1a:	fb02 f203 	mul.w	r2, r2, r3
 8001f1e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001f22:	4621      	mov	r1, r4
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	441a      	add	r2, r3
 8001f2a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001f2e:	4621      	mov	r1, r4
 8001f30:	fba3 1301 	umull	r1, r3, r3, r1
 8001f34:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f38:	460b      	mov	r3, r1
 8001f3a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001f3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f42:	18d3      	adds	r3, r2, r3
 8001f44:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f48:	f04f 0000 	mov.w	r0, #0
 8001f4c:	f04f 0100 	mov.w	r1, #0
 8001f50:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 8001f54:	4623      	mov	r3, r4
 8001f56:	0d58      	lsrs	r0, r3, #21
 8001f58:	462b      	mov	r3, r5
 8001f5a:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8001f5e:	462b      	mov	r3, r5
 8001f60:	1559      	asrs	r1, r3, #21
 8001f62:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001f66:	1a84      	subs	r4, r0, r2
 8001f68:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 8001f6c:	eb61 0303 	sbc.w	r3, r1, r3
 8001f70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8001f80:	4621      	mov	r1, r4
 8001f82:	0b4a      	lsrs	r2, r1, #13
 8001f84:	4629      	mov	r1, r5
 8001f86:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001f8a:	4629      	mov	r1, r5
 8001f8c:	134b      	asrs	r3, r1, #13
 8001f8e:	4613      	mov	r3, r2
 8001f90:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

    // Do 2nd order temperature compensation (see pg 12 of MS5837 data sheet)
    if (TEMP < 2000)
 8001f94:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001f98:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f9c:	f280 8153 	bge.w	8002246 <MS5837Read+0x6c6>
    {
        // Low temperature
        Ti = 3 * (dT^2) >> 33;
 8001fa0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001fa4:	f082 0102 	eor.w	r1, r2, #2
 8001fa8:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8001fac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001fb0:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001fb4:	4622      	mov	r2, r4
 8001fb6:	462b      	mov	r3, r5
 8001fb8:	1891      	adds	r1, r2, r2
 8001fba:	6339      	str	r1, [r7, #48]	; 0x30
 8001fbc:	415b      	adcs	r3, r3
 8001fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	1851      	adds	r1, r2, r1
 8001fc8:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8001fcc:	4629      	mov	r1, r5
 8001fce:	eb43 0101 	adc.w	r1, r3, r1
 8001fd2:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001fe2:	4629      	mov	r1, r5
 8001fe4:	104a      	asrs	r2, r1, #1
 8001fe6:	4629      	mov	r1, r5
 8001fe8:	17cb      	asrs	r3, r1, #31
 8001fea:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
        OFFi = 3 * (((int64_t)TEMP - 2000) ^ 2) >> 1;
 8001fee:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001ff2:	17da      	asrs	r2, r3, #31
 8001ff4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001ff8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001ffc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002000:	460b      	mov	r3, r1
 8002002:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8002006:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800200a:	4613      	mov	r3, r2
 800200c:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8002010:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002014:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002018:	460b      	mov	r3, r1
 800201a:	f083 0302 	eor.w	r3, r3, #2
 800201e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002022:	4613      	mov	r3, r2
 8002024:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002028:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800202c:	4622      	mov	r2, r4
 800202e:	462b      	mov	r3, r5
 8002030:	1891      	adds	r1, r2, r2
 8002032:	62b9      	str	r1, [r7, #40]	; 0x28
 8002034:	415b      	adcs	r3, r3
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002038:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800203c:	4621      	mov	r1, r4
 800203e:	1851      	adds	r1, r2, r1
 8002040:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8002044:	4629      	mov	r1, r5
 8002046:	eb43 0101 	adc.w	r1, r3, r1
 800204a:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	f04f 0300 	mov.w	r3, #0
 8002056:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800205a:	4621      	mov	r1, r4
 800205c:	084a      	lsrs	r2, r1, #1
 800205e:	4629      	mov	r1, r5
 8002060:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002064:	4629      	mov	r1, r5
 8002066:	104b      	asrs	r3, r1, #1
 8002068:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
        SENSi = 5 * (((int64_t)TEMP - 2000) ^ 2) >> 3;
 800206c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002070:	17da      	asrs	r2, r3, #31
 8002072:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002076:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800207a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800207e:	460b      	mov	r3, r1
 8002080:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8002084:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002088:	4613      	mov	r3, r2
 800208a:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 800208e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002092:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002096:	460b      	mov	r3, r1
 8002098:	f083 0302 	eor.w	r3, r3, #2
 800209c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020a0:	4613      	mov	r3, r2
 80020a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80020a6:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80020aa:	4622      	mov	r2, r4
 80020ac:	462b      	mov	r3, r5
 80020ae:	f04f 0000 	mov.w	r0, #0
 80020b2:	f04f 0100 	mov.w	r1, #0
 80020b6:	0099      	lsls	r1, r3, #2
 80020b8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80020bc:	0090      	lsls	r0, r2, #2
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4621      	mov	r1, r4
 80020c4:	1851      	adds	r1, r2, r1
 80020c6:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80020ca:	4629      	mov	r1, r5
 80020cc:	eb43 0101 	adc.w	r1, r3, r1
 80020d0:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80020e0:	4621      	mov	r1, r4
 80020e2:	08ca      	lsrs	r2, r1, #3
 80020e4:	4629      	mov	r1, r5
 80020e6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 80020ea:	4629      	mov	r1, r5
 80020ec:	10cb      	asrs	r3, r1, #3
 80020ee:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
        if (TEMP < -1500)
 80020f2:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80020f6:	4b03      	ldr	r3, [pc, #12]	; (8002104 <MS5837Read+0x584>)
 80020f8:	429a      	cmp	r2, r3
 80020fa:	f280 80e1 	bge.w	80022c0 <MS5837Read+0x740>
 80020fe:	e005      	b.n	800210c <MS5837Read+0x58c>
 8002100:	20000250 	.word	0x20000250
 8002104:	fffffa24 	.word	0xfffffa24
 8002108:	42c80000 	.word	0x42c80000
        {
            OFFi = (int64_t)OFFi + 7 * (((int64_t)TEMP + 1500) ^ 2);
 800210c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002110:	17da      	asrs	r2, r3, #31
 8002112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002116:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800211a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800211e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002122:	4602      	mov	r2, r0
 8002124:	18d3      	adds	r3, r2, r3
 8002126:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800212a:	460b      	mov	r3, r1
 800212c:	f143 0300 	adc.w	r3, r3, #0
 8002130:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002134:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002138:	460b      	mov	r3, r1
 800213a:	f083 0302 	eor.w	r3, r3, #2
 800213e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002142:	4613      	mov	r3, r2
 8002144:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002148:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800214c:	4622      	mov	r2, r4
 800214e:	462b      	mov	r3, r5
 8002150:	f04f 0000 	mov.w	r0, #0
 8002154:	f04f 0100 	mov.w	r1, #0
 8002158:	00d9      	lsls	r1, r3, #3
 800215a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800215e:	00d0      	lsls	r0, r2, #3
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4621      	mov	r1, r4
 8002166:	1a51      	subs	r1, r2, r1
 8002168:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800216c:	4629      	mov	r1, r5
 800216e:	eb63 0301 	sbc.w	r3, r3, r1
 8002172:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002176:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800217a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800217e:	4621      	mov	r1, r4
 8002180:	1851      	adds	r1, r2, r1
 8002182:	6239      	str	r1, [r7, #32]
 8002184:	4629      	mov	r1, r5
 8002186:	eb43 0101 	adc.w	r1, r3, r1
 800218a:	6279      	str	r1, [r7, #36]	; 0x24
 800218c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002190:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
            SENSi = (int64_t)SENSi + 4 * (((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500));
 8002194:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002198:	17da      	asrs	r2, r3, #31
 800219a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800219e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021a2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80021a6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80021aa:	4602      	mov	r2, r0
 80021ac:	18d3      	adds	r3, r2, r3
 80021ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021b2:	460b      	mov	r3, r1
 80021b4:	f143 0300 	adc.w	r3, r3, #0
 80021b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80021bc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80021c0:	17da      	asrs	r2, r3, #31
 80021c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021c6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80021ca:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80021ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80021d2:	4602      	mov	r2, r0
 80021d4:	18d3      	adds	r3, r2, r3
 80021d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80021d8:	460b      	mov	r3, r1
 80021da:	f143 0300 	adc.w	r3, r3, #0
 80021de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021e0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80021e4:	462b      	mov	r3, r5
 80021e6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80021ea:	4642      	mov	r2, r8
 80021ec:	fb02 f203 	mul.w	r2, r2, r3
 80021f0:	464b      	mov	r3, r9
 80021f2:	4621      	mov	r1, r4
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	4622      	mov	r2, r4
 80021fc:	4641      	mov	r1, r8
 80021fe:	fba2 1201 	umull	r1, r2, r2, r1
 8002202:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8002206:	460a      	mov	r2, r1
 8002208:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800220c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002210:	4413      	add	r3, r2
 8002212:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002216:	f04f 0000 	mov.w	r0, #0
 800221a:	f04f 0100 	mov.w	r1, #0
 800221e:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8002222:	462b      	mov	r3, r5
 8002224:	0099      	lsls	r1, r3, #2
 8002226:	4623      	mov	r3, r4
 8002228:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 800222c:	4623      	mov	r3, r4
 800222e:	0098      	lsls	r0, r3, #2
 8002230:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8002234:	1814      	adds	r4, r2, r0
 8002236:	61bc      	str	r4, [r7, #24]
 8002238:	414b      	adcs	r3, r1
 800223a:	61fb      	str	r3, [r7, #28]
 800223c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002240:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 8002244:	e03c      	b.n	80022c0 <MS5837Read+0x740>
        }
    }
    else
    {
        // High temperature
        Ti = 2 * (dT^2) >> 37;
 8002246:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800224a:	f082 0102 	eor.w	r1, r2, #2
 800224e:	6739      	str	r1, [r7, #112]	; 0x70
 8002250:	677b      	str	r3, [r7, #116]	; 0x74
 8002252:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002256:	460b      	mov	r3, r1
 8002258:	18db      	adds	r3, r3, r3
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	4613      	mov	r3, r2
 800225e:	eb42 0303 	adc.w	r3, r2, r3
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002268:	f04f 0000 	mov.w	r0, #0
 800226c:	f04f 0100 	mov.w	r1, #0
 8002270:	1158      	asrs	r0, r3, #5
 8002272:	17d9      	asrs	r1, r3, #31
 8002274:	e9c7 016c 	strd	r0, r1, [r7, #432]	; 0x1b0
        OFFi = 1 * (((int64_t)TEMP - 2000) ^ 2) >> 4;
 8002278:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800227c:	17da      	asrs	r2, r3, #31
 800227e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002280:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002282:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8002286:	460b      	mov	r3, r1
 8002288:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 800228c:	663b      	str	r3, [r7, #96]	; 0x60
 800228e:	4613      	mov	r3, r2
 8002290:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8002294:	667b      	str	r3, [r7, #100]	; 0x64
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80022a2:	4621      	mov	r1, r4
 80022a4:	090a      	lsrs	r2, r1, #4
 80022a6:	4629      	mov	r1, r5
 80022a8:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80022ac:	4629      	mov	r1, r5
 80022ae:	110b      	asrs	r3, r1, #4
 80022b0:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
        SENSi = 0;
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
    }

    OFFi = OFF - OFFi;
 80022c0:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80022c4:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 80022c8:	1a84      	subs	r4, r0, r2
 80022ca:	60bc      	str	r4, [r7, #8]
 80022cc:	eb61 0303 	sbc.w	r3, r1, r3
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80022d6:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
    SENSi = SENS - SENSi;
 80022da:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80022de:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 80022e2:	1a84      	subs	r4, r0, r2
 80022e4:	603c      	str	r4, [r7, #0]
 80022e6:	eb61 0303 	sbc.w	r3, r1, r3
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	e9d7 3400 	ldrd	r3, r4, [r7]
 80022f0:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
    result->temperature = ((float)TEMP - Ti) / 100;
 80022f4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80022f8:	ee07 3a90 	vmov	s15, r3
 80022fc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002300:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 8002304:	f7fe fbba 	bl	8000a7c <__aeabi_l2f>
 8002308:	ee07 0a90 	vmov	s15, r0
 800230c:	ee38 7a67 	vsub.f32	s14, s16, s15
 8002310:	ed5f 6a83 	vldr	s13, [pc, #-524]	; 8002108 <MS5837Read+0x588>
 8002314:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002318:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800231c:	edc3 7a01 	vstr	s15, [r3, #4]
    P2 =  ((( ((D1 * SENSi) >> 21) - OFFi) >> 13) / 10);
 8002320:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002324:	2200      	movs	r2, #0
 8002326:	65bb      	str	r3, [r7, #88]	; 0x58
 8002328:	65fa      	str	r2, [r7, #92]	; 0x5c
 800232a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800232e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002332:	462a      	mov	r2, r5
 8002334:	fb02 f203 	mul.w	r2, r2, r3
 8002338:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800233c:	4621      	mov	r1, r4
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8002348:	4621      	mov	r1, r4
 800234a:	fba2 1201 	umull	r1, r2, r2, r1
 800234e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002352:	460a      	mov	r2, r1
 8002354:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8002358:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800235c:	4413      	add	r3, r2
 800235e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 800236e:	4621      	mov	r1, r4
 8002370:	0d4a      	lsrs	r2, r1, #21
 8002372:	4629      	mov	r1, r5
 8002374:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8002378:	4629      	mov	r1, r5
 800237a:	154b      	asrs	r3, r1, #21
 800237c:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8002380:	1a14      	subs	r4, r2, r0
 8002382:	653c      	str	r4, [r7, #80]	; 0x50
 8002384:	eb63 0301 	sbc.w	r3, r3, r1
 8002388:	657b      	str	r3, [r7, #84]	; 0x54
 800238a:	f04f 0000 	mov.w	r0, #0
 800238e:	f04f 0100 	mov.w	r1, #0
 8002392:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002396:	4623      	mov	r3, r4
 8002398:	0b58      	lsrs	r0, r3, #13
 800239a:	462b      	mov	r3, r5
 800239c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80023a0:	462b      	mov	r3, r5
 80023a2:	1359      	asrs	r1, r3, #13
 80023a4:	f04f 020a 	mov.w	r2, #10
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	f7fe fba4 	bl	8000af8 <__aeabi_ldivmod>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4613      	mov	r3, r2
 80023b6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    result->pressure = (float)P2 * 0.0145038;
 80023ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80023be:	ee07 3a90 	vmov	s15, r3
 80023c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023c6:	ee17 0a90 	vmov	r0, s15
 80023ca:	f7fe f9df 	bl	800078c <__aeabi_f2d>
 80023ce:	a30c      	add	r3, pc, #48	; (adr r3, 8002400 <MS5837Read+0x880>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f7fd ff4c 	bl	8000270 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	f7fe fa2c 	bl	800083c <__aeabi_d2f>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80023ea:	601a      	str	r2, [r3, #0]

    return MS5837_SUCCESS;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	ecbd 8b02 	vpop	{d8}
 80023fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023fe:	bf00      	nop
 8002400:	1557801a 	.word	0x1557801a
 8002404:	3f8db42b 	.word	0x3f8db42b

08002408 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	4b0f      	ldr	r3, [pc, #60]	; (800244c <HAL_MspInit+0x44>)
 8002410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002412:	4a0e      	ldr	r2, [pc, #56]	; (800244c <HAL_MspInit+0x44>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6613      	str	r3, [r2, #96]	; 0x60
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <HAL_MspInit+0x44>)
 800241c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_MspInit+0x44>)
 8002428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242a:	4a08      	ldr	r2, [pc, #32]	; (800244c <HAL_MspInit+0x44>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002430:	6593      	str	r3, [r2, #88]	; 0x58
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_MspInit+0x44>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000

08002450 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b0ac      	sub	sp, #176	; 0xb0
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	2288      	movs	r2, #136	; 0x88
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f006 f871 	bl	8008558 <memset>
  if(hadc->Instance==ADC1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a27      	ldr	r2, [pc, #156]	; (8002518 <HAL_ADC_MspInit+0xc8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d146      	bne.n	800250e <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002480:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002484:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002486:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800248a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800248e:	2302      	movs	r3, #2
 8002490:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002492:	2301      	movs	r3, #1
 8002494:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002496:	2308      	movs	r3, #8
 8002498:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800249a:	2307      	movs	r3, #7
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800249e:	2302      	movs	r3, #2
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80024a2:	2302      	movs	r3, #2
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80024a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024aa:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	4618      	mov	r0, r3
 80024b2:	f003 ff55 	bl	8006360 <HAL_RCCEx_PeriphCLKConfig>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80024bc:	f7ff faac 	bl	8001a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <HAL_ADC_MspInit+0xcc>)
 80024c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c4:	4a15      	ldr	r2, [pc, #84]	; (800251c <HAL_ADC_MspInit+0xcc>)
 80024c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <HAL_ADC_MspInit+0xcc>)
 80024ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_ADC_MspInit+0xcc>)
 80024da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024dc:	4a0f      	ldr	r2, [pc, #60]	; (800251c <HAL_ADC_MspInit+0xcc>)
 80024de:	f043 0304 	orr.w	r3, r3, #4
 80024e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_ADC_MspInit+0xcc>)
 80024e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80024f0:	2338      	movs	r3, #56	; 0x38
 80024f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80024f6:	230b      	movs	r3, #11
 80024f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002502:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002506:	4619      	mov	r1, r3
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <HAL_ADC_MspInit+0xd0>)
 800250a:	f002 f8a9 	bl	8004660 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800250e:	bf00      	nop
 8002510:	37b0      	adds	r7, #176	; 0xb0
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	50040000 	.word	0x50040000
 800251c:	40021000 	.word	0x40021000
 8002520:	48000800 	.word	0x48000800

08002524 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a18      	ldr	r2, [pc, #96]	; (80025a4 <HAL_CAN_MspInit+0x80>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d129      	bne.n	800259a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002546:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <HAL_CAN_MspInit+0x84>)
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254a:	4a17      	ldr	r2, [pc, #92]	; (80025a8 <HAL_CAN_MspInit+0x84>)
 800254c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002550:	6593      	str	r3, [r2, #88]	; 0x58
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <HAL_CAN_MspInit+0x84>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_CAN_MspInit+0x84>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	4a11      	ldr	r2, [pc, #68]	; (80025a8 <HAL_CAN_MspInit+0x84>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800256a:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <HAL_CAN_MspInit+0x84>)
 800256c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002576:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800257a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002584:	2303      	movs	r3, #3
 8002586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002588:	2309      	movs	r3, #9
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	4619      	mov	r1, r3
 8002592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002596:	f002 f863 	bl	8004660 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800259a:	bf00      	nop
 800259c:	3728      	adds	r7, #40	; 0x28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40006400 	.word	0x40006400
 80025a8:	40021000 	.word	0x40021000

080025ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b0ac      	sub	sp, #176	; 0xb0
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	2288      	movs	r2, #136	; 0x88
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f005 ffc3 	bl	8008558 <memset>
  if(hi2c->Instance==I2C1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a21      	ldr	r2, [pc, #132]	; (800265c <HAL_I2C_MspInit+0xb0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d13b      	bne.n	8002654 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80025dc:	2340      	movs	r3, #64	; 0x40
 80025de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025e0:	2300      	movs	r3, #0
 80025e2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	4618      	mov	r0, r3
 80025ea:	f003 feb9 	bl	8006360 <HAL_RCCEx_PeriphCLKConfig>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80025f4:	f7ff fa10 	bl	8001a18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_I2C_MspInit+0xb4>)
 80025fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fc:	4a18      	ldr	r2, [pc, #96]	; (8002660 <HAL_I2C_MspInit+0xb4>)
 80025fe:	f043 0302 	orr.w	r3, r3, #2
 8002602:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002604:	4b16      	ldr	r3, [pc, #88]	; (8002660 <HAL_I2C_MspInit+0xb4>)
 8002606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002610:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002614:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002618:	2312      	movs	r3, #18
 800261a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800261e:	2301      	movs	r3, #1
 8002620:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002624:	2303      	movs	r3, #3
 8002626:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800262a:	2304      	movs	r3, #4
 800262c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002630:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002634:	4619      	mov	r1, r3
 8002636:	480b      	ldr	r0, [pc, #44]	; (8002664 <HAL_I2C_MspInit+0xb8>)
 8002638:	f002 f812 	bl	8004660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <HAL_I2C_MspInit+0xb4>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	4a07      	ldr	r2, [pc, #28]	; (8002660 <HAL_I2C_MspInit+0xb4>)
 8002642:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002646:	6593      	str	r3, [r2, #88]	; 0x58
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_I2C_MspInit+0xb4>)
 800264a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002654:	bf00      	nop
 8002656:	37b0      	adds	r7, #176	; 0xb0
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40005400 	.word	0x40005400
 8002660:	40021000 	.word	0x40021000
 8002664:	48000400 	.word	0x48000400

08002668 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	; 0x28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002688:	d131      	bne.n	80026ee <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800268a:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_TIM_IC_MspInit+0x90>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	4a1a      	ldr	r2, [pc, #104]	; (80026f8 <HAL_TIM_IC_MspInit+0x90>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6593      	str	r3, [r2, #88]	; 0x58
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <HAL_TIM_IC_MspInit+0x90>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_TIM_IC_MspInit+0x90>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a6:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <HAL_TIM_IC_MspInit+0x90>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <HAL_TIM_IC_MspInit+0x90>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026cc:	2301      	movs	r3, #1
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	4619      	mov	r1, r3
 80026d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026da:	f001 ffc1 	bl	8004660 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80026de:	2200      	movs	r2, #0
 80026e0:	2101      	movs	r1, #1
 80026e2:	201c      	movs	r0, #28
 80026e4:	f001 ff85 	bl	80045f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026e8:	201c      	movs	r0, #28
 80026ea:	f001 ff9e 	bl	800462a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80026ee:	bf00      	nop
 80026f0:	3728      	adds	r7, #40	; 0x28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000

080026fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271c:	d11c      	bne.n	8002758 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <HAL_TIM_MspPostInit+0x64>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002722:	4a0f      	ldr	r2, [pc, #60]	; (8002760 <HAL_TIM_MspPostInit+0x64>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <HAL_TIM_MspPostInit+0x64>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002736:	2304      	movs	r3, #4
 8002738:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273a:	2302      	movs	r3, #2
 800273c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002746:	2301      	movs	r3, #1
 8002748:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	f107 030c 	add.w	r3, r7, #12
 800274e:	4619      	mov	r1, r3
 8002750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002754:	f001 ff84 	bl	8004660 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002758:	bf00      	nop
 800275a:	3720      	adds	r7, #32
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000

08002764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002768:	e7fe      	b.n	8002768 <NMI_Handler+0x4>

0800276a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800276e:	e7fe      	b.n	800276e <HardFault_Handler+0x4>

08002770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002774:	e7fe      	b.n	8002774 <MemManage_Handler+0x4>

08002776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800277a:	e7fe      	b.n	800277a <BusFault_Handler+0x4>

0800277c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002780:	e7fe      	b.n	8002780 <UsageFault_Handler+0x4>

08002782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027b0:	f000 f940 	bl	8002a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <TIM2_IRQHandler+0x10>)
 80027be:	f004 fe05 	bl	80073cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000190 	.word	0x20000190

080027cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	e00a      	b.n	80027f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027de:	f3af 8000 	nop.w
 80027e2:	4601      	mov	r1, r0
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	60ba      	str	r2, [r7, #8]
 80027ea:	b2ca      	uxtb	r2, r1
 80027ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	3301      	adds	r3, #1
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	dbf0      	blt.n	80027de <_read+0x12>
	}

return len;
 80027fc:	687b      	ldr	r3, [r7, #4]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	e009      	b.n	800282c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	60ba      	str	r2, [r7, #8]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	3301      	adds	r3, #1
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	dbf1      	blt.n	8002818 <_write+0x12>
	}
	return len;
 8002834:	687b      	ldr	r3, [r7, #4]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <_close>:

int _close(int file)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
	return -1;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002866:	605a      	str	r2, [r3, #4]
	return 0;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <_isatty>:

int _isatty(int file)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
	return 1;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
	return 0;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b0:	4a14      	ldr	r2, [pc, #80]	; (8002904 <_sbrk+0x5c>)
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <_sbrk+0x60>)
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028bc:	4b13      	ldr	r3, [pc, #76]	; (800290c <_sbrk+0x64>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <_sbrk+0x64>)
 80028c6:	4a12      	ldr	r2, [pc, #72]	; (8002910 <_sbrk+0x68>)
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <_sbrk+0x64>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d207      	bcs.n	80028e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d8:	f005 fe14 	bl	8008504 <__errno>
 80028dc:	4603      	mov	r3, r0
 80028de:	220c      	movs	r2, #12
 80028e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028e6:	e009      	b.n	80028fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <_sbrk+0x64>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <_sbrk+0x64>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <_sbrk+0x64>)
 80028f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028fa:	68fb      	ldr	r3, [r7, #12]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20018000 	.word	0x20018000
 8002908:	00000400 	.word	0x00000400
 800290c:	20000268 	.word	0x20000268
 8002910:	20000280 	.word	0x20000280

08002914 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <SystemInit+0x20>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291e:	4a05      	ldr	r2, [pc, #20]	; (8002934 <SystemInit+0x20>)
 8002920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002970 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800293c:	f7ff ffea 	bl	8002914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002940:	480c      	ldr	r0, [pc, #48]	; (8002974 <LoopForever+0x6>)
  ldr r1, =_edata
 8002942:	490d      	ldr	r1, [pc, #52]	; (8002978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002944:	4a0d      	ldr	r2, [pc, #52]	; (800297c <LoopForever+0xe>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002948:	e002      	b.n	8002950 <LoopCopyDataInit>

0800294a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800294a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800294c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800294e:	3304      	adds	r3, #4

08002950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002954:	d3f9      	bcc.n	800294a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002956:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002958:	4c0a      	ldr	r4, [pc, #40]	; (8002984 <LoopForever+0x16>)
  movs r3, #0
 800295a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800295c:	e001      	b.n	8002962 <LoopFillZerobss>

0800295e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800295e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002960:	3204      	adds	r2, #4

08002962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002964:	d3fb      	bcc.n	800295e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002966:	f005 fdd3 	bl	8008510 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800296a:	f7fe fbad 	bl	80010c8 <main>

0800296e <LoopForever>:

LoopForever:
    b LoopForever
 800296e:	e7fe      	b.n	800296e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002970:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002978:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800297c:	08009594 	.word	0x08009594
  ldr r2, =_sbss
 8002980:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002984:	20000280 	.word	0x20000280

08002988 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002988:	e7fe      	b.n	8002988 <ADC1_2_IRQHandler>

0800298a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002994:	2003      	movs	r0, #3
 8002996:	f001 fe21 	bl	80045dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800299a:	200f      	movs	r0, #15
 800299c:	f000 f80e 	bl	80029bc <HAL_InitTick>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	71fb      	strb	r3, [r7, #7]
 80029aa:	e001      	b.n	80029b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029ac:	f7ff fd2c 	bl	8002408 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029b0:	79fb      	ldrb	r3, [r7, #7]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029c8:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <HAL_InitTick+0x6c>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d023      	beq.n	8002a18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029d0:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_InitTick+0x70>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <HAL_InitTick+0x6c>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	4619      	mov	r1, r3
 80029da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029de:	fbb3 f3f1 	udiv	r3, r3, r1
 80029e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e6:	4618      	mov	r0, r3
 80029e8:	f001 fe2d 	bl	8004646 <HAL_SYSTICK_Config>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10f      	bne.n	8002a12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b0f      	cmp	r3, #15
 80029f6:	d809      	bhi.n	8002a0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f8:	2200      	movs	r2, #0
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a00:	f001 fdf7 	bl	80045f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a04:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <HAL_InitTick+0x74>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e007      	b.n	8002a1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
 8002a10:	e004      	b.n	8002a1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	e001      	b.n	8002a1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	2000002c 	.word	0x2000002c
 8002a2c:	20000024 	.word	0x20000024
 8002a30:	20000028 	.word	0x20000028

08002a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_IncTick+0x20>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_IncTick+0x24>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4413      	add	r3, r2
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_IncTick+0x24>)
 8002a46:	6013      	str	r3, [r2, #0]
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	2000002c 	.word	0x2000002c
 8002a58:	2000026c 	.word	0x2000026c

08002a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <HAL_GetTick+0x14>)
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	2000026c 	.word	0x2000026c

08002a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7ff ffee 	bl	8002a5c <HAL_GetTick>
 8002a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a8c:	d005      	beq.n	8002a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_Delay+0x44>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a9a:	bf00      	nop
 8002a9c:	f7ff ffde 	bl	8002a5c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d8f7      	bhi.n	8002a9c <HAL_Delay+0x28>
  {
  }
}
 8002aac:	bf00      	nop
 8002aae:	bf00      	nop
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	2000002c 	.word	0x2000002c

08002abc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	609a      	str	r2, [r3, #8]
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	3360      	adds	r3, #96	; 0x60
 8002b36:	461a      	mov	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <LL_ADC_SetOffset+0x44>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b5c:	bf00      	nop
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	03fff000 	.word	0x03fff000

08002b6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3360      	adds	r3, #96	; 0x60
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	3360      	adds	r3, #96	; 0x60
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002bc2:	bf00      	nop
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3330      	adds	r3, #48	; 0x30
 8002c04:	461a      	mov	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	4413      	add	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	211f      	movs	r1, #31
 8002c20:	fa01 f303 	lsl.w	r3, r1, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	401a      	ands	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	0e9b      	lsrs	r3, r3, #26
 8002c2c:	f003 011f 	and.w	r1, r3, #31
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	3314      	adds	r3, #20
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	0e5b      	lsrs	r3, r3, #25
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	4413      	add	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	0d1b      	lsrs	r3, r3, #20
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	2107      	movs	r1, #7
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	401a      	ands	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	0d1b      	lsrs	r3, r3, #20
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	431a      	orrs	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f003 0318 	and.w	r3, r3, #24
 8002cc6:	4908      	ldr	r1, [pc, #32]	; (8002ce8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cc8:	40d9      	lsrs	r1, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	400b      	ands	r3, r1
 8002cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	0007ffff 	.word	0x0007ffff

08002cec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 031f 	and.w	r3, r3, #31
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002d34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6093      	str	r3, [r2, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d5c:	d101      	bne.n	8002d62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dac:	d101      	bne.n	8002db2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dd4:	f043 0201 	orr.w	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002df8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dfc:	f043 0202 	orr.w	r2, r3, #2
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <LL_ADC_IsEnabled+0x18>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <LL_ADC_IsEnabled+0x1a>
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d101      	bne.n	8002e4e <LL_ADC_IsDisableOngoing+0x18>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <LL_ADC_IsDisableOngoing+0x1a>
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e70:	f043 0204 	orr.w	r2, r3, #4
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e98:	f043 0210 	orr.w	r2, r3, #16
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d101      	bne.n	8002ec4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e000      	b.n	8002ec6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ee2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ee6:	f043 0220 	orr.w	r2, r3, #32
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d101      	bne.n	8002f12 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f20:	b590      	push	{r4, r7, lr}
 8002f22:	b089      	sub	sp, #36	; 0x24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e136      	b.n	80031a8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d109      	bne.n	8002f5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff fa81 	bl	8002450 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fef1 	bl	8002d48 <LL_ADC_IsDeepPowerDownEnabled>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d004      	beq.n	8002f76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fed7 	bl	8002d24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff ff0c 	bl	8002d98 <LL_ADC_IsInternalRegulatorEnabled>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d115      	bne.n	8002fb2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fef0 	bl	8002d70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f90:	4b87      	ldr	r3, [pc, #540]	; (80031b0 <HAL_ADC_Init+0x290>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	099b      	lsrs	r3, r3, #6
 8002f96:	4a87      	ldr	r2, [pc, #540]	; (80031b4 <HAL_ADC_Init+0x294>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	099b      	lsrs	r3, r3, #6
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fa4:	e002      	b.n	8002fac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f9      	bne.n	8002fa6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff feee 	bl	8002d98 <LL_ADC_IsInternalRegulatorEnabled>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10d      	bne.n	8002fde <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc6:	f043 0210 	orr.w	r2, r3, #16
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	f043 0201 	orr.w	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff ff62 	bl	8002eac <LL_ADC_REG_IsConversionOngoing>
 8002fe8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f040 80cf 	bne.w	8003196 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f040 80cb 	bne.w	8003196 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003004:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003008:	f043 0202 	orr.w	r2, r3, #2
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fefb 	bl	8002e10 <LL_ADC_IsEnabled>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d115      	bne.n	800304c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003020:	4865      	ldr	r0, [pc, #404]	; (80031b8 <HAL_ADC_Init+0x298>)
 8003022:	f7ff fef5 	bl	8002e10 <LL_ADC_IsEnabled>
 8003026:	4604      	mov	r4, r0
 8003028:	4864      	ldr	r0, [pc, #400]	; (80031bc <HAL_ADC_Init+0x29c>)
 800302a:	f7ff fef1 	bl	8002e10 <LL_ADC_IsEnabled>
 800302e:	4603      	mov	r3, r0
 8003030:	431c      	orrs	r4, r3
 8003032:	4863      	ldr	r0, [pc, #396]	; (80031c0 <HAL_ADC_Init+0x2a0>)
 8003034:	f7ff feec 	bl	8002e10 <LL_ADC_IsEnabled>
 8003038:	4603      	mov	r3, r0
 800303a:	4323      	orrs	r3, r4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d105      	bne.n	800304c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4619      	mov	r1, r3
 8003046:	485f      	ldr	r0, [pc, #380]	; (80031c4 <HAL_ADC_Init+0x2a4>)
 8003048:	f7ff fd38 	bl	8002abc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	7e5b      	ldrb	r3, [r3, #25]
 8003050:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003056:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800305c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003062:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800306a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d106      	bne.n	8003088 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	3b01      	subs	r3, #1
 8003080:	045b      	lsls	r3, r3, #17
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	2b00      	cmp	r3, #0
 800308e:	d009      	beq.n	80030a4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	4b47      	ldr	r3, [pc, #284]	; (80031c8 <HAL_ADC_Init+0x2a8>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	69b9      	ldr	r1, [r7, #24]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fef5 	bl	8002eac <LL_ADC_REG_IsConversionOngoing>
 80030c2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff ff16 	bl	8002efa <LL_ADC_INJ_IsConversionOngoing>
 80030ce:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d13d      	bne.n	8003152 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d13a      	bne.n	8003152 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80030e0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030e8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030f8:	f023 0302 	bic.w	r3, r3, #2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	69b9      	ldr	r1, [r7, #24]
 8003102:	430b      	orrs	r3, r1
 8003104:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800310c:	2b01      	cmp	r3, #1
 800310e:	d118      	bne.n	8003142 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800311a:	f023 0304 	bic.w	r3, r3, #4
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003126:	4311      	orrs	r1, r2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800312c:	4311      	orrs	r1, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003132:	430a      	orrs	r2, r1
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	611a      	str	r2, [r3, #16]
 8003140:	e007      	b.n	8003152 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0201 	bic.w	r2, r2, #1
 8003150:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d10c      	bne.n	8003174 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	f023 010f 	bic.w	r1, r3, #15
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	1e5a      	subs	r2, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
 8003172:	e007      	b.n	8003184 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 020f 	bic.w	r2, r2, #15
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003188:	f023 0303 	bic.w	r3, r3, #3
 800318c:	f043 0201 	orr.w	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	655a      	str	r2, [r3, #84]	; 0x54
 8003194:	e007      	b.n	80031a6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	f043 0210 	orr.w	r2, r3, #16
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3724      	adds	r7, #36	; 0x24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd90      	pop	{r4, r7, pc}
 80031b0:	20000024 	.word	0x20000024
 80031b4:	053e2d63 	.word	0x053e2d63
 80031b8:	50040000 	.word	0x50040000
 80031bc:	50040100 	.word	0x50040100
 80031c0:	50040200 	.word	0x50040200
 80031c4:	50040300 	.word	0x50040300
 80031c8:	fff0c007 	.word	0xfff0c007

080031cc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031d4:	4857      	ldr	r0, [pc, #348]	; (8003334 <HAL_ADC_Start+0x168>)
 80031d6:	f7ff fd89 	bl	8002cec <LL_ADC_GetMultimode>
 80031da:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fe63 	bl	8002eac <LL_ADC_REG_IsConversionOngoing>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f040 809c 	bne.w	8003326 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_Start+0x30>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e097      	b.n	800332c <HAL_ADC_Start+0x160>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 fe61 	bl	8003ecc <ADC_Enable>
 800320a:	4603      	mov	r3, r0
 800320c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800320e:	7dfb      	ldrb	r3, [r7, #23]
 8003210:	2b00      	cmp	r3, #0
 8003212:	f040 8083 	bne.w	800331c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a42      	ldr	r2, [pc, #264]	; (8003338 <HAL_ADC_Start+0x16c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d002      	beq.n	800323a <HAL_ADC_Start+0x6e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	e000      	b.n	800323c <HAL_ADC_Start+0x70>
 800323a:	4b40      	ldr	r3, [pc, #256]	; (800333c <HAL_ADC_Start+0x170>)
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	4293      	cmp	r3, r2
 8003242:	d002      	beq.n	800324a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d105      	bne.n	8003256 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800325e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003262:	d106      	bne.n	8003272 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	f023 0206 	bic.w	r2, r3, #6
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	659a      	str	r2, [r3, #88]	; 0x58
 8003270:	e002      	b.n	8003278 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	221c      	movs	r2, #28
 800327e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a2a      	ldr	r2, [pc, #168]	; (8003338 <HAL_ADC_Start+0x16c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d002      	beq.n	8003298 <HAL_ADC_Start+0xcc>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	e000      	b.n	800329a <HAL_ADC_Start+0xce>
 8003298:	4b28      	ldr	r3, [pc, #160]	; (800333c <HAL_ADC_Start+0x170>)
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	4293      	cmp	r3, r2
 80032a0:	d008      	beq.n	80032b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b05      	cmp	r3, #5
 80032ac:	d002      	beq.n	80032b4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b09      	cmp	r3, #9
 80032b2:	d114      	bne.n	80032de <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fdc0 	bl	8002e5c <LL_ADC_REG_StartConversion>
 80032dc:	e025      	b.n	800332a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a12      	ldr	r2, [pc, #72]	; (8003338 <HAL_ADC_Start+0x16c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d002      	beq.n	80032fa <HAL_ADC_Start+0x12e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	e000      	b.n	80032fc <HAL_ADC_Start+0x130>
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_ADC_Start+0x170>)
 80032fc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00f      	beq.n	800332a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003312:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
 800331a:	e006      	b.n	800332a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003324:	e001      	b.n	800332a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003326:	2302      	movs	r3, #2
 8003328:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800332a:	7dfb      	ldrb	r3, [r7, #23]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	50040300 	.word	0x50040300
 8003338:	50040100 	.word	0x50040100
 800333c:	50040000 	.word	0x50040000

08003340 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_ADC_Stop+0x16>
 8003352:	2302      	movs	r3, #2
 8003354:	e023      	b.n	800339e <HAL_ADC_Stop+0x5e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800335e:	2103      	movs	r1, #3
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fcf7 	bl	8003d54 <ADC_ConversionStop>
 8003366:	4603      	mov	r3, r0
 8003368:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d111      	bne.n	8003394 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fe31 	bl	8003fd8 <ADC_Disable>
 8003376:	4603      	mov	r3, r0
 8003378:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d109      	bne.n	8003394 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003384:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003388:	f023 0301 	bic.w	r3, r3, #1
 800338c:	f043 0201 	orr.w	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800339c:	7bfb      	ldrb	r3, [r7, #15]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033b2:	4866      	ldr	r0, [pc, #408]	; (800354c <HAL_ADC_PollForConversion+0x1a4>)
 80033b4:	f7ff fc9a 	bl	8002cec <LL_ADC_GetMultimode>
 80033b8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d102      	bne.n	80033c8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80033c2:	2308      	movs	r3, #8
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	e02a      	b.n	800341e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b05      	cmp	r3, #5
 80033d2:	d002      	beq.n	80033da <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2b09      	cmp	r3, #9
 80033d8:	d111      	bne.n	80033fe <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d007      	beq.n	80033f8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ec:	f043 0220 	orr.w	r2, r3, #32
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0a4      	b.n	8003542 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80033f8:	2304      	movs	r3, #4
 80033fa:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80033fc:	e00f      	b.n	800341e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80033fe:	4853      	ldr	r0, [pc, #332]	; (800354c <HAL_ADC_PollForConversion+0x1a4>)
 8003400:	f7ff fc82 	bl	8002d08 <LL_ADC_GetMultiDMATransfer>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e093      	b.n	8003542 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800341a:	2304      	movs	r3, #4
 800341c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800341e:	f7ff fb1d 	bl	8002a5c <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003424:	e021      	b.n	800346a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800342c:	d01d      	beq.n	800346a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800342e:	f7ff fb15 	bl	8002a5c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d302      	bcc.n	8003444 <HAL_ADC_PollForConversion+0x9c>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d112      	bne.n	800346a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4013      	ands	r3, r2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	f043 0204 	orr.w	r2, r3, #4
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e06b      	b.n	8003542 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0d6      	beq.n	8003426 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff fba0 	bl	8002bce <LL_ADC_REG_IsTriggerSourceSWStart>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01c      	beq.n	80034ce <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	7e5b      	ldrb	r3, [r3, #25]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d118      	bne.n	80034ce <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d111      	bne.n	80034ce <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d105      	bne.n	80034ce <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c6:	f043 0201 	orr.w	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1f      	ldr	r2, [pc, #124]	; (8003550 <HAL_ADC_PollForConversion+0x1a8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d002      	beq.n	80034de <HAL_ADC_PollForConversion+0x136>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	e000      	b.n	80034e0 <HAL_ADC_PollForConversion+0x138>
 80034de:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <HAL_ADC_PollForConversion+0x1ac>)
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d008      	beq.n	80034fa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d002      	beq.n	80034fa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2b09      	cmp	r3, #9
 80034f8:	d104      	bne.n	8003504 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	e00c      	b.n	800351e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a11      	ldr	r2, [pc, #68]	; (8003550 <HAL_ADC_PollForConversion+0x1a8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d002      	beq.n	8003514 <HAL_ADC_PollForConversion+0x16c>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	e000      	b.n	8003516 <HAL_ADC_PollForConversion+0x16e>
 8003514:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <HAL_ADC_PollForConversion+0x1ac>)
 8003516:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	2b08      	cmp	r3, #8
 8003522:	d104      	bne.n	800352e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2208      	movs	r2, #8
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e008      	b.n	8003540 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d103      	bne.n	8003540 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	220c      	movs	r2, #12
 800353e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	50040300 	.word	0x50040300
 8003550:	50040100 	.word	0x50040100
 8003554:	50040000 	.word	0x50040000

08003558 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b0b6      	sub	sp, #216	; 0xd8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x22>
 8003592:	2302      	movs	r3, #2
 8003594:	e3c7      	b.n	8003d26 <HAL_ADC_ConfigChannel+0x7b2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fc82 	bl	8002eac <LL_ADC_REG_IsConversionOngoing>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f040 83a8 	bne.w	8003d00 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b05      	cmp	r3, #5
 80035b6:	d824      	bhi.n	8003602 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	3b02      	subs	r3, #2
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d81b      	bhi.n	80035fa <HAL_ADC_ConfigChannel+0x86>
 80035c2:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <HAL_ADC_ConfigChannel+0x54>)
 80035c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c8:	080035d9 	.word	0x080035d9
 80035cc:	080035e1 	.word	0x080035e1
 80035d0:	080035e9 	.word	0x080035e9
 80035d4:	080035f1 	.word	0x080035f1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	220c      	movs	r2, #12
 80035dc:	605a      	str	r2, [r3, #4]
          break;
 80035de:	e011      	b.n	8003604 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2212      	movs	r2, #18
 80035e4:	605a      	str	r2, [r3, #4]
          break;
 80035e6:	e00d      	b.n	8003604 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2218      	movs	r2, #24
 80035ec:	605a      	str	r2, [r3, #4]
          break;
 80035ee:	e009      	b.n	8003604 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035f6:	605a      	str	r2, [r3, #4]
          break;
 80035f8:	e004      	b.n	8003604 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2206      	movs	r2, #6
 80035fe:	605a      	str	r2, [r3, #4]
          break;
 8003600:	e000      	b.n	8003604 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003602:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	6859      	ldr	r1, [r3, #4]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	f7ff faef 	bl	8002bf4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff fc46 	bl	8002eac <LL_ADC_REG_IsConversionOngoing>
 8003620:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fc66 	bl	8002efa <LL_ADC_INJ_IsConversionOngoing>
 800362e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003632:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003636:	2b00      	cmp	r3, #0
 8003638:	f040 81a6 	bne.w	8003988 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800363c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003640:	2b00      	cmp	r3, #0
 8003642:	f040 81a1 	bne.w	8003988 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6819      	ldr	r1, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	461a      	mov	r2, r3
 8003654:	f7ff fafa 	bl	8002c4c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	08db      	lsrs	r3, r3, #3
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b04      	cmp	r3, #4
 8003678:	d00a      	beq.n	8003690 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6919      	ldr	r1, [r3, #16]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800368a:	f7ff fa4b 	bl	8002b24 <LL_ADC_SetOffset>
 800368e:	e17b      	b.n	8003988 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2100      	movs	r1, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fa68 	bl	8002b6c <LL_ADC_GetOffsetChannel>
 800369c:	4603      	mov	r3, r0
 800369e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10a      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x148>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fa5d 	bl	8002b6c <LL_ADC_GetOffsetChannel>
 80036b2:	4603      	mov	r3, r0
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	f003 021f 	and.w	r2, r3, #31
 80036ba:	e01e      	b.n	80036fa <HAL_ADC_ConfigChannel+0x186>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fa52 	bl	8002b6c <LL_ADC_GetOffsetChannel>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80036de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80036ea:	2320      	movs	r3, #32
 80036ec:	e004      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80036ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036f2:	fab3 f383 	clz	r3, r3
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003702:	2b00      	cmp	r3, #0
 8003704:	d105      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x19e>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	0e9b      	lsrs	r3, r3, #26
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	e018      	b.n	8003744 <HAL_ADC_ConfigChannel+0x1d0>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800372a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800372e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003736:	2320      	movs	r3, #32
 8003738:	e004      	b.n	8003744 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800373a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800373e:	fab3 f383 	clz	r3, r3
 8003742:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003744:	429a      	cmp	r2, r3
 8003746:	d106      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2200      	movs	r2, #0
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fa21 	bl	8002b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2101      	movs	r1, #1
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fa05 	bl	8002b6c <LL_ADC_GetOffsetChannel>
 8003762:	4603      	mov	r3, r0
 8003764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x20e>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2101      	movs	r1, #1
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff f9fa 	bl	8002b6c <LL_ADC_GetOffsetChannel>
 8003778:	4603      	mov	r3, r0
 800377a:	0e9b      	lsrs	r3, r3, #26
 800377c:	f003 021f 	and.w	r2, r3, #31
 8003780:	e01e      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x24c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2101      	movs	r1, #1
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff f9ef 	bl	8002b6c <LL_ADC_GetOffsetChannel>
 800378e:	4603      	mov	r3, r0
 8003790:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80037a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80037a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80037b0:	2320      	movs	r3, #32
 80037b2:	e004      	b.n	80037be <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80037b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037b8:	fab3 f383 	clz	r3, r3
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x264>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	0e9b      	lsrs	r3, r3, #26
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	e018      	b.n	800380a <HAL_ADC_ConfigChannel+0x296>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80037ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80037f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80037f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80037fc:	2320      	movs	r3, #32
 80037fe:	e004      	b.n	800380a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003800:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003804:	fab3 f383 	clz	r3, r3
 8003808:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800380a:	429a      	cmp	r2, r3
 800380c:	d106      	bne.n	800381c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2200      	movs	r2, #0
 8003814:	2101      	movs	r1, #1
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff f9be 	bl	8002b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2102      	movs	r1, #2
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff f9a2 	bl	8002b6c <LL_ADC_GetOffsetChannel>
 8003828:	4603      	mov	r3, r0
 800382a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10a      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x2d4>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2102      	movs	r1, #2
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff f997 	bl	8002b6c <LL_ADC_GetOffsetChannel>
 800383e:	4603      	mov	r3, r0
 8003840:	0e9b      	lsrs	r3, r3, #26
 8003842:	f003 021f 	and.w	r2, r3, #31
 8003846:	e01e      	b.n	8003886 <HAL_ADC_ConfigChannel+0x312>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2102      	movs	r1, #2
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff f98c 	bl	8002b6c <LL_ADC_GetOffsetChannel>
 8003854:	4603      	mov	r3, r0
 8003856:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800385e:	fa93 f3a3 	rbit	r3, r3
 8003862:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003866:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800386a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800386e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003876:	2320      	movs	r3, #32
 8003878:	e004      	b.n	8003884 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800387a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800388e:	2b00      	cmp	r3, #0
 8003890:	d105      	bne.n	800389e <HAL_ADC_ConfigChannel+0x32a>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	0e9b      	lsrs	r3, r3, #26
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	e016      	b.n	80038cc <HAL_ADC_ConfigChannel+0x358>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038aa:	fa93 f3a3 	rbit	r3, r3
 80038ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80038b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80038b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80038be:	2320      	movs	r3, #32
 80038c0:	e004      	b.n	80038cc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80038c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038c6:	fab3 f383 	clz	r3, r3
 80038ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d106      	bne.n	80038de <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2200      	movs	r2, #0
 80038d6:	2102      	movs	r1, #2
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff f95d 	bl	8002b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2103      	movs	r1, #3
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff f941 	bl	8002b6c <LL_ADC_GetOffsetChannel>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10a      	bne.n	800390a <HAL_ADC_ConfigChannel+0x396>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2103      	movs	r1, #3
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff f936 	bl	8002b6c <LL_ADC_GetOffsetChannel>
 8003900:	4603      	mov	r3, r0
 8003902:	0e9b      	lsrs	r3, r3, #26
 8003904:	f003 021f 	and.w	r2, r3, #31
 8003908:	e017      	b.n	800393a <HAL_ADC_ConfigChannel+0x3c6>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2103      	movs	r1, #3
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff f92b 	bl	8002b6c <LL_ADC_GetOffsetChannel>
 8003916:	4603      	mov	r3, r0
 8003918:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003922:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003924:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800392c:	2320      	movs	r3, #32
 800392e:	e003      	b.n	8003938 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003942:	2b00      	cmp	r3, #0
 8003944:	d105      	bne.n	8003952 <HAL_ADC_ConfigChannel+0x3de>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	0e9b      	lsrs	r3, r3, #26
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	e011      	b.n	8003976 <HAL_ADC_ConfigChannel+0x402>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800395a:	fa93 f3a3 	rbit	r3, r3
 800395e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003962:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800396a:	2320      	movs	r3, #32
 800396c:	e003      	b.n	8003976 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800396e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003970:	fab3 f383 	clz	r3, r3
 8003974:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003976:	429a      	cmp	r2, r3
 8003978:	d106      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2200      	movs	r2, #0
 8003980:	2103      	movs	r1, #3
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff f908 	bl	8002b98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fa3f 	bl	8002e10 <LL_ADC_IsEnabled>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	f040 813f 	bne.w	8003c18 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6819      	ldr	r1, [r3, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	461a      	mov	r2, r3
 80039a8:	f7ff f97c 	bl	8002ca4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4a8e      	ldr	r2, [pc, #568]	; (8003bec <HAL_ADC_ConfigChannel+0x678>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	f040 8130 	bne.w	8003c18 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10b      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x46c>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	0e9b      	lsrs	r3, r3, #26
 80039ce:	3301      	adds	r3, #1
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	2b09      	cmp	r3, #9
 80039d6:	bf94      	ite	ls
 80039d8:	2301      	movls	r3, #1
 80039da:	2300      	movhi	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	e019      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x4a0>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80039ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80039f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80039f8:	2320      	movs	r3, #32
 80039fa:	e003      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80039fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	3301      	adds	r3, #1
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	2b09      	cmp	r3, #9
 8003a0c:	bf94      	ite	ls
 8003a0e:	2301      	movls	r3, #1
 8003a10:	2300      	movhi	r3, #0
 8003a12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d079      	beq.n	8003b0c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d107      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x4c0>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	0e9b      	lsrs	r3, r3, #26
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	069b      	lsls	r3, r3, #26
 8003a2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a32:	e015      	b.n	8003a60 <HAL_ADC_ConfigChannel+0x4ec>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a3c:	fa93 f3a3 	rbit	r3, r3
 8003a40:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a44:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003a4c:	2320      	movs	r3, #32
 8003a4e:	e003      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a52:	fab3 f383 	clz	r3, r3
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	3301      	adds	r3, #1
 8003a5a:	069b      	lsls	r3, r3, #26
 8003a5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d109      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x50c>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	0e9b      	lsrs	r3, r3, #26
 8003a72:	3301      	adds	r3, #1
 8003a74:	f003 031f 	and.w	r3, r3, #31
 8003a78:	2101      	movs	r1, #1
 8003a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7e:	e017      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x53c>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a88:	fa93 f3a3 	rbit	r3, r3
 8003a8c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003a98:	2320      	movs	r3, #32
 8003a9a:	e003      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a9e:	fab3 f383 	clz	r3, r3
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	f003 031f 	and.w	r3, r3, #31
 8003aaa:	2101      	movs	r1, #1
 8003aac:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab0:	ea42 0103 	orr.w	r1, r2, r3
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x562>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	0e9b      	lsrs	r3, r3, #26
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	f003 021f 	and.w	r2, r3, #31
 8003acc:	4613      	mov	r3, r2
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	4413      	add	r3, r2
 8003ad2:	051b      	lsls	r3, r3, #20
 8003ad4:	e018      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x594>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ade:	fa93 f3a3 	rbit	r3, r3
 8003ae2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003aee:	2320      	movs	r3, #32
 8003af0:	e003      	b.n	8003afa <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af4:	fab3 f383 	clz	r3, r3
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	3301      	adds	r3, #1
 8003afc:	f003 021f 	and.w	r2, r3, #31
 8003b00:	4613      	mov	r3, r2
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	4413      	add	r3, r2
 8003b06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	e080      	b.n	8003c0e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d107      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x5b4>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	0e9b      	lsrs	r3, r3, #26
 8003b1e:	3301      	adds	r3, #1
 8003b20:	069b      	lsls	r3, r3, #26
 8003b22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b26:	e015      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x5e0>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003b40:	2320      	movs	r3, #32
 8003b42:	e003      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	069b      	lsls	r3, r3, #26
 8003b50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d109      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x600>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	0e9b      	lsrs	r3, r3, #26
 8003b66:	3301      	adds	r3, #1
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b72:	e017      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x630>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	fa93 f3a3 	rbit	r3, r3
 8003b80:	61fb      	str	r3, [r7, #28]
  return result;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003b8c:	2320      	movs	r3, #32
 8003b8e:	e003      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	fab3 f383 	clz	r3, r3
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	3301      	adds	r3, #1
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba4:	ea42 0103 	orr.w	r1, r2, r3
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10d      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x65c>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	0e9b      	lsrs	r3, r3, #26
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f003 021f 	and.w	r2, r3, #31
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3b1e      	subs	r3, #30
 8003bc8:	051b      	lsls	r3, r3, #20
 8003bca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bce:	e01d      	b.n	8003c0c <HAL_ADC_ConfigChannel+0x698>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	fa93 f3a3 	rbit	r3, r3
 8003bdc:	613b      	str	r3, [r7, #16]
  return result;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d103      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003be8:	2320      	movs	r3, #32
 8003bea:	e005      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x684>
 8003bec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	f003 021f 	and.w	r2, r3, #31
 8003bfe:	4613      	mov	r3, r2
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	4413      	add	r3, r2
 8003c04:	3b1e      	subs	r3, #30
 8003c06:	051b      	lsls	r3, r3, #20
 8003c08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	6892      	ldr	r2, [r2, #8]
 8003c12:	4619      	mov	r1, r3
 8003c14:	f7ff f81a 	bl	8002c4c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	4b44      	ldr	r3, [pc, #272]	; (8003d30 <HAL_ADC_ConfigChannel+0x7bc>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d07a      	beq.n	8003d1a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c24:	4843      	ldr	r0, [pc, #268]	; (8003d34 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c26:	f7fe ff6f 	bl	8002b08 <LL_ADC_GetCommonPathInternalCh>
 8003c2a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a41      	ldr	r2, [pc, #260]	; (8003d38 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d12c      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d126      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a3c      	ldr	r2, [pc, #240]	; (8003d3c <HAL_ADC_ConfigChannel+0x7c8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <HAL_ADC_ConfigChannel+0x6e4>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a3b      	ldr	r2, [pc, #236]	; (8003d40 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d15d      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c60:	4619      	mov	r1, r3
 8003c62:	4834      	ldr	r0, [pc, #208]	; (8003d34 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c64:	f7fe ff3d 	bl	8002ae2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c68:	4b36      	ldr	r3, [pc, #216]	; (8003d44 <HAL_ADC_ConfigChannel+0x7d0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	099b      	lsrs	r3, r3, #6
 8003c6e:	4a36      	ldr	r2, [pc, #216]	; (8003d48 <HAL_ADC_ConfigChannel+0x7d4>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	099b      	lsrs	r3, r3, #6
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	4613      	mov	r3, r2
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c82:	e002      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f9      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c90:	e040      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2d      	ldr	r2, [pc, #180]	; (8003d4c <HAL_ADC_ConfigChannel+0x7d8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d118      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x75a>
 8003c9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d112      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a23      	ldr	r2, [pc, #140]	; (8003d3c <HAL_ADC_ConfigChannel+0x7c8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_ADC_ConfigChannel+0x748>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a22      	ldr	r2, [pc, #136]	; (8003d40 <HAL_ADC_ConfigChannel+0x7cc>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d12d      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	481b      	ldr	r0, [pc, #108]	; (8003d34 <HAL_ADC_ConfigChannel+0x7c0>)
 8003cc8:	f7fe ff0b 	bl	8002ae2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ccc:	e024      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1f      	ldr	r2, [pc, #124]	; (8003d50 <HAL_ADC_ConfigChannel+0x7dc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d120      	bne.n	8003d1a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d11a      	bne.n	8003d1a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <HAL_ADC_ConfigChannel+0x7c8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d115      	bne.n	8003d1a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cf2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	480e      	ldr	r0, [pc, #56]	; (8003d34 <HAL_ADC_ConfigChannel+0x7c0>)
 8003cfa:	f7fe fef2 	bl	8002ae2 <LL_ADC_SetCommonPathInternalCh>
 8003cfe:	e00c      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d04:	f043 0220 	orr.w	r2, r3, #32
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003d12:	e002      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d14:	bf00      	nop
 8003d16:	e000      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d22:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	37d8      	adds	r7, #216	; 0xd8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	80080000 	.word	0x80080000
 8003d34:	50040300 	.word	0x50040300
 8003d38:	c7520000 	.word	0xc7520000
 8003d3c:	50040000 	.word	0x50040000
 8003d40:	50040200 	.word	0x50040200
 8003d44:	20000024 	.word	0x20000024
 8003d48:	053e2d63 	.word	0x053e2d63
 8003d4c:	cb840000 	.word	0xcb840000
 8003d50:	80000001 	.word	0x80000001

08003d54 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff f89e 	bl	8002eac <LL_ADC_REG_IsConversionOngoing>
 8003d70:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff f8bf 	bl	8002efa <LL_ADC_INJ_IsConversionOngoing>
 8003d7c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d103      	bne.n	8003d8c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 8098 	beq.w	8003ebc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d02a      	beq.n	8003df0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	7e5b      	ldrb	r3, [r3, #25]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d126      	bne.n	8003df0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	7e1b      	ldrb	r3, [r3, #24]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d122      	bne.n	8003df0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003daa:	2301      	movs	r3, #1
 8003dac:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003dae:	e014      	b.n	8003dda <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	4a45      	ldr	r2, [pc, #276]	; (8003ec8 <ADC_ConversionStop+0x174>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d90d      	bls.n	8003dd4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbc:	f043 0210 	orr.w	r2, r3, #16
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc8:	f043 0201 	orr.w	r2, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e074      	b.n	8003ebe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d1e3      	bne.n	8003db0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2240      	movs	r2, #64	; 0x40
 8003dee:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d014      	beq.n	8003e20 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff f856 	bl	8002eac <LL_ADC_REG_IsConversionOngoing>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00c      	beq.n	8003e20 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff f813 	bl	8002e36 <LL_ADC_IsDisableOngoing>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d104      	bne.n	8003e20 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff f832 	bl	8002e84 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d014      	beq.n	8003e50 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff f865 	bl	8002efa <LL_ADC_INJ_IsConversionOngoing>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00c      	beq.n	8003e50 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe fffb 	bl	8002e36 <LL_ADC_IsDisableOngoing>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d104      	bne.n	8003e50 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff f841 	bl	8002ed2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d005      	beq.n	8003e62 <ADC_ConversionStop+0x10e>
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d105      	bne.n	8003e68 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003e5c:	230c      	movs	r3, #12
 8003e5e:	617b      	str	r3, [r7, #20]
        break;
 8003e60:	e005      	b.n	8003e6e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003e62:	2308      	movs	r3, #8
 8003e64:	617b      	str	r3, [r7, #20]
        break;
 8003e66:	e002      	b.n	8003e6e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003e68:	2304      	movs	r3, #4
 8003e6a:	617b      	str	r3, [r7, #20]
        break;
 8003e6c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003e6e:	f7fe fdf5 	bl	8002a5c <HAL_GetTick>
 8003e72:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e74:	e01b      	b.n	8003eae <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003e76:	f7fe fdf1 	bl	8002a5c <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b05      	cmp	r3, #5
 8003e82:	d914      	bls.n	8003eae <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00d      	beq.n	8003eae <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e96:	f043 0210 	orr.w	r2, r3, #16
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	f043 0201 	orr.w	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e007      	b.n	8003ebe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1dc      	bne.n	8003e76 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	a33fffff 	.word	0xa33fffff

08003ecc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fe ff97 	bl	8002e10 <LL_ADC_IsEnabled>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d169      	bne.n	8003fbc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	4b36      	ldr	r3, [pc, #216]	; (8003fc8 <ADC_Enable+0xfc>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00d      	beq.n	8003f12 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efa:	f043 0210 	orr.w	r2, r3, #16
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f06:	f043 0201 	orr.w	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e055      	b.n	8003fbe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fe ff52 	bl	8002dc0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003f1c:	482b      	ldr	r0, [pc, #172]	; (8003fcc <ADC_Enable+0x100>)
 8003f1e:	f7fe fdf3 	bl	8002b08 <LL_ADC_GetCommonPathInternalCh>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d013      	beq.n	8003f54 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f2c:	4b28      	ldr	r3, [pc, #160]	; (8003fd0 <ADC_Enable+0x104>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	099b      	lsrs	r3, r3, #6
 8003f32:	4a28      	ldr	r2, [pc, #160]	; (8003fd4 <ADC_Enable+0x108>)
 8003f34:	fba2 2303 	umull	r2, r3, r2, r3
 8003f38:	099b      	lsrs	r3, r3, #6
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003f46:	e002      	b.n	8003f4e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f9      	bne.n	8003f48 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003f54:	f7fe fd82 	bl	8002a5c <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f5a:	e028      	b.n	8003fae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe ff55 	bl	8002e10 <LL_ADC_IsEnabled>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d104      	bne.n	8003f76 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fe ff25 	bl	8002dc0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f76:	f7fe fd71 	bl	8002a5c <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d914      	bls.n	8003fae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d00d      	beq.n	8003fae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f96:	f043 0210 	orr.w	r2, r3, #16
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa2:	f043 0201 	orr.w	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e007      	b.n	8003fbe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d1cf      	bne.n	8003f5c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	8000003f 	.word	0x8000003f
 8003fcc:	50040300 	.word	0x50040300
 8003fd0:	20000024 	.word	0x20000024
 8003fd4:	053e2d63 	.word	0x053e2d63

08003fd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fe ff26 	bl	8002e36 <LL_ADC_IsDisableOngoing>
 8003fea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe ff0d 	bl	8002e10 <LL_ADC_IsEnabled>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d047      	beq.n	800408c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d144      	bne.n	800408c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 030d 	and.w	r3, r3, #13
 800400c:	2b01      	cmp	r3, #1
 800400e:	d10c      	bne.n	800402a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f7fe fee7 	bl	8002de8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2203      	movs	r2, #3
 8004020:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004022:	f7fe fd1b 	bl	8002a5c <HAL_GetTick>
 8004026:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004028:	e029      	b.n	800407e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	f043 0210 	orr.w	r2, r3, #16
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	f043 0201 	orr.w	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e023      	b.n	800408e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004046:	f7fe fd09 	bl	8002a5c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d914      	bls.n	800407e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00d      	beq.n	800407e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004066:	f043 0210 	orr.w	r2, r3, #16
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004072:	f043 0201 	orr.w	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e007      	b.n	800408e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1dc      	bne.n	8004046 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <LL_ADC_IsEnabled>:
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <LL_ADC_IsEnabled+0x18>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <LL_ADC_IsEnabled+0x1a>
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <LL_ADC_REG_IsConversionOngoing>:
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d101      	bne.n	80040d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b09f      	sub	sp, #124	; 0x7c
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040fe:	2302      	movs	r3, #2
 8004100:	e093      	b.n	800422a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800410a:	2300      	movs	r3, #0
 800410c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800410e:	2300      	movs	r3, #0
 8004110:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a47      	ldr	r2, [pc, #284]	; (8004234 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d102      	bne.n	8004122 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800411c:	4b46      	ldr	r3, [pc, #280]	; (8004238 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800411e:	60bb      	str	r3, [r7, #8]
 8004120:	e001      	b.n	8004126 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10b      	bne.n	8004144 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	f043 0220 	orr.w	r2, r3, #32
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e072      	b.n	800422a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff ffb8 	bl	80040bc <LL_ADC_REG_IsConversionOngoing>
 800414c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff ffb2 	bl	80040bc <LL_ADC_REG_IsConversionOngoing>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d154      	bne.n	8004208 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800415e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004160:	2b00      	cmp	r3, #0
 8004162:	d151      	bne.n	8004208 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004164:	4b35      	ldr	r3, [pc, #212]	; (800423c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004166:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d02c      	beq.n	80041ca <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	6859      	ldr	r1, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004182:	035b      	lsls	r3, r3, #13
 8004184:	430b      	orrs	r3, r1
 8004186:	431a      	orrs	r2, r3
 8004188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800418c:	4829      	ldr	r0, [pc, #164]	; (8004234 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800418e:	f7ff ff82 	bl	8004096 <LL_ADC_IsEnabled>
 8004192:	4604      	mov	r4, r0
 8004194:	4828      	ldr	r0, [pc, #160]	; (8004238 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004196:	f7ff ff7e 	bl	8004096 <LL_ADC_IsEnabled>
 800419a:	4603      	mov	r3, r0
 800419c:	431c      	orrs	r4, r3
 800419e:	4828      	ldr	r0, [pc, #160]	; (8004240 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80041a0:	f7ff ff79 	bl	8004096 <LL_ADC_IsEnabled>
 80041a4:	4603      	mov	r3, r0
 80041a6:	4323      	orrs	r3, r4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d137      	bne.n	800421c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80041ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80041b4:	f023 030f 	bic.w	r3, r3, #15
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	6811      	ldr	r1, [r2, #0]
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	6892      	ldr	r2, [r2, #8]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	431a      	orrs	r2, r3
 80041c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041c8:	e028      	b.n	800421c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80041ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041d6:	4817      	ldr	r0, [pc, #92]	; (8004234 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80041d8:	f7ff ff5d 	bl	8004096 <LL_ADC_IsEnabled>
 80041dc:	4604      	mov	r4, r0
 80041de:	4816      	ldr	r0, [pc, #88]	; (8004238 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80041e0:	f7ff ff59 	bl	8004096 <LL_ADC_IsEnabled>
 80041e4:	4603      	mov	r3, r0
 80041e6:	431c      	orrs	r4, r3
 80041e8:	4815      	ldr	r0, [pc, #84]	; (8004240 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80041ea:	f7ff ff54 	bl	8004096 <LL_ADC_IsEnabled>
 80041ee:	4603      	mov	r3, r0
 80041f0:	4323      	orrs	r3, r4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d112      	bne.n	800421c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80041fe:	f023 030f 	bic.w	r3, r3, #15
 8004202:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004204:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004206:	e009      	b.n	800421c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420c:	f043 0220 	orr.w	r2, r3, #32
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800421a:	e000      	b.n	800421e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800421c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004226:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800422a:	4618      	mov	r0, r3
 800422c:	377c      	adds	r7, #124	; 0x7c
 800422e:	46bd      	mov	sp, r7
 8004230:	bd90      	pop	{r4, r7, pc}
 8004232:	bf00      	nop
 8004234:	50040000 	.word	0x50040000
 8004238:	50040100 	.word	0x50040100
 800423c:	50040300 	.word	0x50040300
 8004240:	50040200 	.word	0x50040200

08004244 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e0ed      	b.n	8004432 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d102      	bne.n	8004268 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fe f95e 	bl	8002524 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004278:	f7fe fbf0 	bl	8002a5c <HAL_GetTick>
 800427c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800427e:	e012      	b.n	80042a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004280:	f7fe fbec 	bl	8002a5c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b0a      	cmp	r3, #10
 800428c:	d90b      	bls.n	80042a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2205      	movs	r2, #5
 800429e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e0c5      	b.n	8004432 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0e5      	beq.n	8004280 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0202 	bic.w	r2, r2, #2
 80042c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042c4:	f7fe fbca 	bl	8002a5c <HAL_GetTick>
 80042c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80042ca:	e012      	b.n	80042f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042cc:	f7fe fbc6 	bl	8002a5c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b0a      	cmp	r3, #10
 80042d8:	d90b      	bls.n	80042f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2205      	movs	r2, #5
 80042ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e09f      	b.n	8004432 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e5      	bne.n	80042cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	7e1b      	ldrb	r3, [r3, #24]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d108      	bne.n	800431a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	e007      	b.n	800432a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004328:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	7e5b      	ldrb	r3, [r3, #25]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d108      	bne.n	8004344 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	e007      	b.n	8004354 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004352:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	7e9b      	ldrb	r3, [r3, #26]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d108      	bne.n	800436e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0220 	orr.w	r2, r2, #32
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	e007      	b.n	800437e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0220 	bic.w	r2, r2, #32
 800437c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	7edb      	ldrb	r3, [r3, #27]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d108      	bne.n	8004398 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0210 	bic.w	r2, r2, #16
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	e007      	b.n	80043a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0210 	orr.w	r2, r2, #16
 80043a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	7f1b      	ldrb	r3, [r3, #28]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d108      	bne.n	80043c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0208 	orr.w	r2, r2, #8
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	e007      	b.n	80043d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0208 	bic.w	r2, r2, #8
 80043d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	7f5b      	ldrb	r3, [r3, #29]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d108      	bne.n	80043ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0204 	orr.w	r2, r2, #4
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e007      	b.n	80043fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0204 	bic.w	r2, r2, #4
 80043fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	ea42 0103 	orr.w	r1, r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	1e5a      	subs	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <__NVIC_SetPriorityGrouping+0x44>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004458:	4013      	ands	r3, r2
 800445a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800446c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800446e:	4a04      	ldr	r2, [pc, #16]	; (8004480 <__NVIC_SetPriorityGrouping+0x44>)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	60d3      	str	r3, [r2, #12]
}
 8004474:	bf00      	nop
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	e000ed00 	.word	0xe000ed00

08004484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004488:	4b04      	ldr	r3, [pc, #16]	; (800449c <__NVIC_GetPriorityGrouping+0x18>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	0a1b      	lsrs	r3, r3, #8
 800448e:	f003 0307 	and.w	r3, r3, #7
}
 8004492:	4618      	mov	r0, r3
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	e000ed00 	.word	0xe000ed00

080044a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	db0b      	blt.n	80044ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	f003 021f 	and.w	r2, r3, #31
 80044b8:	4907      	ldr	r1, [pc, #28]	; (80044d8 <__NVIC_EnableIRQ+0x38>)
 80044ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	2001      	movs	r0, #1
 80044c2:	fa00 f202 	lsl.w	r2, r0, r2
 80044c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	e000e100 	.word	0xe000e100

080044dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	6039      	str	r1, [r7, #0]
 80044e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	db0a      	blt.n	8004506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	490c      	ldr	r1, [pc, #48]	; (8004528 <__NVIC_SetPriority+0x4c>)
 80044f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fa:	0112      	lsls	r2, r2, #4
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	440b      	add	r3, r1
 8004500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004504:	e00a      	b.n	800451c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	b2da      	uxtb	r2, r3
 800450a:	4908      	ldr	r1, [pc, #32]	; (800452c <__NVIC_SetPriority+0x50>)
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	3b04      	subs	r3, #4
 8004514:	0112      	lsls	r2, r2, #4
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	440b      	add	r3, r1
 800451a:	761a      	strb	r2, [r3, #24]
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	e000e100 	.word	0xe000e100
 800452c:	e000ed00 	.word	0xe000ed00

08004530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004530:	b480      	push	{r7}
 8004532:	b089      	sub	sp, #36	; 0x24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f1c3 0307 	rsb	r3, r3, #7
 800454a:	2b04      	cmp	r3, #4
 800454c:	bf28      	it	cs
 800454e:	2304      	movcs	r3, #4
 8004550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	3304      	adds	r3, #4
 8004556:	2b06      	cmp	r3, #6
 8004558:	d902      	bls.n	8004560 <NVIC_EncodePriority+0x30>
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	3b03      	subs	r3, #3
 800455e:	e000      	b.n	8004562 <NVIC_EncodePriority+0x32>
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43da      	mvns	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	401a      	ands	r2, r3
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004578:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	fa01 f303 	lsl.w	r3, r1, r3
 8004582:	43d9      	mvns	r1, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004588:	4313      	orrs	r3, r2
         );
}
 800458a:	4618      	mov	r0, r3
 800458c:	3724      	adds	r7, #36	; 0x24
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045a8:	d301      	bcc.n	80045ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045aa:	2301      	movs	r3, #1
 80045ac:	e00f      	b.n	80045ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045ae:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <SysTick_Config+0x40>)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045b6:	210f      	movs	r1, #15
 80045b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045bc:	f7ff ff8e 	bl	80044dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <SysTick_Config+0x40>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045c6:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <SysTick_Config+0x40>)
 80045c8:	2207      	movs	r2, #7
 80045ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	e000e010 	.word	0xe000e010

080045dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff ff29 	bl	800443c <__NVIC_SetPriorityGrouping>
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b086      	sub	sp, #24
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	4603      	mov	r3, r0
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004604:	f7ff ff3e 	bl	8004484 <__NVIC_GetPriorityGrouping>
 8004608:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	6978      	ldr	r0, [r7, #20]
 8004610:	f7ff ff8e 	bl	8004530 <NVIC_EncodePriority>
 8004614:	4602      	mov	r2, r0
 8004616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800461a:	4611      	mov	r1, r2
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff ff5d 	bl	80044dc <__NVIC_SetPriority>
}
 8004622:	bf00      	nop
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	4603      	mov	r3, r0
 8004632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff ff31 	bl	80044a0 <__NVIC_EnableIRQ>
}
 800463e:	bf00      	nop
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff ffa2 	bl	8004598 <SysTick_Config>
 8004654:	4603      	mov	r3, r0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800466e:	e17f      	b.n	8004970 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	2101      	movs	r1, #1
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	fa01 f303 	lsl.w	r3, r1, r3
 800467c:	4013      	ands	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 8171 	beq.w	800496a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	2b01      	cmp	r3, #1
 8004692:	d005      	beq.n	80046a0 <HAL_GPIO_Init+0x40>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d130      	bne.n	8004702 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	2203      	movs	r2, #3
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4013      	ands	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046d6:	2201      	movs	r2, #1
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43db      	mvns	r3, r3
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4013      	ands	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	091b      	lsrs	r3, r3, #4
 80046ec:	f003 0201 	and.w	r2, r3, #1
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	2b03      	cmp	r3, #3
 800470c:	d118      	bne.n	8004740 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004714:	2201      	movs	r2, #1
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	43db      	mvns	r3, r3
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4013      	ands	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	08db      	lsrs	r3, r3, #3
 800472a:	f003 0201 	and.w	r2, r3, #1
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	2b03      	cmp	r3, #3
 800474a:	d017      	beq.n	800477c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	2203      	movs	r2, #3
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4013      	ands	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d123      	bne.n	80047d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	08da      	lsrs	r2, r3, #3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3208      	adds	r2, #8
 8004790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004794:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	220f      	movs	r2, #15
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	43db      	mvns	r3, r3
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4013      	ands	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	08da      	lsrs	r2, r3, #3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3208      	adds	r2, #8
 80047ca:	6939      	ldr	r1, [r7, #16]
 80047cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	2203      	movs	r2, #3
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4013      	ands	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0203 	and.w	r2, r3, #3
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80ac 	beq.w	800496a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004812:	4b5f      	ldr	r3, [pc, #380]	; (8004990 <HAL_GPIO_Init+0x330>)
 8004814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004816:	4a5e      	ldr	r2, [pc, #376]	; (8004990 <HAL_GPIO_Init+0x330>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	6613      	str	r3, [r2, #96]	; 0x60
 800481e:	4b5c      	ldr	r3, [pc, #368]	; (8004990 <HAL_GPIO_Init+0x330>)
 8004820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	60bb      	str	r3, [r7, #8]
 8004828:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800482a:	4a5a      	ldr	r2, [pc, #360]	; (8004994 <HAL_GPIO_Init+0x334>)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	089b      	lsrs	r3, r3, #2
 8004830:	3302      	adds	r3, #2
 8004832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004836:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	220f      	movs	r2, #15
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4013      	ands	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004854:	d025      	beq.n	80048a2 <HAL_GPIO_Init+0x242>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a4f      	ldr	r2, [pc, #316]	; (8004998 <HAL_GPIO_Init+0x338>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d01f      	beq.n	800489e <HAL_GPIO_Init+0x23e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a4e      	ldr	r2, [pc, #312]	; (800499c <HAL_GPIO_Init+0x33c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d019      	beq.n	800489a <HAL_GPIO_Init+0x23a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a4d      	ldr	r2, [pc, #308]	; (80049a0 <HAL_GPIO_Init+0x340>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <HAL_GPIO_Init+0x236>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a4c      	ldr	r2, [pc, #304]	; (80049a4 <HAL_GPIO_Init+0x344>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00d      	beq.n	8004892 <HAL_GPIO_Init+0x232>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a4b      	ldr	r2, [pc, #300]	; (80049a8 <HAL_GPIO_Init+0x348>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d007      	beq.n	800488e <HAL_GPIO_Init+0x22e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a4a      	ldr	r2, [pc, #296]	; (80049ac <HAL_GPIO_Init+0x34c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d101      	bne.n	800488a <HAL_GPIO_Init+0x22a>
 8004886:	2306      	movs	r3, #6
 8004888:	e00c      	b.n	80048a4 <HAL_GPIO_Init+0x244>
 800488a:	2307      	movs	r3, #7
 800488c:	e00a      	b.n	80048a4 <HAL_GPIO_Init+0x244>
 800488e:	2305      	movs	r3, #5
 8004890:	e008      	b.n	80048a4 <HAL_GPIO_Init+0x244>
 8004892:	2304      	movs	r3, #4
 8004894:	e006      	b.n	80048a4 <HAL_GPIO_Init+0x244>
 8004896:	2303      	movs	r3, #3
 8004898:	e004      	b.n	80048a4 <HAL_GPIO_Init+0x244>
 800489a:	2302      	movs	r3, #2
 800489c:	e002      	b.n	80048a4 <HAL_GPIO_Init+0x244>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <HAL_GPIO_Init+0x244>
 80048a2:	2300      	movs	r3, #0
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	f002 0203 	and.w	r2, r2, #3
 80048aa:	0092      	lsls	r2, r2, #2
 80048ac:	4093      	lsls	r3, r2
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048b4:	4937      	ldr	r1, [pc, #220]	; (8004994 <HAL_GPIO_Init+0x334>)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	089b      	lsrs	r3, r3, #2
 80048ba:	3302      	adds	r3, #2
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048c2:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <HAL_GPIO_Init+0x350>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	43db      	mvns	r3, r3
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4013      	ands	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048e6:	4a32      	ldr	r2, [pc, #200]	; (80049b0 <HAL_GPIO_Init+0x350>)
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048ec:	4b30      	ldr	r3, [pc, #192]	; (80049b0 <HAL_GPIO_Init+0x350>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	43db      	mvns	r3, r3
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4013      	ands	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004910:	4a27      	ldr	r2, [pc, #156]	; (80049b0 <HAL_GPIO_Init+0x350>)
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004916:	4b26      	ldr	r3, [pc, #152]	; (80049b0 <HAL_GPIO_Init+0x350>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	43db      	mvns	r3, r3
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4013      	ands	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800493a:	4a1d      	ldr	r2, [pc, #116]	; (80049b0 <HAL_GPIO_Init+0x350>)
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004940:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <HAL_GPIO_Init+0x350>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	43db      	mvns	r3, r3
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4013      	ands	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4313      	orrs	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004964:	4a12      	ldr	r2, [pc, #72]	; (80049b0 <HAL_GPIO_Init+0x350>)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	3301      	adds	r3, #1
 800496e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	fa22 f303 	lsr.w	r3, r2, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	f47f ae78 	bne.w	8004670 <HAL_GPIO_Init+0x10>
  }
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40021000 	.word	0x40021000
 8004994:	40010000 	.word	0x40010000
 8004998:	48000400 	.word	0x48000400
 800499c:	48000800 	.word	0x48000800
 80049a0:	48000c00 	.word	0x48000c00
 80049a4:	48001000 	.word	0x48001000
 80049a8:	48001400 	.word	0x48001400
 80049ac:	48001800 	.word	0x48001800
 80049b0:	40010400 	.word	0x40010400

080049b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	807b      	strh	r3, [r7, #2]
 80049c0:	4613      	mov	r3, r2
 80049c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049c4:	787b      	ldrb	r3, [r7, #1]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049ca:	887a      	ldrh	r2, [r7, #2]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049d0:	e002      	b.n	80049d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049d2:	887a      	ldrh	r2, [r7, #2]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e081      	b.n	8004afa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fd fdce 	bl	80025ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2224      	movs	r2, #36	; 0x24
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0201 	bic.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d107      	bne.n	8004a5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a5a:	609a      	str	r2, [r3, #8]
 8004a5c:	e006      	b.n	8004a6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d104      	bne.n	8004a7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aa0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69d9      	ldr	r1, [r3, #28]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1a      	ldr	r2, [r3, #32]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	460b      	mov	r3, r1
 8004b12:	817b      	strh	r3, [r7, #10]
 8004b14:	4613      	mov	r3, r2
 8004b16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	f040 80da 	bne.w	8004cda <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_I2C_Master_Transmit+0x30>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e0d3      	b.n	8004cdc <HAL_I2C_Master_Transmit+0x1d8>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b3c:	f7fd ff8e 	bl	8002a5c <HAL_GetTick>
 8004b40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	2319      	movs	r3, #25
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 faed 	bl	800512e <I2C_WaitOnFlagUntilTimeout>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e0be      	b.n	8004cdc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2221      	movs	r2, #33	; 0x21
 8004b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2210      	movs	r2, #16
 8004b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	893a      	ldrh	r2, [r7, #8]
 8004b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2bff      	cmp	r3, #255	; 0xff
 8004b8e:	d90e      	bls.n	8004bae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	22ff      	movs	r2, #255	; 0xff
 8004b94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	8979      	ldrh	r1, [r7, #10]
 8004b9e:	4b51      	ldr	r3, [pc, #324]	; (8004ce4 <HAL_I2C_Master_Transmit+0x1e0>)
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 fce4 	bl	8005574 <I2C_TransferConfig>
 8004bac:	e06c      	b.n	8004c88 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	8979      	ldrh	r1, [r7, #10]
 8004bc0:	4b48      	ldr	r3, [pc, #288]	; (8004ce4 <HAL_I2C_Master_Transmit+0x1e0>)
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 fcd3 	bl	8005574 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004bce:	e05b      	b.n	8004c88 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	6a39      	ldr	r1, [r7, #32]
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 faea 	bl	80051ae <I2C_WaitOnTXISFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e07b      	b.n	8004cdc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	781a      	ldrb	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d034      	beq.n	8004c88 <HAL_I2C_Master_Transmit+0x184>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d130      	bne.n	8004c88 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2180      	movs	r1, #128	; 0x80
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 fa7c 	bl	800512e <I2C_WaitOnFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e04d      	b.n	8004cdc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2bff      	cmp	r3, #255	; 0xff
 8004c48:	d90e      	bls.n	8004c68 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	22ff      	movs	r2, #255	; 0xff
 8004c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	8979      	ldrh	r1, [r7, #10]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 fc87 	bl	8005574 <I2C_TransferConfig>
 8004c66:	e00f      	b.n	8004c88 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	8979      	ldrh	r1, [r7, #10]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fc76 	bl	8005574 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d19e      	bne.n	8004bd0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	6a39      	ldr	r1, [r7, #32]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fac9 	bl	800522e <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e01a      	b.n	8004cdc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2220      	movs	r2, #32
 8004cac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6859      	ldr	r1, [r3, #4]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <HAL_I2C_Master_Transmit+0x1e4>)
 8004cba:	400b      	ands	r3, r1
 8004cbc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e000      	b.n	8004cdc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004cda:	2302      	movs	r3, #2
  }
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	80002000 	.word	0x80002000
 8004ce8:	fe00e800 	.word	0xfe00e800

08004cec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	607a      	str	r2, [r7, #4]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	817b      	strh	r3, [r7, #10]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b20      	cmp	r3, #32
 8004d0a:	f040 80db 	bne.w	8004ec4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_I2C_Master_Receive+0x30>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e0d4      	b.n	8004ec6 <HAL_I2C_Master_Receive+0x1da>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d24:	f7fd fe9a 	bl	8002a5c <HAL_GetTick>
 8004d28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	2319      	movs	r3, #25
 8004d30:	2201      	movs	r2, #1
 8004d32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 f9f9 	bl	800512e <I2C_WaitOnFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e0bf      	b.n	8004ec6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2222      	movs	r2, #34	; 0x22
 8004d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2210      	movs	r2, #16
 8004d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	893a      	ldrh	r2, [r7, #8]
 8004d66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2bff      	cmp	r3, #255	; 0xff
 8004d76:	d90e      	bls.n	8004d96 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	22ff      	movs	r2, #255	; 0xff
 8004d7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	8979      	ldrh	r1, [r7, #10]
 8004d86:	4b52      	ldr	r3, [pc, #328]	; (8004ed0 <HAL_I2C_Master_Receive+0x1e4>)
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 fbf0 	bl	8005574 <I2C_TransferConfig>
 8004d94:	e06d      	b.n	8004e72 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	8979      	ldrh	r1, [r7, #10]
 8004da8:	4b49      	ldr	r3, [pc, #292]	; (8004ed0 <HAL_I2C_Master_Receive+0x1e4>)
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fbdf 	bl	8005574 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004db6:	e05c      	b.n	8004e72 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	6a39      	ldr	r1, [r7, #32]
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 fa73 	bl	80052a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e07c      	b.n	8004ec6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d034      	beq.n	8004e72 <HAL_I2C_Master_Receive+0x186>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d130      	bne.n	8004e72 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	2200      	movs	r2, #0
 8004e18:	2180      	movs	r1, #128	; 0x80
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 f987 	bl	800512e <I2C_WaitOnFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e04d      	b.n	8004ec6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2bff      	cmp	r3, #255	; 0xff
 8004e32:	d90e      	bls.n	8004e52 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	22ff      	movs	r2, #255	; 0xff
 8004e38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	8979      	ldrh	r1, [r7, #10]
 8004e42:	2300      	movs	r3, #0
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fb92 	bl	8005574 <I2C_TransferConfig>
 8004e50:	e00f      	b.n	8004e72 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	8979      	ldrh	r1, [r7, #10]
 8004e64:	2300      	movs	r3, #0
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fb81 	bl	8005574 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d19d      	bne.n	8004db8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	6a39      	ldr	r1, [r7, #32]
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f9d4 	bl	800522e <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e01a      	b.n	8004ec6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2220      	movs	r2, #32
 8004e96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6859      	ldr	r1, [r3, #4]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <HAL_I2C_Master_Receive+0x1e8>)
 8004ea4:	400b      	ands	r3, r1
 8004ea6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e000      	b.n	8004ec6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004ec4:	2302      	movs	r3, #2
  }
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	80002400 	.word	0x80002400
 8004ed4:	fe00e800 	.word	0xfe00e800

08004ed8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08a      	sub	sp, #40	; 0x28
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	607a      	str	r2, [r7, #4]
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	f040 80f1 	bne.w	80050dc <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f08:	d101      	bne.n	8004f0e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e0e7      	b.n	80050de <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_I2C_IsDeviceReady+0x44>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e0e0      	b.n	80050de <HAL_I2C_IsDeviceReady+0x206>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2224      	movs	r2, #36	; 0x24
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d107      	bne.n	8004f4a <HAL_I2C_IsDeviceReady+0x72>
 8004f3a:	897b      	ldrh	r3, [r7, #10]
 8004f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f48:	e004      	b.n	8004f54 <HAL_I2C_IsDeviceReady+0x7c>
 8004f4a:	897b      	ldrh	r3, [r7, #10]
 8004f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f50:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004f5a:	f7fd fd7f 	bl	8002a5c <HAL_GetTick>
 8004f5e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b20      	cmp	r3, #32
 8004f6c:	bf0c      	ite	eq
 8004f6e:	2301      	moveq	r3, #1
 8004f70:	2300      	movne	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b10      	cmp	r3, #16
 8004f82:	bf0c      	ite	eq
 8004f84:	2301      	moveq	r3, #1
 8004f86:	2300      	movne	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004f8c:	e034      	b.n	8004ff8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f94:	d01a      	beq.n	8004fcc <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f96:	f7fd fd61 	bl	8002a5c <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d302      	bcc.n	8004fac <HAL_I2C_IsDeviceReady+0xd4>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10f      	bne.n	8004fcc <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb8:	f043 0220 	orr.w	r2, r3, #32
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e088      	b.n	80050de <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	bf0c      	ite	eq
 8004fda:	2301      	moveq	r3, #1
 8004fdc:	2300      	movne	r3, #0
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	f003 0310 	and.w	r3, r3, #16
 8004fec:	2b10      	cmp	r3, #16
 8004fee:	bf0c      	ite	eq
 8004ff0:	2301      	moveq	r3, #1
 8004ff2:	2300      	movne	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004ff8:	7ffb      	ldrb	r3, [r7, #31]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d102      	bne.n	8005004 <HAL_I2C_IsDeviceReady+0x12c>
 8004ffe:	7fbb      	ldrb	r3, [r7, #30]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0c4      	beq.n	8004f8e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	f003 0310 	and.w	r3, r3, #16
 800500e:	2b10      	cmp	r3, #16
 8005010:	d01a      	beq.n	8005048 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2200      	movs	r2, #0
 800501a:	2120      	movs	r1, #32
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f886 	bl	800512e <I2C_WaitOnFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e058      	b.n	80050de <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2220      	movs	r2, #32
 8005032:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	e04a      	b.n	80050de <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2200      	movs	r2, #0
 8005050:	2120      	movs	r1, #32
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f86b 	bl	800512e <I2C_WaitOnFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e03d      	b.n	80050de <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2210      	movs	r2, #16
 8005068:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2220      	movs	r2, #32
 8005070:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	d118      	bne.n	80050ac <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005088:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2200      	movs	r2, #0
 8005092:	2120      	movs	r1, #32
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f84a 	bl	800512e <I2C_WaitOnFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e01c      	b.n	80050de <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2220      	movs	r2, #32
 80050aa:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	3301      	adds	r3, #1
 80050b0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	f63f af3b 	bhi.w	8004f32 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c8:	f043 0220 	orr.w	r2, r3, #32
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80050dc:	2302      	movs	r3, #2
  }
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3720      	adds	r7, #32
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d103      	bne.n	8005104 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2200      	movs	r2, #0
 8005102:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b01      	cmp	r3, #1
 8005110:	d007      	beq.n	8005122 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	699a      	ldr	r2, [r3, #24]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0201 	orr.w	r2, r2, #1
 8005120:	619a      	str	r2, [r3, #24]
  }
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	60f8      	str	r0, [r7, #12]
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	603b      	str	r3, [r7, #0]
 800513a:	4613      	mov	r3, r2
 800513c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800513e:	e022      	b.n	8005186 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005146:	d01e      	beq.n	8005186 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005148:	f7fd fc88 	bl	8002a5c <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d302      	bcc.n	800515e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d113      	bne.n	8005186 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005162:	f043 0220 	orr.w	r2, r3, #32
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2220      	movs	r2, #32
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e00f      	b.n	80051a6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	699a      	ldr	r2, [r3, #24]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4013      	ands	r3, r2
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	429a      	cmp	r2, r3
 8005194:	bf0c      	ite	eq
 8005196:	2301      	moveq	r3, #1
 8005198:	2300      	movne	r3, #0
 800519a:	b2db      	uxtb	r3, r3
 800519c:	461a      	mov	r2, r3
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d0cd      	beq.n	8005140 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b084      	sub	sp, #16
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051ba:	e02c      	b.n	8005216 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 f8eb 	bl	800539c <I2C_IsErrorOccurred>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e02a      	b.n	8005226 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051d6:	d01e      	beq.n	8005216 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d8:	f7fd fc40 	bl	8002a5c <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d302      	bcc.n	80051ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d113      	bne.n	8005216 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f2:	f043 0220 	orr.w	r2, r3, #32
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e007      	b.n	8005226 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b02      	cmp	r3, #2
 8005222:	d1cb      	bne.n	80051bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800523a:	e028      	b.n	800528e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 f8ab 	bl	800539c <I2C_IsErrorOccurred>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e026      	b.n	800529e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005250:	f7fd fc04 	bl	8002a5c <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	429a      	cmp	r2, r3
 800525e:	d302      	bcc.n	8005266 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d113      	bne.n	800528e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	f043 0220 	orr.w	r2, r3, #32
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e007      	b.n	800529e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b20      	cmp	r3, #32
 800529a:	d1cf      	bne.n	800523c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052b4:	e064      	b.n	8005380 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f86e 	bl	800539c <I2C_IsErrorOccurred>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e062      	b.n	8005390 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d138      	bne.n	800534a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d105      	bne.n	80052f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	e04e      	b.n	8005390 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	f003 0310 	and.w	r3, r3, #16
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d107      	bne.n	8005310 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2210      	movs	r2, #16
 8005306:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2204      	movs	r2, #4
 800530c:	645a      	str	r2, [r3, #68]	; 0x44
 800530e:	e002      	b.n	8005316 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2220      	movs	r2, #32
 800531c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6859      	ldr	r1, [r3, #4]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800532a:	400b      	ands	r3, r1
 800532c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e022      	b.n	8005390 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534a:	f7fd fb87 	bl	8002a5c <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	429a      	cmp	r2, r3
 8005358:	d302      	bcc.n	8005360 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10f      	bne.n	8005380 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005364:	f043 0220 	orr.w	r2, r3, #32
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e007      	b.n	8005390 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b04      	cmp	r3, #4
 800538c:	d193      	bne.n	80052b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	fe00e800 	.word	0xfe00e800

0800539c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08a      	sub	sp, #40	; 0x28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d075      	beq.n	80054b4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2210      	movs	r2, #16
 80053ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053d0:	e056      	b.n	8005480 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053d8:	d052      	beq.n	8005480 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053da:	f7fd fb3f 	bl	8002a5c <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d302      	bcc.n	80053f0 <I2C_IsErrorOccurred+0x54>
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d147      	bne.n	8005480 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005402:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800540e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005412:	d12e      	bne.n	8005472 <I2C_IsErrorOccurred+0xd6>
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800541a:	d02a      	beq.n	8005472 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800541c:	7cfb      	ldrb	r3, [r7, #19]
 800541e:	2b20      	cmp	r3, #32
 8005420:	d027      	beq.n	8005472 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005430:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005432:	f7fd fb13 	bl	8002a5c <HAL_GetTick>
 8005436:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005438:	e01b      	b.n	8005472 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800543a:	f7fd fb0f 	bl	8002a5c <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b19      	cmp	r3, #25
 8005446:	d914      	bls.n	8005472 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544c:	f043 0220 	orr.w	r2, r3, #32
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b20      	cmp	r3, #32
 800547e:	d1dc      	bne.n	800543a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b20      	cmp	r3, #32
 800548c:	d003      	beq.n	8005496 <I2C_IsErrorOccurred+0xfa>
 800548e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005492:	2b00      	cmp	r3, #0
 8005494:	d09d      	beq.n	80053d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800549a:	2b00      	cmp	r3, #0
 800549c:	d103      	bne.n	80054a6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2220      	movs	r2, #32
 80054a4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	f043 0304 	orr.w	r3, r3, #4
 80054ac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00b      	beq.n	80054de <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	f043 0301 	orr.w	r3, r3, #1
 80054cc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00b      	beq.n	8005500 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	f043 0308 	orr.w	r3, r3, #8
 80054ee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00b      	beq.n	8005522 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	f043 0302 	orr.w	r3, r3, #2
 8005510:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800551a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005522:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005526:	2b00      	cmp	r3, #0
 8005528:	d01c      	beq.n	8005564 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f7ff fddb 	bl	80050e6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	4b0d      	ldr	r3, [pc, #52]	; (8005570 <I2C_IsErrorOccurred+0x1d4>)
 800553c:	400b      	ands	r3, r1
 800553e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	431a      	orrs	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005568:	4618      	mov	r0, r3
 800556a:	3728      	adds	r7, #40	; 0x28
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	fe00e800 	.word	0xfe00e800

08005574 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	607b      	str	r3, [r7, #4]
 800557e:	460b      	mov	r3, r1
 8005580:	817b      	strh	r3, [r7, #10]
 8005582:	4613      	mov	r3, r2
 8005584:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005586:	897b      	ldrh	r3, [r7, #10]
 8005588:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800558c:	7a7b      	ldrb	r3, [r7, #9]
 800558e:	041b      	lsls	r3, r3, #16
 8005590:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005594:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	4313      	orrs	r3, r2
 800559e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	0d5b      	lsrs	r3, r3, #21
 80055ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80055b2:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <I2C_TransferConfig+0x60>)
 80055b4:	430b      	orrs	r3, r1
 80055b6:	43db      	mvns	r3, r3
 80055b8:	ea02 0103 	and.w	r1, r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	03ff63ff 	.word	0x03ff63ff

080055d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d138      	bne.n	8005660 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e032      	b.n	8005662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2224      	movs	r2, #36	; 0x24
 8005608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0201 	bic.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800562a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6819      	ldr	r1, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	e000      	b.n	8005662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005660:	2302      	movs	r3, #2
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b20      	cmp	r3, #32
 8005682:	d139      	bne.n	80056f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800568e:	2302      	movs	r3, #2
 8005690:	e033      	b.n	80056fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2224      	movs	r2, #36	; 0x24
 800569e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0201 	bic.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	e000      	b.n	80056fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056f8:	2302      	movs	r3, #2
  }
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800570c:	4b04      	ldr	r3, [pc, #16]	; (8005720 <HAL_PWREx_GetVoltageRange+0x18>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005714:	4618      	mov	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40007000 	.word	0x40007000

08005724 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005732:	d130      	bne.n	8005796 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005734:	4b23      	ldr	r3, [pc, #140]	; (80057c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800573c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005740:	d038      	beq.n	80057b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005742:	4b20      	ldr	r3, [pc, #128]	; (80057c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800574a:	4a1e      	ldr	r2, [pc, #120]	; (80057c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800574c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005750:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005752:	4b1d      	ldr	r3, [pc, #116]	; (80057c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2232      	movs	r2, #50	; 0x32
 8005758:	fb02 f303 	mul.w	r3, r2, r3
 800575c:	4a1b      	ldr	r2, [pc, #108]	; (80057cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800575e:	fba2 2303 	umull	r2, r3, r2, r3
 8005762:	0c9b      	lsrs	r3, r3, #18
 8005764:	3301      	adds	r3, #1
 8005766:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005768:	e002      	b.n	8005770 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3b01      	subs	r3, #1
 800576e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005770:	4b14      	ldr	r3, [pc, #80]	; (80057c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800577c:	d102      	bne.n	8005784 <HAL_PWREx_ControlVoltageScaling+0x60>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f2      	bne.n	800576a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005784:	4b0f      	ldr	r3, [pc, #60]	; (80057c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800578c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005790:	d110      	bne.n	80057b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e00f      	b.n	80057b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005796:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800579e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a2:	d007      	beq.n	80057b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80057a4:	4b07      	ldr	r3, [pc, #28]	; (80057c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057ac:	4a05      	ldr	r2, [pc, #20]	; (80057c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40007000 	.word	0x40007000
 80057c8:	20000024 	.word	0x20000024
 80057cc:	431bde83 	.word	0x431bde83

080057d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e3ca      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057e2:	4b97      	ldr	r3, [pc, #604]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057ec:	4b94      	ldr	r3, [pc, #592]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0310 	and.w	r3, r3, #16
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 80e4 	beq.w	80059cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <HAL_RCC_OscConfig+0x4a>
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	2b0c      	cmp	r3, #12
 800580e:	f040 808b 	bne.w	8005928 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b01      	cmp	r3, #1
 8005816:	f040 8087 	bne.w	8005928 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800581a:	4b89      	ldr	r3, [pc, #548]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <HAL_RCC_OscConfig+0x62>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e3a2      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1a      	ldr	r2, [r3, #32]
 8005836:	4b82      	ldr	r3, [pc, #520]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d004      	beq.n	800584c <HAL_RCC_OscConfig+0x7c>
 8005842:	4b7f      	ldr	r3, [pc, #508]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800584a:	e005      	b.n	8005858 <HAL_RCC_OscConfig+0x88>
 800584c:	4b7c      	ldr	r3, [pc, #496]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 800584e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005852:	091b      	lsrs	r3, r3, #4
 8005854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005858:	4293      	cmp	r3, r2
 800585a:	d223      	bcs.n	80058a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fd1d 	bl	80062a0 <RCC_SetFlashLatencyFromMSIRange>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e383      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005870:	4b73      	ldr	r3, [pc, #460]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a72      	ldr	r2, [pc, #456]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005876:	f043 0308 	orr.w	r3, r3, #8
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	4b70      	ldr	r3, [pc, #448]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	496d      	ldr	r1, [pc, #436]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 800588a:	4313      	orrs	r3, r2
 800588c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800588e:	4b6c      	ldr	r3, [pc, #432]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	021b      	lsls	r3, r3, #8
 800589c:	4968      	ldr	r1, [pc, #416]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	604b      	str	r3, [r1, #4]
 80058a2:	e025      	b.n	80058f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058a4:	4b66      	ldr	r3, [pc, #408]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a65      	ldr	r2, [pc, #404]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 80058aa:	f043 0308 	orr.w	r3, r3, #8
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	4b63      	ldr	r3, [pc, #396]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	4960      	ldr	r1, [pc, #384]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058c2:	4b5f      	ldr	r3, [pc, #380]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	495b      	ldr	r1, [pc, #364]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d109      	bne.n	80058f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fcdd 	bl	80062a0 <RCC_SetFlashLatencyFromMSIRange>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e343      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058f0:	f000 fc4a 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 80058f4:	4602      	mov	r2, r0
 80058f6:	4b52      	ldr	r3, [pc, #328]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	091b      	lsrs	r3, r3, #4
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	4950      	ldr	r1, [pc, #320]	; (8005a44 <HAL_RCC_OscConfig+0x274>)
 8005902:	5ccb      	ldrb	r3, [r1, r3]
 8005904:	f003 031f 	and.w	r3, r3, #31
 8005908:	fa22 f303 	lsr.w	r3, r2, r3
 800590c:	4a4e      	ldr	r2, [pc, #312]	; (8005a48 <HAL_RCC_OscConfig+0x278>)
 800590e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005910:	4b4e      	ldr	r3, [pc, #312]	; (8005a4c <HAL_RCC_OscConfig+0x27c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4618      	mov	r0, r3
 8005916:	f7fd f851 	bl	80029bc <HAL_InitTick>
 800591a:	4603      	mov	r3, r0
 800591c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d052      	beq.n	80059ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	e327      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d032      	beq.n	8005996 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005930:	4b43      	ldr	r3, [pc, #268]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a42      	ldr	r2, [pc, #264]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800593c:	f7fd f88e 	bl	8002a5c <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005944:	f7fd f88a 	bl	8002a5c <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e310      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005956:	4b3a      	ldr	r3, [pc, #232]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0f0      	beq.n	8005944 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005962:	4b37      	ldr	r3, [pc, #220]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a36      	ldr	r2, [pc, #216]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005968:	f043 0308 	orr.w	r3, r3, #8
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	4b34      	ldr	r3, [pc, #208]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	4931      	ldr	r1, [pc, #196]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 800597c:	4313      	orrs	r3, r2
 800597e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005980:	4b2f      	ldr	r3, [pc, #188]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	492c      	ldr	r1, [pc, #176]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005990:	4313      	orrs	r3, r2
 8005992:	604b      	str	r3, [r1, #4]
 8005994:	e01a      	b.n	80059cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005996:	4b2a      	ldr	r3, [pc, #168]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a29      	ldr	r2, [pc, #164]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 800599c:	f023 0301 	bic.w	r3, r3, #1
 80059a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059a2:	f7fd f85b 	bl	8002a5c <HAL_GetTick>
 80059a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059a8:	e008      	b.n	80059bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059aa:	f7fd f857 	bl	8002a5c <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d901      	bls.n	80059bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e2dd      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059bc:	4b20      	ldr	r3, [pc, #128]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1f0      	bne.n	80059aa <HAL_RCC_OscConfig+0x1da>
 80059c8:	e000      	b.n	80059cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d074      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	2b08      	cmp	r3, #8
 80059dc:	d005      	beq.n	80059ea <HAL_RCC_OscConfig+0x21a>
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	2b0c      	cmp	r3, #12
 80059e2:	d10e      	bne.n	8005a02 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d10b      	bne.n	8005a02 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ea:	4b15      	ldr	r3, [pc, #84]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d064      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x2f0>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d160      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e2ba      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a0a:	d106      	bne.n	8005a1a <HAL_RCC_OscConfig+0x24a>
 8005a0c:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a0b      	ldr	r2, [pc, #44]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	e026      	b.n	8005a68 <HAL_RCC_OscConfig+0x298>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a22:	d115      	bne.n	8005a50 <HAL_RCC_OscConfig+0x280>
 8005a24:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a05      	ldr	r2, [pc, #20]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005a2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a02      	ldr	r2, [pc, #8]	; (8005a40 <HAL_RCC_OscConfig+0x270>)
 8005a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	e014      	b.n	8005a68 <HAL_RCC_OscConfig+0x298>
 8005a3e:	bf00      	nop
 8005a40:	40021000 	.word	0x40021000
 8005a44:	080094ac 	.word	0x080094ac
 8005a48:	20000024 	.word	0x20000024
 8005a4c:	20000028 	.word	0x20000028
 8005a50:	4ba0      	ldr	r3, [pc, #640]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a9f      	ldr	r2, [pc, #636]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	4b9d      	ldr	r3, [pc, #628]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a9c      	ldr	r2, [pc, #624]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d013      	beq.n	8005a98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a70:	f7fc fff4 	bl	8002a5c <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a78:	f7fc fff0 	bl	8002a5c <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b64      	cmp	r3, #100	; 0x64
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e276      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a8a:	4b92      	ldr	r3, [pc, #584]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f0      	beq.n	8005a78 <HAL_RCC_OscConfig+0x2a8>
 8005a96:	e014      	b.n	8005ac2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a98:	f7fc ffe0 	bl	8002a5c <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005aa0:	f7fc ffdc 	bl	8002a5c <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b64      	cmp	r3, #100	; 0x64
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e262      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ab2:	4b88      	ldr	r3, [pc, #544]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f0      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x2d0>
 8005abe:	e000      	b.n	8005ac2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d060      	beq.n	8005b90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	d005      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x310>
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	2b0c      	cmp	r3, #12
 8005ad8:	d119      	bne.n	8005b0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d116      	bne.n	8005b0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ae0:	4b7c      	ldr	r3, [pc, #496]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <HAL_RCC_OscConfig+0x328>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e23f      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af8:	4b76      	ldr	r3, [pc, #472]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	061b      	lsls	r3, r3, #24
 8005b06:	4973      	ldr	r1, [pc, #460]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b0c:	e040      	b.n	8005b90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d023      	beq.n	8005b5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b16:	4b6f      	ldr	r3, [pc, #444]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a6e      	ldr	r2, [pc, #440]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b22:	f7fc ff9b 	bl	8002a5c <HAL_GetTick>
 8005b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b28:	e008      	b.n	8005b3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b2a:	f7fc ff97 	bl	8002a5c <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e21d      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b3c:	4b65      	ldr	r3, [pc, #404]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0f0      	beq.n	8005b2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b48:	4b62      	ldr	r3, [pc, #392]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	061b      	lsls	r3, r3, #24
 8005b56:	495f      	ldr	r1, [pc, #380]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	604b      	str	r3, [r1, #4]
 8005b5c:	e018      	b.n	8005b90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b5e:	4b5d      	ldr	r3, [pc, #372]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a5c      	ldr	r2, [pc, #368]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6a:	f7fc ff77 	bl	8002a5c <HAL_GetTick>
 8005b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b70:	e008      	b.n	8005b84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b72:	f7fc ff73 	bl	8002a5c <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e1f9      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b84:	4b53      	ldr	r3, [pc, #332]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1f0      	bne.n	8005b72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d03c      	beq.n	8005c16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01c      	beq.n	8005bde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ba4:	4b4b      	ldr	r3, [pc, #300]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005baa:	4a4a      	ldr	r2, [pc, #296]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005bac:	f043 0301 	orr.w	r3, r3, #1
 8005bb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb4:	f7fc ff52 	bl	8002a5c <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bbc:	f7fc ff4e 	bl	8002a5c <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e1d4      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bce:	4b41      	ldr	r3, [pc, #260]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0ef      	beq.n	8005bbc <HAL_RCC_OscConfig+0x3ec>
 8005bdc:	e01b      	b.n	8005c16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bde:	4b3d      	ldr	r3, [pc, #244]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005be4:	4a3b      	ldr	r2, [pc, #236]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005be6:	f023 0301 	bic.w	r3, r3, #1
 8005bea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bee:	f7fc ff35 	bl	8002a5c <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bf6:	f7fc ff31 	bl	8002a5c <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e1b7      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c08:	4b32      	ldr	r3, [pc, #200]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1ef      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 80a6 	beq.w	8005d70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c24:	2300      	movs	r3, #0
 8005c26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c28:	4b2a      	ldr	r3, [pc, #168]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10d      	bne.n	8005c50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c34:	4b27      	ldr	r3, [pc, #156]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c38:	4a26      	ldr	r2, [pc, #152]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8005c40:	4b24      	ldr	r3, [pc, #144]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c48:	60bb      	str	r3, [r7, #8]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c50:	4b21      	ldr	r3, [pc, #132]	; (8005cd8 <HAL_RCC_OscConfig+0x508>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d118      	bne.n	8005c8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c5c:	4b1e      	ldr	r3, [pc, #120]	; (8005cd8 <HAL_RCC_OscConfig+0x508>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a1d      	ldr	r2, [pc, #116]	; (8005cd8 <HAL_RCC_OscConfig+0x508>)
 8005c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c68:	f7fc fef8 	bl	8002a5c <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c70:	f7fc fef4 	bl	8002a5c <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e17a      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c82:	4b15      	ldr	r3, [pc, #84]	; (8005cd8 <HAL_RCC_OscConfig+0x508>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0f0      	beq.n	8005c70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d108      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x4d8>
 8005c96:	4b0f      	ldr	r3, [pc, #60]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9c:	4a0d      	ldr	r2, [pc, #52]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005c9e:	f043 0301 	orr.w	r3, r3, #1
 8005ca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ca6:	e029      	b.n	8005cfc <HAL_RCC_OscConfig+0x52c>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	2b05      	cmp	r3, #5
 8005cae:	d115      	bne.n	8005cdc <HAL_RCC_OscConfig+0x50c>
 8005cb0:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb6:	4a07      	ldr	r2, [pc, #28]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005cb8:	f043 0304 	orr.w	r3, r3, #4
 8005cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cc0:	4b04      	ldr	r3, [pc, #16]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc6:	4a03      	ldr	r2, [pc, #12]	; (8005cd4 <HAL_RCC_OscConfig+0x504>)
 8005cc8:	f043 0301 	orr.w	r3, r3, #1
 8005ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cd0:	e014      	b.n	8005cfc <HAL_RCC_OscConfig+0x52c>
 8005cd2:	bf00      	nop
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	40007000 	.word	0x40007000
 8005cdc:	4b9c      	ldr	r3, [pc, #624]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce2:	4a9b      	ldr	r2, [pc, #620]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005ce4:	f023 0301 	bic.w	r3, r3, #1
 8005ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cec:	4b98      	ldr	r3, [pc, #608]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf2:	4a97      	ldr	r2, [pc, #604]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005cf4:	f023 0304 	bic.w	r3, r3, #4
 8005cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d016      	beq.n	8005d32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d04:	f7fc feaa 	bl	8002a5c <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d0a:	e00a      	b.n	8005d22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d0c:	f7fc fea6 	bl	8002a5c <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e12a      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d22:	4b8b      	ldr	r3, [pc, #556]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0ed      	beq.n	8005d0c <HAL_RCC_OscConfig+0x53c>
 8005d30:	e015      	b.n	8005d5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d32:	f7fc fe93 	bl	8002a5c <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d38:	e00a      	b.n	8005d50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d3a:	f7fc fe8f 	bl	8002a5c <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e113      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d50:	4b7f      	ldr	r3, [pc, #508]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1ed      	bne.n	8005d3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d5e:	7ffb      	ldrb	r3, [r7, #31]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d105      	bne.n	8005d70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d64:	4b7a      	ldr	r3, [pc, #488]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d68:	4a79      	ldr	r2, [pc, #484]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d6e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 80fe 	beq.w	8005f76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	f040 80d0 	bne.w	8005f24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005d84:	4b72      	ldr	r3, [pc, #456]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f003 0203 	and.w	r2, r3, #3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d130      	bne.n	8005dfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da2:	3b01      	subs	r3, #1
 8005da4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d127      	bne.n	8005dfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d11f      	bne.n	8005dfa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dc4:	2a07      	cmp	r2, #7
 8005dc6:	bf14      	ite	ne
 8005dc8:	2201      	movne	r2, #1
 8005dca:	2200      	moveq	r2, #0
 8005dcc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d113      	bne.n	8005dfa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ddc:	085b      	lsrs	r3, r3, #1
 8005dde:	3b01      	subs	r3, #1
 8005de0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d109      	bne.n	8005dfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df0:	085b      	lsrs	r3, r3, #1
 8005df2:	3b01      	subs	r3, #1
 8005df4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d06e      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b0c      	cmp	r3, #12
 8005dfe:	d069      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e00:	4b53      	ldr	r3, [pc, #332]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d105      	bne.n	8005e18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005e0c:	4b50      	ldr	r3, [pc, #320]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e0ad      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e1c:	4b4c      	ldr	r3, [pc, #304]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a4b      	ldr	r2, [pc, #300]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e28:	f7fc fe18 	bl	8002a5c <HAL_GetTick>
 8005e2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e30:	f7fc fe14 	bl	8002a5c <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e09a      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e42:	4b43      	ldr	r3, [pc, #268]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1f0      	bne.n	8005e30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e4e:	4b40      	ldr	r3, [pc, #256]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	4b40      	ldr	r3, [pc, #256]	; (8005f54 <HAL_RCC_OscConfig+0x784>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e5e:	3a01      	subs	r2, #1
 8005e60:	0112      	lsls	r2, r2, #4
 8005e62:	4311      	orrs	r1, r2
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e68:	0212      	lsls	r2, r2, #8
 8005e6a:	4311      	orrs	r1, r2
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e70:	0852      	lsrs	r2, r2, #1
 8005e72:	3a01      	subs	r2, #1
 8005e74:	0552      	lsls	r2, r2, #21
 8005e76:	4311      	orrs	r1, r2
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e7c:	0852      	lsrs	r2, r2, #1
 8005e7e:	3a01      	subs	r2, #1
 8005e80:	0652      	lsls	r2, r2, #25
 8005e82:	4311      	orrs	r1, r2
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e88:	0912      	lsrs	r2, r2, #4
 8005e8a:	0452      	lsls	r2, r2, #17
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	4930      	ldr	r1, [pc, #192]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005e94:	4b2e      	ldr	r3, [pc, #184]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a2d      	ldr	r2, [pc, #180]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ea0:	4b2b      	ldr	r3, [pc, #172]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	4a2a      	ldr	r2, [pc, #168]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eaa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005eac:	f7fc fdd6 	bl	8002a5c <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eb4:	f7fc fdd2 	bl	8002a5c <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e058      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ec6:	4b22      	ldr	r3, [pc, #136]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ed2:	e050      	b.n	8005f76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e04f      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ed8:	4b1d      	ldr	r3, [pc, #116]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d148      	bne.n	8005f76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ee4:	4b1a      	ldr	r3, [pc, #104]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a19      	ldr	r2, [pc, #100]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ef0:	4b17      	ldr	r3, [pc, #92]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	4a16      	ldr	r2, [pc, #88]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005efa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005efc:	f7fc fdae 	bl	8002a5c <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f04:	f7fc fdaa 	bl	8002a5c <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e030      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f16:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f0      	beq.n	8005f04 <HAL_RCC_OscConfig+0x734>
 8005f22:	e028      	b.n	8005f76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	2b0c      	cmp	r3, #12
 8005f28:	d023      	beq.n	8005f72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a08      	ldr	r2, [pc, #32]	; (8005f50 <HAL_RCC_OscConfig+0x780>)
 8005f30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f36:	f7fc fd91 	bl	8002a5c <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f3c:	e00c      	b.n	8005f58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f3e:	f7fc fd8d 	bl	8002a5c <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d905      	bls.n	8005f58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e013      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
 8005f50:	40021000 	.word	0x40021000
 8005f54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f58:	4b09      	ldr	r3, [pc, #36]	; (8005f80 <HAL_RCC_OscConfig+0x7b0>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1ec      	bne.n	8005f3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005f64:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <HAL_RCC_OscConfig+0x7b0>)
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	4905      	ldr	r1, [pc, #20]	; (8005f80 <HAL_RCC_OscConfig+0x7b0>)
 8005f6a:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <HAL_RCC_OscConfig+0x7b4>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	60cb      	str	r3, [r1, #12]
 8005f70:	e001      	b.n	8005f76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3720      	adds	r7, #32
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	40021000 	.word	0x40021000
 8005f84:	feeefffc 	.word	0xfeeefffc

08005f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e0e7      	b.n	800616c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f9c:	4b75      	ldr	r3, [pc, #468]	; (8006174 <HAL_RCC_ClockConfig+0x1ec>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d910      	bls.n	8005fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005faa:	4b72      	ldr	r3, [pc, #456]	; (8006174 <HAL_RCC_ClockConfig+0x1ec>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f023 0207 	bic.w	r2, r3, #7
 8005fb2:	4970      	ldr	r1, [pc, #448]	; (8006174 <HAL_RCC_ClockConfig+0x1ec>)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fba:	4b6e      	ldr	r3, [pc, #440]	; (8006174 <HAL_RCC_ClockConfig+0x1ec>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d001      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e0cf      	b.n	800616c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d010      	beq.n	8005ffa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	4b66      	ldr	r3, [pc, #408]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d908      	bls.n	8005ffa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fe8:	4b63      	ldr	r3, [pc, #396]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	4960      	ldr	r1, [pc, #384]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d04c      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2b03      	cmp	r3, #3
 800600c:	d107      	bne.n	800601e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800600e:	4b5a      	ldr	r3, [pc, #360]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d121      	bne.n	800605e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e0a6      	b.n	800616c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d107      	bne.n	8006036 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006026:	4b54      	ldr	r3, [pc, #336]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d115      	bne.n	800605e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e09a      	b.n	800616c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d107      	bne.n	800604e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800603e:	4b4e      	ldr	r3, [pc, #312]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d109      	bne.n	800605e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e08e      	b.n	800616c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800604e:	4b4a      	ldr	r3, [pc, #296]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e086      	b.n	800616c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800605e:	4b46      	ldr	r3, [pc, #280]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f023 0203 	bic.w	r2, r3, #3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	4943      	ldr	r1, [pc, #268]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 800606c:	4313      	orrs	r3, r2
 800606e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006070:	f7fc fcf4 	bl	8002a5c <HAL_GetTick>
 8006074:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006076:	e00a      	b.n	800608e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006078:	f7fc fcf0 	bl	8002a5c <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	f241 3288 	movw	r2, #5000	; 0x1388
 8006086:	4293      	cmp	r3, r2
 8006088:	d901      	bls.n	800608e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e06e      	b.n	800616c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800608e:	4b3a      	ldr	r3, [pc, #232]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 020c 	and.w	r2, r3, #12
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	429a      	cmp	r2, r3
 800609e:	d1eb      	bne.n	8006078 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d010      	beq.n	80060ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	4b31      	ldr	r3, [pc, #196]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d208      	bcs.n	80060ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060bc:	4b2e      	ldr	r3, [pc, #184]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	492b      	ldr	r1, [pc, #172]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060ce:	4b29      	ldr	r3, [pc, #164]	; (8006174 <HAL_RCC_ClockConfig+0x1ec>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d210      	bcs.n	80060fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060dc:	4b25      	ldr	r3, [pc, #148]	; (8006174 <HAL_RCC_ClockConfig+0x1ec>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f023 0207 	bic.w	r2, r3, #7
 80060e4:	4923      	ldr	r1, [pc, #140]	; (8006174 <HAL_RCC_ClockConfig+0x1ec>)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ec:	4b21      	ldr	r3, [pc, #132]	; (8006174 <HAL_RCC_ClockConfig+0x1ec>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d001      	beq.n	80060fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e036      	b.n	800616c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0304 	and.w	r3, r3, #4
 8006106:	2b00      	cmp	r3, #0
 8006108:	d008      	beq.n	800611c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800610a:	4b1b      	ldr	r3, [pc, #108]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	4918      	ldr	r1, [pc, #96]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006118:	4313      	orrs	r3, r2
 800611a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b00      	cmp	r3, #0
 8006126:	d009      	beq.n	800613c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006128:	4b13      	ldr	r3, [pc, #76]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	4910      	ldr	r1, [pc, #64]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006138:	4313      	orrs	r3, r2
 800613a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800613c:	f000 f824 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 8006140:	4602      	mov	r2, r0
 8006142:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <HAL_RCC_ClockConfig+0x1f0>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	091b      	lsrs	r3, r3, #4
 8006148:	f003 030f 	and.w	r3, r3, #15
 800614c:	490b      	ldr	r1, [pc, #44]	; (800617c <HAL_RCC_ClockConfig+0x1f4>)
 800614e:	5ccb      	ldrb	r3, [r1, r3]
 8006150:	f003 031f 	and.w	r3, r3, #31
 8006154:	fa22 f303 	lsr.w	r3, r2, r3
 8006158:	4a09      	ldr	r2, [pc, #36]	; (8006180 <HAL_RCC_ClockConfig+0x1f8>)
 800615a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800615c:	4b09      	ldr	r3, [pc, #36]	; (8006184 <HAL_RCC_ClockConfig+0x1fc>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f7fc fc2b 	bl	80029bc <HAL_InitTick>
 8006166:	4603      	mov	r3, r0
 8006168:	72fb      	strb	r3, [r7, #11]

  return status;
 800616a:	7afb      	ldrb	r3, [r7, #11]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	40022000 	.word	0x40022000
 8006178:	40021000 	.word	0x40021000
 800617c:	080094ac 	.word	0x080094ac
 8006180:	20000024 	.word	0x20000024
 8006184:	20000028 	.word	0x20000028

08006188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006188:	b480      	push	{r7}
 800618a:	b089      	sub	sp, #36	; 0x24
 800618c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	61fb      	str	r3, [r7, #28]
 8006192:	2300      	movs	r3, #0
 8006194:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006196:	4b3e      	ldr	r3, [pc, #248]	; (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 030c 	and.w	r3, r3, #12
 800619e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061a0:	4b3b      	ldr	r3, [pc, #236]	; (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f003 0303 	and.w	r3, r3, #3
 80061a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <HAL_RCC_GetSysClockFreq+0x34>
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	2b0c      	cmp	r3, #12
 80061b4:	d121      	bne.n	80061fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d11e      	bne.n	80061fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061bc:	4b34      	ldr	r3, [pc, #208]	; (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d107      	bne.n	80061d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80061c8:	4b31      	ldr	r3, [pc, #196]	; (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 80061ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061ce:	0a1b      	lsrs	r3, r3, #8
 80061d0:	f003 030f 	and.w	r3, r3, #15
 80061d4:	61fb      	str	r3, [r7, #28]
 80061d6:	e005      	b.n	80061e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80061d8:	4b2d      	ldr	r3, [pc, #180]	; (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	091b      	lsrs	r3, r3, #4
 80061de:	f003 030f 	and.w	r3, r3, #15
 80061e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80061e4:	4a2b      	ldr	r2, [pc, #172]	; (8006294 <HAL_RCC_GetSysClockFreq+0x10c>)
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10d      	bne.n	8006210 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061f8:	e00a      	b.n	8006210 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d102      	bne.n	8006206 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006200:	4b25      	ldr	r3, [pc, #148]	; (8006298 <HAL_RCC_GetSysClockFreq+0x110>)
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	e004      	b.n	8006210 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b08      	cmp	r3, #8
 800620a:	d101      	bne.n	8006210 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800620c:	4b23      	ldr	r3, [pc, #140]	; (800629c <HAL_RCC_GetSysClockFreq+0x114>)
 800620e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	2b0c      	cmp	r3, #12
 8006214:	d134      	bne.n	8006280 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006216:	4b1e      	ldr	r3, [pc, #120]	; (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d003      	beq.n	800622e <HAL_RCC_GetSysClockFreq+0xa6>
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b03      	cmp	r3, #3
 800622a:	d003      	beq.n	8006234 <HAL_RCC_GetSysClockFreq+0xac>
 800622c:	e005      	b.n	800623a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800622e:	4b1a      	ldr	r3, [pc, #104]	; (8006298 <HAL_RCC_GetSysClockFreq+0x110>)
 8006230:	617b      	str	r3, [r7, #20]
      break;
 8006232:	e005      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006234:	4b19      	ldr	r3, [pc, #100]	; (800629c <HAL_RCC_GetSysClockFreq+0x114>)
 8006236:	617b      	str	r3, [r7, #20]
      break;
 8006238:	e002      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	617b      	str	r3, [r7, #20]
      break;
 800623e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006240:	4b13      	ldr	r3, [pc, #76]	; (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	091b      	lsrs	r3, r3, #4
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	3301      	adds	r3, #1
 800624c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800624e:	4b10      	ldr	r3, [pc, #64]	; (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	0a1b      	lsrs	r3, r3, #8
 8006254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	fb03 f202 	mul.w	r2, r3, r2
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	fbb2 f3f3 	udiv	r3, r2, r3
 8006264:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006266:	4b0a      	ldr	r3, [pc, #40]	; (8006290 <HAL_RCC_GetSysClockFreq+0x108>)
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	0e5b      	lsrs	r3, r3, #25
 800626c:	f003 0303 	and.w	r3, r3, #3
 8006270:	3301      	adds	r3, #1
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	fbb2 f3f3 	udiv	r3, r2, r3
 800627e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006280:	69bb      	ldr	r3, [r7, #24]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3724      	adds	r7, #36	; 0x24
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40021000 	.word	0x40021000
 8006294:	080094bc 	.word	0x080094bc
 8006298:	00f42400 	.word	0x00f42400
 800629c:	007a1200 	.word	0x007a1200

080062a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80062a8:	2300      	movs	r3, #0
 80062aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80062ac:	4b2a      	ldr	r3, [pc, #168]	; (8006358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80062b8:	f7ff fa26 	bl	8005708 <HAL_PWREx_GetVoltageRange>
 80062bc:	6178      	str	r0, [r7, #20]
 80062be:	e014      	b.n	80062ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80062c0:	4b25      	ldr	r3, [pc, #148]	; (8006358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c4:	4a24      	ldr	r2, [pc, #144]	; (8006358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ca:	6593      	str	r3, [r2, #88]	; 0x58
 80062cc:	4b22      	ldr	r3, [pc, #136]	; (8006358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80062d8:	f7ff fa16 	bl	8005708 <HAL_PWREx_GetVoltageRange>
 80062dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80062de:	4b1e      	ldr	r3, [pc, #120]	; (8006358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e2:	4a1d      	ldr	r2, [pc, #116]	; (8006358 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80062e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062f0:	d10b      	bne.n	800630a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b80      	cmp	r3, #128	; 0x80
 80062f6:	d919      	bls.n	800632c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2ba0      	cmp	r3, #160	; 0xa0
 80062fc:	d902      	bls.n	8006304 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80062fe:	2302      	movs	r3, #2
 8006300:	613b      	str	r3, [r7, #16]
 8006302:	e013      	b.n	800632c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006304:	2301      	movs	r3, #1
 8006306:	613b      	str	r3, [r7, #16]
 8006308:	e010      	b.n	800632c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b80      	cmp	r3, #128	; 0x80
 800630e:	d902      	bls.n	8006316 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006310:	2303      	movs	r3, #3
 8006312:	613b      	str	r3, [r7, #16]
 8006314:	e00a      	b.n	800632c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b80      	cmp	r3, #128	; 0x80
 800631a:	d102      	bne.n	8006322 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800631c:	2302      	movs	r3, #2
 800631e:	613b      	str	r3, [r7, #16]
 8006320:	e004      	b.n	800632c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b70      	cmp	r3, #112	; 0x70
 8006326:	d101      	bne.n	800632c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006328:	2301      	movs	r3, #1
 800632a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800632c:	4b0b      	ldr	r3, [pc, #44]	; (800635c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f023 0207 	bic.w	r2, r3, #7
 8006334:	4909      	ldr	r1, [pc, #36]	; (800635c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4313      	orrs	r3, r2
 800633a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800633c:	4b07      	ldr	r3, [pc, #28]	; (800635c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0307 	and.w	r3, r3, #7
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	429a      	cmp	r2, r3
 8006348:	d001      	beq.n	800634e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e000      	b.n	8006350 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40021000 	.word	0x40021000
 800635c:	40022000 	.word	0x40022000

08006360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006368:	2300      	movs	r3, #0
 800636a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800636c:	2300      	movs	r3, #0
 800636e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006378:	2b00      	cmp	r3, #0
 800637a:	d041      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006380:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006384:	d02a      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006386:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800638a:	d824      	bhi.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800638c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006390:	d008      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006392:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006396:	d81e      	bhi.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00a      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800639c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063a0:	d010      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80063a2:	e018      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80063a4:	4b86      	ldr	r3, [pc, #536]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	4a85      	ldr	r2, [pc, #532]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80063b0:	e015      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	3304      	adds	r3, #4
 80063b6:	2100      	movs	r1, #0
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 fabb 	bl	8006934 <RCCEx_PLLSAI1_Config>
 80063be:	4603      	mov	r3, r0
 80063c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80063c2:	e00c      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3320      	adds	r3, #32
 80063c8:	2100      	movs	r1, #0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fba6 	bl	8006b1c <RCCEx_PLLSAI2_Config>
 80063d0:	4603      	mov	r3, r0
 80063d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80063d4:	e003      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	74fb      	strb	r3, [r7, #19]
      break;
 80063da:	e000      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80063dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063de:	7cfb      	ldrb	r3, [r7, #19]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10b      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063e4:	4b76      	ldr	r3, [pc, #472]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063f2:	4973      	ldr	r1, [pc, #460]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80063fa:	e001      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fc:	7cfb      	ldrb	r3, [r7, #19]
 80063fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d041      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006410:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006414:	d02a      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006416:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800641a:	d824      	bhi.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800641c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006420:	d008      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006422:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006426:	d81e      	bhi.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00a      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800642c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006430:	d010      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006432:	e018      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006434:	4b62      	ldr	r3, [pc, #392]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4a61      	ldr	r2, [pc, #388]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800643a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800643e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006440:	e015      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	3304      	adds	r3, #4
 8006446:	2100      	movs	r1, #0
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fa73 	bl	8006934 <RCCEx_PLLSAI1_Config>
 800644e:	4603      	mov	r3, r0
 8006450:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006452:	e00c      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3320      	adds	r3, #32
 8006458:	2100      	movs	r1, #0
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fb5e 	bl	8006b1c <RCCEx_PLLSAI2_Config>
 8006460:	4603      	mov	r3, r0
 8006462:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006464:	e003      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	74fb      	strb	r3, [r7, #19]
      break;
 800646a:	e000      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800646c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800646e:	7cfb      	ldrb	r3, [r7, #19]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10b      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006474:	4b52      	ldr	r3, [pc, #328]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800647a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006482:	494f      	ldr	r1, [pc, #316]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006484:	4313      	orrs	r3, r2
 8006486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800648a:	e001      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648c:	7cfb      	ldrb	r3, [r7, #19]
 800648e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 80a0 	beq.w	80065de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800649e:	2300      	movs	r3, #0
 80064a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80064a2:	4b47      	ldr	r3, [pc, #284]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80064b2:	2300      	movs	r3, #0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00d      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064b8:	4b41      	ldr	r3, [pc, #260]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064bc:	4a40      	ldr	r2, [pc, #256]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c2:	6593      	str	r3, [r2, #88]	; 0x58
 80064c4:	4b3e      	ldr	r3, [pc, #248]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064d0:	2301      	movs	r3, #1
 80064d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064d4:	4b3b      	ldr	r3, [pc, #236]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a3a      	ldr	r2, [pc, #232]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80064da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064e0:	f7fc fabc 	bl	8002a5c <HAL_GetTick>
 80064e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064e6:	e009      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064e8:	f7fc fab8 	bl	8002a5c <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d902      	bls.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	74fb      	strb	r3, [r7, #19]
        break;
 80064fa:	e005      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80064fc:	4b31      	ldr	r3, [pc, #196]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0ef      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006508:	7cfb      	ldrb	r3, [r7, #19]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d15c      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800650e:	4b2c      	ldr	r3, [pc, #176]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006518:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01f      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	429a      	cmp	r2, r3
 800652a:	d019      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800652c:	4b24      	ldr	r3, [pc, #144]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800652e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006536:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006538:	4b21      	ldr	r3, [pc, #132]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653e:	4a20      	ldr	r2, [pc, #128]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006548:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654e:	4a1c      	ldr	r2, [pc, #112]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006558:	4a19      	ldr	r2, [pc, #100]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d016      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656a:	f7fc fa77 	bl	8002a5c <HAL_GetTick>
 800656e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006570:	e00b      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006572:	f7fc fa73 	bl	8002a5c <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006580:	4293      	cmp	r3, r2
 8006582:	d902      	bls.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	74fb      	strb	r3, [r7, #19]
            break;
 8006588:	e006      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800658a:	4b0d      	ldr	r3, [pc, #52]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800658c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0ec      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006598:	7cfb      	ldrb	r3, [r7, #19]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10c      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800659e:	4b08      	ldr	r3, [pc, #32]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065ae:	4904      	ldr	r1, [pc, #16]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80065b6:	e009      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065b8:	7cfb      	ldrb	r3, [r7, #19]
 80065ba:	74bb      	strb	r3, [r7, #18]
 80065bc:	e006      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80065be:	bf00      	nop
 80065c0:	40021000 	.word	0x40021000
 80065c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c8:	7cfb      	ldrb	r3, [r7, #19]
 80065ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065cc:	7c7b      	ldrb	r3, [r7, #17]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d105      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065d2:	4b9e      	ldr	r3, [pc, #632]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d6:	4a9d      	ldr	r2, [pc, #628]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065ea:	4b98      	ldr	r3, [pc, #608]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f0:	f023 0203 	bic.w	r2, r3, #3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	4994      	ldr	r1, [pc, #592]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800660c:	4b8f      	ldr	r3, [pc, #572]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800660e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006612:	f023 020c 	bic.w	r2, r3, #12
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800661a:	498c      	ldr	r1, [pc, #560]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800661c:	4313      	orrs	r3, r2
 800661e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800662e:	4b87      	ldr	r3, [pc, #540]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006634:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663c:	4983      	ldr	r1, [pc, #524]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800663e:	4313      	orrs	r3, r2
 8006640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0308 	and.w	r3, r3, #8
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00a      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006650:	4b7e      	ldr	r3, [pc, #504]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006656:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665e:	497b      	ldr	r1, [pc, #492]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006660:	4313      	orrs	r3, r2
 8006662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0310 	and.w	r3, r3, #16
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006672:	4b76      	ldr	r3, [pc, #472]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006680:	4972      	ldr	r1, [pc, #456]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00a      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006694:	4b6d      	ldr	r3, [pc, #436]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a2:	496a      	ldr	r1, [pc, #424]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066b6:	4b65      	ldr	r3, [pc, #404]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c4:	4961      	ldr	r1, [pc, #388]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00a      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066d8:	4b5c      	ldr	r3, [pc, #368]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e6:	4959      	ldr	r1, [pc, #356]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066fa:	4b54      	ldr	r3, [pc, #336]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006700:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006708:	4950      	ldr	r1, [pc, #320]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800670a:	4313      	orrs	r3, r2
 800670c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00a      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800671c:	4b4b      	ldr	r3, [pc, #300]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800671e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006722:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672a:	4948      	ldr	r1, [pc, #288]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800672c:	4313      	orrs	r3, r2
 800672e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800673e:	4b43      	ldr	r3, [pc, #268]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006744:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800674c:	493f      	ldr	r1, [pc, #252]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800674e:	4313      	orrs	r3, r2
 8006750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d028      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006760:	4b3a      	ldr	r3, [pc, #232]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006766:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800676e:	4937      	ldr	r1, [pc, #220]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006770:	4313      	orrs	r3, r2
 8006772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800677a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800677e:	d106      	bne.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006780:	4b32      	ldr	r3, [pc, #200]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	4a31      	ldr	r2, [pc, #196]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800678a:	60d3      	str	r3, [r2, #12]
 800678c:	e011      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006792:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006796:	d10c      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3304      	adds	r3, #4
 800679c:	2101      	movs	r1, #1
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 f8c8 	bl	8006934 <RCCEx_PLLSAI1_Config>
 80067a4:	4603      	mov	r3, r0
 80067a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80067a8:	7cfb      	ldrb	r3, [r7, #19]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80067ae:	7cfb      	ldrb	r3, [r7, #19]
 80067b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d028      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80067be:	4b23      	ldr	r3, [pc, #140]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067cc:	491f      	ldr	r1, [pc, #124]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067dc:	d106      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067de:	4b1b      	ldr	r3, [pc, #108]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	4a1a      	ldr	r2, [pc, #104]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067e8:	60d3      	str	r3, [r2, #12]
 80067ea:	e011      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067f4:	d10c      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3304      	adds	r3, #4
 80067fa:	2101      	movs	r1, #1
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 f899 	bl	8006934 <RCCEx_PLLSAI1_Config>
 8006802:	4603      	mov	r3, r0
 8006804:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006806:	7cfb      	ldrb	r3, [r7, #19]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800680c:	7cfb      	ldrb	r3, [r7, #19]
 800680e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d02b      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800681c:	4b0b      	ldr	r3, [pc, #44]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800681e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006822:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800682a:	4908      	ldr	r1, [pc, #32]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800682c:	4313      	orrs	r3, r2
 800682e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800683a:	d109      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800683c:	4b03      	ldr	r3, [pc, #12]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	4a02      	ldr	r2, [pc, #8]	; (800684c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006846:	60d3      	str	r3, [r2, #12]
 8006848:	e014      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800684a:	bf00      	nop
 800684c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006858:	d10c      	bne.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3304      	adds	r3, #4
 800685e:	2101      	movs	r1, #1
 8006860:	4618      	mov	r0, r3
 8006862:	f000 f867 	bl	8006934 <RCCEx_PLLSAI1_Config>
 8006866:	4603      	mov	r3, r0
 8006868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800686a:	7cfb      	ldrb	r3, [r7, #19]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006870:	7cfb      	ldrb	r3, [r7, #19]
 8006872:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d02f      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006880:	4b2b      	ldr	r3, [pc, #172]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006886:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800688e:	4928      	ldr	r1, [pc, #160]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006890:	4313      	orrs	r3, r2
 8006892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800689a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800689e:	d10d      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	3304      	adds	r3, #4
 80068a4:	2102      	movs	r1, #2
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 f844 	bl	8006934 <RCCEx_PLLSAI1_Config>
 80068ac:	4603      	mov	r3, r0
 80068ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068b0:	7cfb      	ldrb	r3, [r7, #19]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d014      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80068b6:	7cfb      	ldrb	r3, [r7, #19]
 80068b8:	74bb      	strb	r3, [r7, #18]
 80068ba:	e011      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068c4:	d10c      	bne.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3320      	adds	r3, #32
 80068ca:	2102      	movs	r1, #2
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 f925 	bl	8006b1c <RCCEx_PLLSAI2_Config>
 80068d2:	4603      	mov	r3, r0
 80068d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068d6:	7cfb      	ldrb	r3, [r7, #19]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80068dc:	7cfb      	ldrb	r3, [r7, #19]
 80068de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00a      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068ec:	4b10      	ldr	r3, [pc, #64]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068fa:	490d      	ldr	r1, [pc, #52]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00b      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800690e:	4b08      	ldr	r3, [pc, #32]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006914:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800691e:	4904      	ldr	r1, [pc, #16]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006920:	4313      	orrs	r3, r2
 8006922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006926:	7cbb      	ldrb	r3, [r7, #18]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	40021000 	.word	0x40021000

08006934 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006942:	4b75      	ldr	r3, [pc, #468]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d018      	beq.n	8006980 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800694e:	4b72      	ldr	r3, [pc, #456]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f003 0203 	and.w	r2, r3, #3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	429a      	cmp	r2, r3
 800695c:	d10d      	bne.n	800697a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
       ||
 8006962:	2b00      	cmp	r3, #0
 8006964:	d009      	beq.n	800697a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006966:	4b6c      	ldr	r3, [pc, #432]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	091b      	lsrs	r3, r3, #4
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
       ||
 8006976:	429a      	cmp	r2, r3
 8006978:	d047      	beq.n	8006a0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]
 800697e:	e044      	b.n	8006a0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b03      	cmp	r3, #3
 8006986:	d018      	beq.n	80069ba <RCCEx_PLLSAI1_Config+0x86>
 8006988:	2b03      	cmp	r3, #3
 800698a:	d825      	bhi.n	80069d8 <RCCEx_PLLSAI1_Config+0xa4>
 800698c:	2b01      	cmp	r3, #1
 800698e:	d002      	beq.n	8006996 <RCCEx_PLLSAI1_Config+0x62>
 8006990:	2b02      	cmp	r3, #2
 8006992:	d009      	beq.n	80069a8 <RCCEx_PLLSAI1_Config+0x74>
 8006994:	e020      	b.n	80069d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006996:	4b60      	ldr	r3, [pc, #384]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d11d      	bne.n	80069de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069a6:	e01a      	b.n	80069de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069a8:	4b5b      	ldr	r3, [pc, #364]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d116      	bne.n	80069e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069b8:	e013      	b.n	80069e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80069ba:	4b57      	ldr	r3, [pc, #348]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10f      	bne.n	80069e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80069c6:	4b54      	ldr	r3, [pc, #336]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d109      	bne.n	80069e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069d6:	e006      	b.n	80069e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
      break;
 80069dc:	e004      	b.n	80069e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069de:	bf00      	nop
 80069e0:	e002      	b.n	80069e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069e2:	bf00      	nop
 80069e4:	e000      	b.n	80069e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80069e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10d      	bne.n	8006a0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80069ee:	4b4a      	ldr	r3, [pc, #296]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6819      	ldr	r1, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	430b      	orrs	r3, r1
 8006a04:	4944      	ldr	r1, [pc, #272]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d17d      	bne.n	8006b0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006a10:	4b41      	ldr	r3, [pc, #260]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a40      	ldr	r2, [pc, #256]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a1c:	f7fc f81e 	bl	8002a5c <HAL_GetTick>
 8006a20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a22:	e009      	b.n	8006a38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a24:	f7fc f81a 	bl	8002a5c <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d902      	bls.n	8006a38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	73fb      	strb	r3, [r7, #15]
        break;
 8006a36:	e005      	b.n	8006a44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a38:	4b37      	ldr	r3, [pc, #220]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1ef      	bne.n	8006a24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d160      	bne.n	8006b0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d111      	bne.n	8006a74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a50:	4b31      	ldr	r3, [pc, #196]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6892      	ldr	r2, [r2, #8]
 8006a60:	0211      	lsls	r1, r2, #8
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	68d2      	ldr	r2, [r2, #12]
 8006a66:	0912      	lsrs	r2, r2, #4
 8006a68:	0452      	lsls	r2, r2, #17
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	492a      	ldr	r1, [pc, #168]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	610b      	str	r3, [r1, #16]
 8006a72:	e027      	b.n	8006ac4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d112      	bne.n	8006aa0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a7a:	4b27      	ldr	r3, [pc, #156]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006a82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6892      	ldr	r2, [r2, #8]
 8006a8a:	0211      	lsls	r1, r2, #8
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6912      	ldr	r2, [r2, #16]
 8006a90:	0852      	lsrs	r2, r2, #1
 8006a92:	3a01      	subs	r2, #1
 8006a94:	0552      	lsls	r2, r2, #21
 8006a96:	430a      	orrs	r2, r1
 8006a98:	491f      	ldr	r1, [pc, #124]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	610b      	str	r3, [r1, #16]
 8006a9e:	e011      	b.n	8006ac4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006aa0:	4b1d      	ldr	r3, [pc, #116]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006aa8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	6892      	ldr	r2, [r2, #8]
 8006ab0:	0211      	lsls	r1, r2, #8
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6952      	ldr	r2, [r2, #20]
 8006ab6:	0852      	lsrs	r2, r2, #1
 8006ab8:	3a01      	subs	r2, #1
 8006aba:	0652      	lsls	r2, r2, #25
 8006abc:	430a      	orrs	r2, r1
 8006abe:	4916      	ldr	r1, [pc, #88]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006ac4:	4b14      	ldr	r3, [pc, #80]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a13      	ldr	r2, [pc, #76]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ace:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad0:	f7fb ffc4 	bl	8002a5c <HAL_GetTick>
 8006ad4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ad6:	e009      	b.n	8006aec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ad8:	f7fb ffc0 	bl	8002a5c <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d902      	bls.n	8006aec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	73fb      	strb	r3, [r7, #15]
          break;
 8006aea:	e005      	b.n	8006af8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006aec:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d0ef      	beq.n	8006ad8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d106      	bne.n	8006b0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006afe:	4b06      	ldr	r3, [pc, #24]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b00:	691a      	ldr	r2, [r3, #16]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	4904      	ldr	r1, [pc, #16]	; (8006b18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	40021000 	.word	0x40021000

08006b1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b2a:	4b6a      	ldr	r3, [pc, #424]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d018      	beq.n	8006b68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006b36:	4b67      	ldr	r3, [pc, #412]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f003 0203 	and.w	r2, r3, #3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d10d      	bne.n	8006b62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
       ||
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d009      	beq.n	8006b62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006b4e:	4b61      	ldr	r3, [pc, #388]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	091b      	lsrs	r3, r3, #4
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
       ||
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d047      	beq.n	8006bf2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	73fb      	strb	r3, [r7, #15]
 8006b66:	e044      	b.n	8006bf2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d018      	beq.n	8006ba2 <RCCEx_PLLSAI2_Config+0x86>
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d825      	bhi.n	8006bc0 <RCCEx_PLLSAI2_Config+0xa4>
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d002      	beq.n	8006b7e <RCCEx_PLLSAI2_Config+0x62>
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d009      	beq.n	8006b90 <RCCEx_PLLSAI2_Config+0x74>
 8006b7c:	e020      	b.n	8006bc0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b7e:	4b55      	ldr	r3, [pc, #340]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d11d      	bne.n	8006bc6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b8e:	e01a      	b.n	8006bc6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b90:	4b50      	ldr	r3, [pc, #320]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d116      	bne.n	8006bca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ba0:	e013      	b.n	8006bca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ba2:	4b4c      	ldr	r3, [pc, #304]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10f      	bne.n	8006bce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006bae:	4b49      	ldr	r3, [pc, #292]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d109      	bne.n	8006bce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bbe:	e006      	b.n	8006bce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc4:	e004      	b.n	8006bd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006bc6:	bf00      	nop
 8006bc8:	e002      	b.n	8006bd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006bca:	bf00      	nop
 8006bcc:	e000      	b.n	8006bd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006bce:	bf00      	nop
    }

    if(status == HAL_OK)
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10d      	bne.n	8006bf2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006bd6:	4b3f      	ldr	r3, [pc, #252]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6819      	ldr	r1, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	430b      	orrs	r3, r1
 8006bec:	4939      	ldr	r1, [pc, #228]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d167      	bne.n	8006cc8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006bf8:	4b36      	ldr	r3, [pc, #216]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a35      	ldr	r2, [pc, #212]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c04:	f7fb ff2a 	bl	8002a5c <HAL_GetTick>
 8006c08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006c0a:	e009      	b.n	8006c20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c0c:	f7fb ff26 	bl	8002a5c <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d902      	bls.n	8006c20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	73fb      	strb	r3, [r7, #15]
        break;
 8006c1e:	e005      	b.n	8006c2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006c20:	4b2c      	ldr	r3, [pc, #176]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1ef      	bne.n	8006c0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d14a      	bne.n	8006cc8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d111      	bne.n	8006c5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c38:	4b26      	ldr	r3, [pc, #152]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6892      	ldr	r2, [r2, #8]
 8006c48:	0211      	lsls	r1, r2, #8
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	68d2      	ldr	r2, [r2, #12]
 8006c4e:	0912      	lsrs	r2, r2, #4
 8006c50:	0452      	lsls	r2, r2, #17
 8006c52:	430a      	orrs	r2, r1
 8006c54:	491f      	ldr	r1, [pc, #124]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	614b      	str	r3, [r1, #20]
 8006c5a:	e011      	b.n	8006c80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c5c:	4b1d      	ldr	r3, [pc, #116]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006c64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6892      	ldr	r2, [r2, #8]
 8006c6c:	0211      	lsls	r1, r2, #8
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6912      	ldr	r2, [r2, #16]
 8006c72:	0852      	lsrs	r2, r2, #1
 8006c74:	3a01      	subs	r2, #1
 8006c76:	0652      	lsls	r2, r2, #25
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	4916      	ldr	r1, [pc, #88]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006c80:	4b14      	ldr	r3, [pc, #80]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a13      	ldr	r2, [pc, #76]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c8c:	f7fb fee6 	bl	8002a5c <HAL_GetTick>
 8006c90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c92:	e009      	b.n	8006ca8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c94:	f7fb fee2 	bl	8002a5c <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d902      	bls.n	8006ca8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	73fb      	strb	r3, [r7, #15]
          break;
 8006ca6:	e005      	b.n	8006cb4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0ef      	beq.n	8006c94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006cba:	4b06      	ldr	r3, [pc, #24]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cbc:	695a      	ldr	r2, [r3, #20]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	4904      	ldr	r1, [pc, #16]	; (8006cd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40021000 	.word	0x40021000

08006cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d001      	beq.n	8006cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e04f      	b.n	8006d90 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0201 	orr.w	r2, r2, #1
 8006d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a23      	ldr	r2, [pc, #140]	; (8006d9c <HAL_TIM_Base_Start_IT+0xc4>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d01d      	beq.n	8006d4e <HAL_TIM_Base_Start_IT+0x76>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1a:	d018      	beq.n	8006d4e <HAL_TIM_Base_Start_IT+0x76>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1f      	ldr	r2, [pc, #124]	; (8006da0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d013      	beq.n	8006d4e <HAL_TIM_Base_Start_IT+0x76>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1e      	ldr	r2, [pc, #120]	; (8006da4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00e      	beq.n	8006d4e <HAL_TIM_Base_Start_IT+0x76>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a1c      	ldr	r2, [pc, #112]	; (8006da8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d009      	beq.n	8006d4e <HAL_TIM_Base_Start_IT+0x76>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a1b      	ldr	r2, [pc, #108]	; (8006dac <HAL_TIM_Base_Start_IT+0xd4>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d004      	beq.n	8006d4e <HAL_TIM_Base_Start_IT+0x76>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a19      	ldr	r2, [pc, #100]	; (8006db0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d115      	bne.n	8006d7a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	4b17      	ldr	r3, [pc, #92]	; (8006db4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d56:	4013      	ands	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2b06      	cmp	r3, #6
 8006d5e:	d015      	beq.n	8006d8c <HAL_TIM_Base_Start_IT+0xb4>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d66:	d011      	beq.n	8006d8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0201 	orr.w	r2, r2, #1
 8006d76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d78:	e008      	b.n	8006d8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f042 0201 	orr.w	r2, r2, #1
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	e000      	b.n	8006d8e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	40012c00 	.word	0x40012c00
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40000c00 	.word	0x40000c00
 8006dac:	40013400 	.word	0x40013400
 8006db0:	40014000 	.word	0x40014000
 8006db4:	00010007 	.word	0x00010007

08006db8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e049      	b.n	8006e5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d106      	bne.n	8006de4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f841 	bl	8006e66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3304      	adds	r3, #4
 8006df4:	4619      	mov	r1, r3
 8006df6:	4610      	mov	r0, r2
 8006df8:	f000 fe24 	bl	8007a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
	...

08006e7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d109      	bne.n	8006ea0 <HAL_TIM_PWM_Start+0x24>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	bf14      	ite	ne
 8006e98:	2301      	movne	r3, #1
 8006e9a:	2300      	moveq	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	e03c      	b.n	8006f1a <HAL_TIM_PWM_Start+0x9e>
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d109      	bne.n	8006eba <HAL_TIM_PWM_Start+0x3e>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	bf14      	ite	ne
 8006eb2:	2301      	movne	r3, #1
 8006eb4:	2300      	moveq	r3, #0
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	e02f      	b.n	8006f1a <HAL_TIM_PWM_Start+0x9e>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d109      	bne.n	8006ed4 <HAL_TIM_PWM_Start+0x58>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	bf14      	ite	ne
 8006ecc:	2301      	movne	r3, #1
 8006ece:	2300      	moveq	r3, #0
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	e022      	b.n	8006f1a <HAL_TIM_PWM_Start+0x9e>
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2b0c      	cmp	r3, #12
 8006ed8:	d109      	bne.n	8006eee <HAL_TIM_PWM_Start+0x72>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	bf14      	ite	ne
 8006ee6:	2301      	movne	r3, #1
 8006ee8:	2300      	moveq	r3, #0
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	e015      	b.n	8006f1a <HAL_TIM_PWM_Start+0x9e>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b10      	cmp	r3, #16
 8006ef2:	d109      	bne.n	8006f08 <HAL_TIM_PWM_Start+0x8c>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	bf14      	ite	ne
 8006f00:	2301      	movne	r3, #1
 8006f02:	2300      	moveq	r3, #0
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	e008      	b.n	8006f1a <HAL_TIM_PWM_Start+0x9e>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	bf14      	ite	ne
 8006f14:	2301      	movne	r3, #1
 8006f16:	2300      	moveq	r3, #0
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e09c      	b.n	800705c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d104      	bne.n	8006f32 <HAL_TIM_PWM_Start+0xb6>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f30:	e023      	b.n	8006f7a <HAL_TIM_PWM_Start+0xfe>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d104      	bne.n	8006f42 <HAL_TIM_PWM_Start+0xc6>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f40:	e01b      	b.n	8006f7a <HAL_TIM_PWM_Start+0xfe>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d104      	bne.n	8006f52 <HAL_TIM_PWM_Start+0xd6>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f50:	e013      	b.n	8006f7a <HAL_TIM_PWM_Start+0xfe>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b0c      	cmp	r3, #12
 8006f56:	d104      	bne.n	8006f62 <HAL_TIM_PWM_Start+0xe6>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f60:	e00b      	b.n	8006f7a <HAL_TIM_PWM_Start+0xfe>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b10      	cmp	r3, #16
 8006f66:	d104      	bne.n	8006f72 <HAL_TIM_PWM_Start+0xf6>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f70:	e003      	b.n	8006f7a <HAL_TIM_PWM_Start+0xfe>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2202      	movs	r2, #2
 8006f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f001 f9f2 	bl	800836c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a35      	ldr	r2, [pc, #212]	; (8007064 <HAL_TIM_PWM_Start+0x1e8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d013      	beq.n	8006fba <HAL_TIM_PWM_Start+0x13e>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a34      	ldr	r2, [pc, #208]	; (8007068 <HAL_TIM_PWM_Start+0x1ec>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d00e      	beq.n	8006fba <HAL_TIM_PWM_Start+0x13e>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a32      	ldr	r2, [pc, #200]	; (800706c <HAL_TIM_PWM_Start+0x1f0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d009      	beq.n	8006fba <HAL_TIM_PWM_Start+0x13e>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a31      	ldr	r2, [pc, #196]	; (8007070 <HAL_TIM_PWM_Start+0x1f4>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d004      	beq.n	8006fba <HAL_TIM_PWM_Start+0x13e>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a2f      	ldr	r2, [pc, #188]	; (8007074 <HAL_TIM_PWM_Start+0x1f8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d101      	bne.n	8006fbe <HAL_TIM_PWM_Start+0x142>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e000      	b.n	8006fc0 <HAL_TIM_PWM_Start+0x144>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d007      	beq.n	8006fd4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a22      	ldr	r2, [pc, #136]	; (8007064 <HAL_TIM_PWM_Start+0x1e8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d01d      	beq.n	800701a <HAL_TIM_PWM_Start+0x19e>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe6:	d018      	beq.n	800701a <HAL_TIM_PWM_Start+0x19e>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a22      	ldr	r2, [pc, #136]	; (8007078 <HAL_TIM_PWM_Start+0x1fc>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d013      	beq.n	800701a <HAL_TIM_PWM_Start+0x19e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a21      	ldr	r2, [pc, #132]	; (800707c <HAL_TIM_PWM_Start+0x200>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d00e      	beq.n	800701a <HAL_TIM_PWM_Start+0x19e>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a1f      	ldr	r2, [pc, #124]	; (8007080 <HAL_TIM_PWM_Start+0x204>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d009      	beq.n	800701a <HAL_TIM_PWM_Start+0x19e>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a17      	ldr	r2, [pc, #92]	; (8007068 <HAL_TIM_PWM_Start+0x1ec>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d004      	beq.n	800701a <HAL_TIM_PWM_Start+0x19e>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a15      	ldr	r2, [pc, #84]	; (800706c <HAL_TIM_PWM_Start+0x1f0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d115      	bne.n	8007046 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	4b18      	ldr	r3, [pc, #96]	; (8007084 <HAL_TIM_PWM_Start+0x208>)
 8007022:	4013      	ands	r3, r2
 8007024:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2b06      	cmp	r3, #6
 800702a:	d015      	beq.n	8007058 <HAL_TIM_PWM_Start+0x1dc>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007032:	d011      	beq.n	8007058 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f042 0201 	orr.w	r2, r2, #1
 8007042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007044:	e008      	b.n	8007058 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f042 0201 	orr.w	r2, r2, #1
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	e000      	b.n	800705a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007058:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	40012c00 	.word	0x40012c00
 8007068:	40013400 	.word	0x40013400
 800706c:	40014000 	.word	0x40014000
 8007070:	40014400 	.word	0x40014400
 8007074:	40014800 	.word	0x40014800
 8007078:	40000400 	.word	0x40000400
 800707c:	40000800 	.word	0x40000800
 8007080:	40000c00 	.word	0x40000c00
 8007084:	00010007 	.word	0x00010007

08007088 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e049      	b.n	800712e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d106      	bne.n	80070b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7fb fada 	bl	8002668 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3304      	adds	r3, #4
 80070c4:	4619      	mov	r1, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	f000 fcbc 	bl	8007a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d104      	bne.n	8007156 <HAL_TIM_IC_Start_IT+0x1e>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007152:	b2db      	uxtb	r3, r3
 8007154:	e023      	b.n	800719e <HAL_TIM_IC_Start_IT+0x66>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b04      	cmp	r3, #4
 800715a:	d104      	bne.n	8007166 <HAL_TIM_IC_Start_IT+0x2e>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007162:	b2db      	uxtb	r3, r3
 8007164:	e01b      	b.n	800719e <HAL_TIM_IC_Start_IT+0x66>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d104      	bne.n	8007176 <HAL_TIM_IC_Start_IT+0x3e>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007172:	b2db      	uxtb	r3, r3
 8007174:	e013      	b.n	800719e <HAL_TIM_IC_Start_IT+0x66>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b0c      	cmp	r3, #12
 800717a:	d104      	bne.n	8007186 <HAL_TIM_IC_Start_IT+0x4e>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007182:	b2db      	uxtb	r3, r3
 8007184:	e00b      	b.n	800719e <HAL_TIM_IC_Start_IT+0x66>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b10      	cmp	r3, #16
 800718a:	d104      	bne.n	8007196 <HAL_TIM_IC_Start_IT+0x5e>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007192:	b2db      	uxtb	r3, r3
 8007194:	e003      	b.n	800719e <HAL_TIM_IC_Start_IT+0x66>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800719c:	b2db      	uxtb	r3, r3
 800719e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d104      	bne.n	80071b0 <HAL_TIM_IC_Start_IT+0x78>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	e013      	b.n	80071d8 <HAL_TIM_IC_Start_IT+0xa0>
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	d104      	bne.n	80071c0 <HAL_TIM_IC_Start_IT+0x88>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	e00b      	b.n	80071d8 <HAL_TIM_IC_Start_IT+0xa0>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	d104      	bne.n	80071d0 <HAL_TIM_IC_Start_IT+0x98>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	e003      	b.n	80071d8 <HAL_TIM_IC_Start_IT+0xa0>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80071da:	7bbb      	ldrb	r3, [r7, #14]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d102      	bne.n	80071e6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80071e0:	7b7b      	ldrb	r3, [r7, #13]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d001      	beq.n	80071ea <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e0dd      	b.n	80073a6 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d104      	bne.n	80071fa <HAL_TIM_IC_Start_IT+0xc2>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071f8:	e023      	b.n	8007242 <HAL_TIM_IC_Start_IT+0x10a>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d104      	bne.n	800720a <HAL_TIM_IC_Start_IT+0xd2>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007208:	e01b      	b.n	8007242 <HAL_TIM_IC_Start_IT+0x10a>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b08      	cmp	r3, #8
 800720e:	d104      	bne.n	800721a <HAL_TIM_IC_Start_IT+0xe2>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007218:	e013      	b.n	8007242 <HAL_TIM_IC_Start_IT+0x10a>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b0c      	cmp	r3, #12
 800721e:	d104      	bne.n	800722a <HAL_TIM_IC_Start_IT+0xf2>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007228:	e00b      	b.n	8007242 <HAL_TIM_IC_Start_IT+0x10a>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b10      	cmp	r3, #16
 800722e:	d104      	bne.n	800723a <HAL_TIM_IC_Start_IT+0x102>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007238:	e003      	b.n	8007242 <HAL_TIM_IC_Start_IT+0x10a>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d104      	bne.n	8007252 <HAL_TIM_IC_Start_IT+0x11a>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2202      	movs	r2, #2
 800724c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007250:	e013      	b.n	800727a <HAL_TIM_IC_Start_IT+0x142>
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2b04      	cmp	r3, #4
 8007256:	d104      	bne.n	8007262 <HAL_TIM_IC_Start_IT+0x12a>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007260:	e00b      	b.n	800727a <HAL_TIM_IC_Start_IT+0x142>
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b08      	cmp	r3, #8
 8007266:	d104      	bne.n	8007272 <HAL_TIM_IC_Start_IT+0x13a>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007270:	e003      	b.n	800727a <HAL_TIM_IC_Start_IT+0x142>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2202      	movs	r2, #2
 8007276:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2b0c      	cmp	r3, #12
 800727e:	d841      	bhi.n	8007304 <HAL_TIM_IC_Start_IT+0x1cc>
 8007280:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <HAL_TIM_IC_Start_IT+0x150>)
 8007282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007286:	bf00      	nop
 8007288:	080072bd 	.word	0x080072bd
 800728c:	08007305 	.word	0x08007305
 8007290:	08007305 	.word	0x08007305
 8007294:	08007305 	.word	0x08007305
 8007298:	080072cf 	.word	0x080072cf
 800729c:	08007305 	.word	0x08007305
 80072a0:	08007305 	.word	0x08007305
 80072a4:	08007305 	.word	0x08007305
 80072a8:	080072e1 	.word	0x080072e1
 80072ac:	08007305 	.word	0x08007305
 80072b0:	08007305 	.word	0x08007305
 80072b4:	08007305 	.word	0x08007305
 80072b8:	080072f3 	.word	0x080072f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0202 	orr.w	r2, r2, #2
 80072ca:	60da      	str	r2, [r3, #12]
      break;
 80072cc:	e01d      	b.n	800730a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68da      	ldr	r2, [r3, #12]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f042 0204 	orr.w	r2, r2, #4
 80072dc:	60da      	str	r2, [r3, #12]
      break;
 80072de:	e014      	b.n	800730a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f042 0208 	orr.w	r2, r2, #8
 80072ee:	60da      	str	r2, [r3, #12]
      break;
 80072f0:	e00b      	b.n	800730a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f042 0210 	orr.w	r2, r2, #16
 8007300:	60da      	str	r2, [r3, #12]
      break;
 8007302:	e002      	b.n	800730a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	73fb      	strb	r3, [r7, #15]
      break;
 8007308:	bf00      	nop
  }

  if (status == HAL_OK)
 800730a:	7bfb      	ldrb	r3, [r7, #15]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d149      	bne.n	80073a4 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2201      	movs	r2, #1
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	4618      	mov	r0, r3
 800731a:	f001 f827 	bl	800836c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a23      	ldr	r2, [pc, #140]	; (80073b0 <HAL_TIM_IC_Start_IT+0x278>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d01d      	beq.n	8007364 <HAL_TIM_IC_Start_IT+0x22c>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007330:	d018      	beq.n	8007364 <HAL_TIM_IC_Start_IT+0x22c>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a1f      	ldr	r2, [pc, #124]	; (80073b4 <HAL_TIM_IC_Start_IT+0x27c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d013      	beq.n	8007364 <HAL_TIM_IC_Start_IT+0x22c>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a1d      	ldr	r2, [pc, #116]	; (80073b8 <HAL_TIM_IC_Start_IT+0x280>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d00e      	beq.n	8007364 <HAL_TIM_IC_Start_IT+0x22c>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a1c      	ldr	r2, [pc, #112]	; (80073bc <HAL_TIM_IC_Start_IT+0x284>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d009      	beq.n	8007364 <HAL_TIM_IC_Start_IT+0x22c>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a1a      	ldr	r2, [pc, #104]	; (80073c0 <HAL_TIM_IC_Start_IT+0x288>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d004      	beq.n	8007364 <HAL_TIM_IC_Start_IT+0x22c>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a19      	ldr	r2, [pc, #100]	; (80073c4 <HAL_TIM_IC_Start_IT+0x28c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d115      	bne.n	8007390 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689a      	ldr	r2, [r3, #8]
 800736a:	4b17      	ldr	r3, [pc, #92]	; (80073c8 <HAL_TIM_IC_Start_IT+0x290>)
 800736c:	4013      	ands	r3, r2
 800736e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b06      	cmp	r3, #6
 8007374:	d015      	beq.n	80073a2 <HAL_TIM_IC_Start_IT+0x26a>
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800737c:	d011      	beq.n	80073a2 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f042 0201 	orr.w	r2, r2, #1
 800738c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800738e:	e008      	b.n	80073a2 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f042 0201 	orr.w	r2, r2, #1
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	e000      	b.n	80073a4 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	40012c00 	.word	0x40012c00
 80073b4:	40000400 	.word	0x40000400
 80073b8:	40000800 	.word	0x40000800
 80073bc:	40000c00 	.word	0x40000c00
 80073c0:	40013400 	.word	0x40013400
 80073c4:	40014000 	.word	0x40014000
 80073c8:	00010007 	.word	0x00010007

080073cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d122      	bne.n	8007428 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d11b      	bne.n	8007428 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f06f 0202 	mvn.w	r2, #2
 80073f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	f003 0303 	and.w	r3, r3, #3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7f9 fd86 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 8007414:	e005      	b.n	8007422 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 faf6 	bl	8007a08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fafd 	bl	8007a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f003 0304 	and.w	r3, r3, #4
 8007432:	2b04      	cmp	r3, #4
 8007434:	d122      	bne.n	800747c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f003 0304 	and.w	r3, r3, #4
 8007440:	2b04      	cmp	r3, #4
 8007442:	d11b      	bne.n	800747c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f06f 0204 	mvn.w	r2, #4
 800744c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2202      	movs	r2, #2
 8007452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7f9 fd5c 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 8007468:	e005      	b.n	8007476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 facc 	bl	8007a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fad3 	bl	8007a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	f003 0308 	and.w	r3, r3, #8
 8007486:	2b08      	cmp	r3, #8
 8007488:	d122      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f003 0308 	and.w	r3, r3, #8
 8007494:	2b08      	cmp	r3, #8
 8007496:	d11b      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f06f 0208 	mvn.w	r2, #8
 80074a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2204      	movs	r2, #4
 80074a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7f9 fd32 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 80074bc:	e005      	b.n	80074ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 faa2 	bl	8007a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 faa9 	bl	8007a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0310 	and.w	r3, r3, #16
 80074da:	2b10      	cmp	r3, #16
 80074dc:	d122      	bne.n	8007524 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f003 0310 	and.w	r3, r3, #16
 80074e8:	2b10      	cmp	r3, #16
 80074ea:	d11b      	bne.n	8007524 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0210 	mvn.w	r2, #16
 80074f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2208      	movs	r2, #8
 80074fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7f9 fd08 	bl	8000f20 <HAL_TIM_IC_CaptureCallback>
 8007510:	e005      	b.n	800751e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa78 	bl	8007a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fa7f 	bl	8007a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b01      	cmp	r3, #1
 8007530:	d10e      	bne.n	8007550 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b01      	cmp	r3, #1
 800753e:	d107      	bne.n	8007550 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0201 	mvn.w	r2, #1
 8007548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fa52 	bl	80079f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755a:	2b80      	cmp	r3, #128	; 0x80
 800755c:	d10e      	bne.n	800757c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007568:	2b80      	cmp	r3, #128	; 0x80
 800756a:	d107      	bne.n	800757c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 ffb0 	bl	80084dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800758a:	d10e      	bne.n	80075aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007596:	2b80      	cmp	r3, #128	; 0x80
 8007598:	d107      	bne.n	80075aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80075a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 ffa3 	bl	80084f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b4:	2b40      	cmp	r3, #64	; 0x40
 80075b6:	d10e      	bne.n	80075d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	d107      	bne.n	80075d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fa2d 	bl	8007a30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	f003 0320 	and.w	r3, r3, #32
 80075e0:	2b20      	cmp	r3, #32
 80075e2:	d10e      	bne.n	8007602 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f003 0320 	and.w	r3, r3, #32
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d107      	bne.n	8007602 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f06f 0220 	mvn.w	r2, #32
 80075fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 ff63 	bl	80084c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007602:	bf00      	nop
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b086      	sub	sp, #24
 800760e:	af00      	add	r7, sp, #0
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	60b9      	str	r1, [r7, #8]
 8007614:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007620:	2b01      	cmp	r3, #1
 8007622:	d101      	bne.n	8007628 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007624:	2302      	movs	r3, #2
 8007626:	e088      	b.n	800773a <HAL_TIM_IC_ConfigChannel+0x130>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d11b      	bne.n	800766e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6818      	ldr	r0, [r3, #0]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	6819      	ldr	r1, [r3, #0]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	f000 fd6d 	bl	8008124 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	699a      	ldr	r2, [r3, #24]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 020c 	bic.w	r2, r2, #12
 8007658:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6999      	ldr	r1, [r3, #24]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	689a      	ldr	r2, [r3, #8]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	619a      	str	r2, [r3, #24]
 800766c:	e060      	b.n	8007730 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b04      	cmp	r3, #4
 8007672:	d11c      	bne.n	80076ae <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6818      	ldr	r0, [r3, #0]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	6819      	ldr	r1, [r3, #0]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	f000 fdbc 	bl	8008200 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	699a      	ldr	r2, [r3, #24]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007696:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6999      	ldr	r1, [r3, #24]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	021a      	lsls	r2, r3, #8
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	430a      	orrs	r2, r1
 80076aa:	619a      	str	r2, [r3, #24]
 80076ac:	e040      	b.n	8007730 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b08      	cmp	r3, #8
 80076b2:	d11b      	bne.n	80076ec <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6818      	ldr	r0, [r3, #0]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	6819      	ldr	r1, [r3, #0]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f000 fdd9 	bl	800827a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	69da      	ldr	r2, [r3, #28]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 020c 	bic.w	r2, r2, #12
 80076d6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	69d9      	ldr	r1, [r3, #28]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	689a      	ldr	r2, [r3, #8]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	61da      	str	r2, [r3, #28]
 80076ea:	e021      	b.n	8007730 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b0c      	cmp	r3, #12
 80076f0:	d11c      	bne.n	800772c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6818      	ldr	r0, [r3, #0]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	6819      	ldr	r1, [r3, #0]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f000 fdf6 	bl	80082f2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	69da      	ldr	r2, [r3, #28]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007714:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69d9      	ldr	r1, [r3, #28]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	021a      	lsls	r2, r3, #8
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	61da      	str	r2, [r3, #28]
 800772a:	e001      	b.n	8007730 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007738:	7dfb      	ldrb	r3, [r7, #23]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800775a:	2b01      	cmp	r3, #1
 800775c:	d101      	bne.n	8007762 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800775e:	2302      	movs	r3, #2
 8007760:	e0ff      	b.n	8007962 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b14      	cmp	r3, #20
 800776e:	f200 80f0 	bhi.w	8007952 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007772:	a201      	add	r2, pc, #4	; (adr r2, 8007778 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007778:	080077cd 	.word	0x080077cd
 800777c:	08007953 	.word	0x08007953
 8007780:	08007953 	.word	0x08007953
 8007784:	08007953 	.word	0x08007953
 8007788:	0800780d 	.word	0x0800780d
 800778c:	08007953 	.word	0x08007953
 8007790:	08007953 	.word	0x08007953
 8007794:	08007953 	.word	0x08007953
 8007798:	0800784f 	.word	0x0800784f
 800779c:	08007953 	.word	0x08007953
 80077a0:	08007953 	.word	0x08007953
 80077a4:	08007953 	.word	0x08007953
 80077a8:	0800788f 	.word	0x0800788f
 80077ac:	08007953 	.word	0x08007953
 80077b0:	08007953 	.word	0x08007953
 80077b4:	08007953 	.word	0x08007953
 80077b8:	080078d1 	.word	0x080078d1
 80077bc:	08007953 	.word	0x08007953
 80077c0:	08007953 	.word	0x08007953
 80077c4:	08007953 	.word	0x08007953
 80077c8:	08007911 	.word	0x08007911
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 f9d0 	bl	8007b78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699a      	ldr	r2, [r3, #24]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f042 0208 	orr.w	r2, r2, #8
 80077e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0204 	bic.w	r2, r2, #4
 80077f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6999      	ldr	r1, [r3, #24]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	691a      	ldr	r2, [r3, #16]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	619a      	str	r2, [r3, #24]
      break;
 800780a:	e0a5      	b.n	8007958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68b9      	ldr	r1, [r7, #8]
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fa40 	bl	8007c98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699a      	ldr	r2, [r3, #24]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699a      	ldr	r2, [r3, #24]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6999      	ldr	r1, [r3, #24]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	021a      	lsls	r2, r3, #8
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	619a      	str	r2, [r3, #24]
      break;
 800784c:	e084      	b.n	8007958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	4618      	mov	r0, r3
 8007856:	f000 faa9 	bl	8007dac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	69da      	ldr	r2, [r3, #28]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f042 0208 	orr.w	r2, r2, #8
 8007868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69da      	ldr	r2, [r3, #28]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 0204 	bic.w	r2, r2, #4
 8007878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69d9      	ldr	r1, [r3, #28]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	691a      	ldr	r2, [r3, #16]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	61da      	str	r2, [r3, #28]
      break;
 800788c:	e064      	b.n	8007958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	4618      	mov	r0, r3
 8007896:	f000 fb11 	bl	8007ebc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69da      	ldr	r2, [r3, #28]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69da      	ldr	r2, [r3, #28]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69d9      	ldr	r1, [r3, #28]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	021a      	lsls	r2, r3, #8
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	61da      	str	r2, [r3, #28]
      break;
 80078ce:	e043      	b.n	8007958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68b9      	ldr	r1, [r7, #8]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 fb5a 	bl	8007f90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f042 0208 	orr.w	r2, r2, #8
 80078ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 0204 	bic.w	r2, r2, #4
 80078fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	691a      	ldr	r2, [r3, #16]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800790e:	e023      	b.n	8007958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68b9      	ldr	r1, [r7, #8]
 8007916:	4618      	mov	r0, r3
 8007918:	f000 fb9e 	bl	8008058 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800792a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800793a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	021a      	lsls	r2, r3, #8
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007950:	e002      	b.n	8007958 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	75fb      	strb	r3, [r7, #23]
      break;
 8007956:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007960:	7dfb      	ldrb	r3, [r7, #23]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop

0800796c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2b0c      	cmp	r3, #12
 800797e:	d831      	bhi.n	80079e4 <HAL_TIM_ReadCapturedValue+0x78>
 8007980:	a201      	add	r2, pc, #4	; (adr r2, 8007988 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007986:	bf00      	nop
 8007988:	080079bd 	.word	0x080079bd
 800798c:	080079e5 	.word	0x080079e5
 8007990:	080079e5 	.word	0x080079e5
 8007994:	080079e5 	.word	0x080079e5
 8007998:	080079c7 	.word	0x080079c7
 800799c:	080079e5 	.word	0x080079e5
 80079a0:	080079e5 	.word	0x080079e5
 80079a4:	080079e5 	.word	0x080079e5
 80079a8:	080079d1 	.word	0x080079d1
 80079ac:	080079e5 	.word	0x080079e5
 80079b0:	080079e5 	.word	0x080079e5
 80079b4:	080079e5 	.word	0x080079e5
 80079b8:	080079db 	.word	0x080079db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c2:	60fb      	str	r3, [r7, #12]

      break;
 80079c4:	e00f      	b.n	80079e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	60fb      	str	r3, [r7, #12]

      break;
 80079ce:	e00a      	b.n	80079e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d6:	60fb      	str	r3, [r7, #12]

      break;
 80079d8:	e005      	b.n	80079e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e0:	60fb      	str	r3, [r7, #12]

      break;
 80079e2:	e000      	b.n	80079e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80079e4:	bf00      	nop
  }

  return tmpreg;
 80079e6:	68fb      	ldr	r3, [r7, #12]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a40      	ldr	r2, [pc, #256]	; (8007b58 <TIM_Base_SetConfig+0x114>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d013      	beq.n	8007a84 <TIM_Base_SetConfig+0x40>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a62:	d00f      	beq.n	8007a84 <TIM_Base_SetConfig+0x40>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a3d      	ldr	r2, [pc, #244]	; (8007b5c <TIM_Base_SetConfig+0x118>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d00b      	beq.n	8007a84 <TIM_Base_SetConfig+0x40>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a3c      	ldr	r2, [pc, #240]	; (8007b60 <TIM_Base_SetConfig+0x11c>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d007      	beq.n	8007a84 <TIM_Base_SetConfig+0x40>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a3b      	ldr	r2, [pc, #236]	; (8007b64 <TIM_Base_SetConfig+0x120>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d003      	beq.n	8007a84 <TIM_Base_SetConfig+0x40>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a3a      	ldr	r2, [pc, #232]	; (8007b68 <TIM_Base_SetConfig+0x124>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d108      	bne.n	8007a96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a2f      	ldr	r2, [pc, #188]	; (8007b58 <TIM_Base_SetConfig+0x114>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d01f      	beq.n	8007ade <TIM_Base_SetConfig+0x9a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa4:	d01b      	beq.n	8007ade <TIM_Base_SetConfig+0x9a>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a2c      	ldr	r2, [pc, #176]	; (8007b5c <TIM_Base_SetConfig+0x118>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d017      	beq.n	8007ade <TIM_Base_SetConfig+0x9a>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a2b      	ldr	r2, [pc, #172]	; (8007b60 <TIM_Base_SetConfig+0x11c>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d013      	beq.n	8007ade <TIM_Base_SetConfig+0x9a>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a2a      	ldr	r2, [pc, #168]	; (8007b64 <TIM_Base_SetConfig+0x120>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00f      	beq.n	8007ade <TIM_Base_SetConfig+0x9a>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a29      	ldr	r2, [pc, #164]	; (8007b68 <TIM_Base_SetConfig+0x124>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00b      	beq.n	8007ade <TIM_Base_SetConfig+0x9a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a28      	ldr	r2, [pc, #160]	; (8007b6c <TIM_Base_SetConfig+0x128>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d007      	beq.n	8007ade <TIM_Base_SetConfig+0x9a>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a27      	ldr	r2, [pc, #156]	; (8007b70 <TIM_Base_SetConfig+0x12c>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d003      	beq.n	8007ade <TIM_Base_SetConfig+0x9a>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a26      	ldr	r2, [pc, #152]	; (8007b74 <TIM_Base_SetConfig+0x130>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d108      	bne.n	8007af0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	689a      	ldr	r2, [r3, #8]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a10      	ldr	r2, [pc, #64]	; (8007b58 <TIM_Base_SetConfig+0x114>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d00f      	beq.n	8007b3c <TIM_Base_SetConfig+0xf8>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a12      	ldr	r2, [pc, #72]	; (8007b68 <TIM_Base_SetConfig+0x124>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d00b      	beq.n	8007b3c <TIM_Base_SetConfig+0xf8>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a11      	ldr	r2, [pc, #68]	; (8007b6c <TIM_Base_SetConfig+0x128>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d007      	beq.n	8007b3c <TIM_Base_SetConfig+0xf8>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a10      	ldr	r2, [pc, #64]	; (8007b70 <TIM_Base_SetConfig+0x12c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d003      	beq.n	8007b3c <TIM_Base_SetConfig+0xf8>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a0f      	ldr	r2, [pc, #60]	; (8007b74 <TIM_Base_SetConfig+0x130>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d103      	bne.n	8007b44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	691a      	ldr	r2, [r3, #16]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	615a      	str	r2, [r3, #20]
}
 8007b4a:	bf00      	nop
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	40012c00 	.word	0x40012c00
 8007b5c:	40000400 	.word	0x40000400
 8007b60:	40000800 	.word	0x40000800
 8007b64:	40000c00 	.word	0x40000c00
 8007b68:	40013400 	.word	0x40013400
 8007b6c:	40014000 	.word	0x40014000
 8007b70:	40014400 	.word	0x40014400
 8007b74:	40014800 	.word	0x40014800

08007b78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	f023 0201 	bic.w	r2, r3, #1
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0303 	bic.w	r3, r3, #3
 8007bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f023 0302 	bic.w	r3, r3, #2
 8007bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a2c      	ldr	r2, [pc, #176]	; (8007c84 <TIM_OC1_SetConfig+0x10c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d00f      	beq.n	8007bf8 <TIM_OC1_SetConfig+0x80>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a2b      	ldr	r2, [pc, #172]	; (8007c88 <TIM_OC1_SetConfig+0x110>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00b      	beq.n	8007bf8 <TIM_OC1_SetConfig+0x80>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a2a      	ldr	r2, [pc, #168]	; (8007c8c <TIM_OC1_SetConfig+0x114>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d007      	beq.n	8007bf8 <TIM_OC1_SetConfig+0x80>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a29      	ldr	r2, [pc, #164]	; (8007c90 <TIM_OC1_SetConfig+0x118>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d003      	beq.n	8007bf8 <TIM_OC1_SetConfig+0x80>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a28      	ldr	r2, [pc, #160]	; (8007c94 <TIM_OC1_SetConfig+0x11c>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d10c      	bne.n	8007c12 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f023 0308 	bic.w	r3, r3, #8
 8007bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f023 0304 	bic.w	r3, r3, #4
 8007c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a1b      	ldr	r2, [pc, #108]	; (8007c84 <TIM_OC1_SetConfig+0x10c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d00f      	beq.n	8007c3a <TIM_OC1_SetConfig+0xc2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a1a      	ldr	r2, [pc, #104]	; (8007c88 <TIM_OC1_SetConfig+0x110>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00b      	beq.n	8007c3a <TIM_OC1_SetConfig+0xc2>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a19      	ldr	r2, [pc, #100]	; (8007c8c <TIM_OC1_SetConfig+0x114>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d007      	beq.n	8007c3a <TIM_OC1_SetConfig+0xc2>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a18      	ldr	r2, [pc, #96]	; (8007c90 <TIM_OC1_SetConfig+0x118>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d003      	beq.n	8007c3a <TIM_OC1_SetConfig+0xc2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a17      	ldr	r2, [pc, #92]	; (8007c94 <TIM_OC1_SetConfig+0x11c>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d111      	bne.n	8007c5e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	621a      	str	r2, [r3, #32]
}
 8007c78:	bf00      	nop
 8007c7a:	371c      	adds	r7, #28
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	40012c00 	.word	0x40012c00
 8007c88:	40013400 	.word	0x40013400
 8007c8c:	40014000 	.word	0x40014000
 8007c90:	40014400 	.word	0x40014400
 8007c94:	40014800 	.word	0x40014800

08007c98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	f023 0210 	bic.w	r2, r3, #16
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	021b      	lsls	r3, r3, #8
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	f023 0320 	bic.w	r3, r3, #32
 8007ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	011b      	lsls	r3, r3, #4
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a28      	ldr	r2, [pc, #160]	; (8007d98 <TIM_OC2_SetConfig+0x100>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d003      	beq.n	8007d04 <TIM_OC2_SetConfig+0x6c>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a27      	ldr	r2, [pc, #156]	; (8007d9c <TIM_OC2_SetConfig+0x104>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d10d      	bne.n	8007d20 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	011b      	lsls	r3, r3, #4
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a1d      	ldr	r2, [pc, #116]	; (8007d98 <TIM_OC2_SetConfig+0x100>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d00f      	beq.n	8007d48 <TIM_OC2_SetConfig+0xb0>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a1c      	ldr	r2, [pc, #112]	; (8007d9c <TIM_OC2_SetConfig+0x104>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d00b      	beq.n	8007d48 <TIM_OC2_SetConfig+0xb0>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a1b      	ldr	r2, [pc, #108]	; (8007da0 <TIM_OC2_SetConfig+0x108>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d007      	beq.n	8007d48 <TIM_OC2_SetConfig+0xb0>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a1a      	ldr	r2, [pc, #104]	; (8007da4 <TIM_OC2_SetConfig+0x10c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d003      	beq.n	8007d48 <TIM_OC2_SetConfig+0xb0>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a19      	ldr	r2, [pc, #100]	; (8007da8 <TIM_OC2_SetConfig+0x110>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d113      	bne.n	8007d70 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	621a      	str	r2, [r3, #32]
}
 8007d8a:	bf00      	nop
 8007d8c:	371c      	adds	r7, #28
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	40012c00 	.word	0x40012c00
 8007d9c:	40013400 	.word	0x40013400
 8007da0:	40014000 	.word	0x40014000
 8007da4:	40014400 	.word	0x40014400
 8007da8:	40014800 	.word	0x40014800

08007dac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f023 0303 	bic.w	r3, r3, #3
 8007de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	021b      	lsls	r3, r3, #8
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a27      	ldr	r2, [pc, #156]	; (8007ea8 <TIM_OC3_SetConfig+0xfc>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d003      	beq.n	8007e16 <TIM_OC3_SetConfig+0x6a>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a26      	ldr	r2, [pc, #152]	; (8007eac <TIM_OC3_SetConfig+0x100>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d10d      	bne.n	8007e32 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	021b      	lsls	r3, r3, #8
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a1c      	ldr	r2, [pc, #112]	; (8007ea8 <TIM_OC3_SetConfig+0xfc>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d00f      	beq.n	8007e5a <TIM_OC3_SetConfig+0xae>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a1b      	ldr	r2, [pc, #108]	; (8007eac <TIM_OC3_SetConfig+0x100>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00b      	beq.n	8007e5a <TIM_OC3_SetConfig+0xae>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a1a      	ldr	r2, [pc, #104]	; (8007eb0 <TIM_OC3_SetConfig+0x104>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d007      	beq.n	8007e5a <TIM_OC3_SetConfig+0xae>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a19      	ldr	r2, [pc, #100]	; (8007eb4 <TIM_OC3_SetConfig+0x108>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d003      	beq.n	8007e5a <TIM_OC3_SetConfig+0xae>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a18      	ldr	r2, [pc, #96]	; (8007eb8 <TIM_OC3_SetConfig+0x10c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d113      	bne.n	8007e82 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	011b      	lsls	r3, r3, #4
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	011b      	lsls	r3, r3, #4
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	621a      	str	r2, [r3, #32]
}
 8007e9c:	bf00      	nop
 8007e9e:	371c      	adds	r7, #28
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	40012c00 	.word	0x40012c00
 8007eac:	40013400 	.word	0x40013400
 8007eb0:	40014000 	.word	0x40014000
 8007eb4:	40014400 	.word	0x40014400
 8007eb8:	40014800 	.word	0x40014800

08007ebc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	021b      	lsls	r3, r3, #8
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	031b      	lsls	r3, r3, #12
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a18      	ldr	r2, [pc, #96]	; (8007f7c <TIM_OC4_SetConfig+0xc0>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00f      	beq.n	8007f40 <TIM_OC4_SetConfig+0x84>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a17      	ldr	r2, [pc, #92]	; (8007f80 <TIM_OC4_SetConfig+0xc4>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00b      	beq.n	8007f40 <TIM_OC4_SetConfig+0x84>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a16      	ldr	r2, [pc, #88]	; (8007f84 <TIM_OC4_SetConfig+0xc8>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d007      	beq.n	8007f40 <TIM_OC4_SetConfig+0x84>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a15      	ldr	r2, [pc, #84]	; (8007f88 <TIM_OC4_SetConfig+0xcc>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d003      	beq.n	8007f40 <TIM_OC4_SetConfig+0x84>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a14      	ldr	r2, [pc, #80]	; (8007f8c <TIM_OC4_SetConfig+0xd0>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d109      	bne.n	8007f54 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	019b      	lsls	r3, r3, #6
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	621a      	str	r2, [r3, #32]
}
 8007f6e:	bf00      	nop
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	40012c00 	.word	0x40012c00
 8007f80:	40013400 	.word	0x40013400
 8007f84:	40014000 	.word	0x40014000
 8007f88:	40014400 	.word	0x40014400
 8007f8c:	40014800 	.word	0x40014800

08007f90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007fd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	041b      	lsls	r3, r3, #16
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a17      	ldr	r2, [pc, #92]	; (8008044 <TIM_OC5_SetConfig+0xb4>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00f      	beq.n	800800a <TIM_OC5_SetConfig+0x7a>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a16      	ldr	r2, [pc, #88]	; (8008048 <TIM_OC5_SetConfig+0xb8>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d00b      	beq.n	800800a <TIM_OC5_SetConfig+0x7a>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a15      	ldr	r2, [pc, #84]	; (800804c <TIM_OC5_SetConfig+0xbc>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d007      	beq.n	800800a <TIM_OC5_SetConfig+0x7a>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a14      	ldr	r2, [pc, #80]	; (8008050 <TIM_OC5_SetConfig+0xc0>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d003      	beq.n	800800a <TIM_OC5_SetConfig+0x7a>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a13      	ldr	r2, [pc, #76]	; (8008054 <TIM_OC5_SetConfig+0xc4>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d109      	bne.n	800801e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008010:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	021b      	lsls	r3, r3, #8
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	4313      	orrs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	621a      	str	r2, [r3, #32]
}
 8008038:	bf00      	nop
 800803a:	371c      	adds	r7, #28
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr
 8008044:	40012c00 	.word	0x40012c00
 8008048:	40013400 	.word	0x40013400
 800804c:	40014000 	.word	0x40014000
 8008050:	40014400 	.word	0x40014400
 8008054:	40014800 	.word	0x40014800

08008058 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800808a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	021b      	lsls	r3, r3, #8
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800809e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	051b      	lsls	r3, r3, #20
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a18      	ldr	r2, [pc, #96]	; (8008110 <TIM_OC6_SetConfig+0xb8>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d00f      	beq.n	80080d4 <TIM_OC6_SetConfig+0x7c>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a17      	ldr	r2, [pc, #92]	; (8008114 <TIM_OC6_SetConfig+0xbc>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d00b      	beq.n	80080d4 <TIM_OC6_SetConfig+0x7c>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a16      	ldr	r2, [pc, #88]	; (8008118 <TIM_OC6_SetConfig+0xc0>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d007      	beq.n	80080d4 <TIM_OC6_SetConfig+0x7c>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a15      	ldr	r2, [pc, #84]	; (800811c <TIM_OC6_SetConfig+0xc4>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d003      	beq.n	80080d4 <TIM_OC6_SetConfig+0x7c>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a14      	ldr	r2, [pc, #80]	; (8008120 <TIM_OC6_SetConfig+0xc8>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d109      	bne.n	80080e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	029b      	lsls	r3, r3, #10
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	621a      	str	r2, [r3, #32]
}
 8008102:	bf00      	nop
 8008104:	371c      	adds	r7, #28
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	40012c00 	.word	0x40012c00
 8008114:	40013400 	.word	0x40013400
 8008118:	40014000 	.word	0x40014000
 800811c:	40014400 	.word	0x40014400
 8008120:	40014800 	.word	0x40014800

08008124 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008124:	b480      	push	{r7}
 8008126:	b087      	sub	sp, #28
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	f023 0201 	bic.w	r2, r3, #1
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	4a26      	ldr	r2, [pc, #152]	; (80081e8 <TIM_TI1_SetConfig+0xc4>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d017      	beq.n	8008182 <TIM_TI1_SetConfig+0x5e>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008158:	d013      	beq.n	8008182 <TIM_TI1_SetConfig+0x5e>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	4a23      	ldr	r2, [pc, #140]	; (80081ec <TIM_TI1_SetConfig+0xc8>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00f      	beq.n	8008182 <TIM_TI1_SetConfig+0x5e>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	4a22      	ldr	r2, [pc, #136]	; (80081f0 <TIM_TI1_SetConfig+0xcc>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d00b      	beq.n	8008182 <TIM_TI1_SetConfig+0x5e>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4a21      	ldr	r2, [pc, #132]	; (80081f4 <TIM_TI1_SetConfig+0xd0>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d007      	beq.n	8008182 <TIM_TI1_SetConfig+0x5e>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	4a20      	ldr	r2, [pc, #128]	; (80081f8 <TIM_TI1_SetConfig+0xd4>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d003      	beq.n	8008182 <TIM_TI1_SetConfig+0x5e>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4a1f      	ldr	r2, [pc, #124]	; (80081fc <TIM_TI1_SetConfig+0xd8>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d101      	bne.n	8008186 <TIM_TI1_SetConfig+0x62>
 8008182:	2301      	movs	r3, #1
 8008184:	e000      	b.n	8008188 <TIM_TI1_SetConfig+0x64>
 8008186:	2300      	movs	r3, #0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d008      	beq.n	800819e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f023 0303 	bic.w	r3, r3, #3
 8008192:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4313      	orrs	r3, r2
 800819a:	617b      	str	r3, [r7, #20]
 800819c:	e003      	b.n	80081a6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f043 0301 	orr.w	r3, r3, #1
 80081a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	011b      	lsls	r3, r3, #4
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	f023 030a 	bic.w	r3, r3, #10
 80081c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f003 030a 	and.w	r3, r3, #10
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	621a      	str	r2, [r3, #32]
}
 80081da:	bf00      	nop
 80081dc:	371c      	adds	r7, #28
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	40012c00 	.word	0x40012c00
 80081ec:	40000400 	.word	0x40000400
 80081f0:	40000800 	.word	0x40000800
 80081f4:	40000c00 	.word	0x40000c00
 80081f8:	40013400 	.word	0x40013400
 80081fc:	40014000 	.word	0x40014000

08008200 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
 800820c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	f023 0210 	bic.w	r2, r3, #16
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6a1b      	ldr	r3, [r3, #32]
 8008224:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800822c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	021b      	lsls	r3, r3, #8
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	4313      	orrs	r3, r2
 8008236:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800823e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	031b      	lsls	r3, r3, #12
 8008244:	b29b      	uxth	r3, r3
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	4313      	orrs	r3, r2
 800824a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008252:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	4313      	orrs	r3, r2
 8008260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	697a      	ldr	r2, [r7, #20]
 8008266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	621a      	str	r2, [r3, #32]
}
 800826e:	bf00      	nop
 8008270:	371c      	adds	r7, #28
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800827a:	b480      	push	{r7}
 800827c:	b087      	sub	sp, #28
 800827e:	af00      	add	r7, sp, #0
 8008280:	60f8      	str	r0, [r7, #12]
 8008282:	60b9      	str	r1, [r7, #8]
 8008284:	607a      	str	r2, [r7, #4]
 8008286:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f023 0303 	bic.w	r3, r3, #3
 80082a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	011b      	lsls	r3, r3, #4
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80082ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	021b      	lsls	r3, r3, #8
 80082d0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	621a      	str	r2, [r3, #32]
}
 80082e6:	bf00      	nop
 80082e8:	371c      	adds	r7, #28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b087      	sub	sp, #28
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	60f8      	str	r0, [r7, #12]
 80082fa:	60b9      	str	r1, [r7, #8]
 80082fc:	607a      	str	r2, [r7, #4]
 80082fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6a1b      	ldr	r3, [r3, #32]
 8008304:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	69db      	ldr	r3, [r3, #28]
 8008310:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800831e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	021b      	lsls	r3, r3, #8
 8008324:	697a      	ldr	r2, [r7, #20]
 8008326:	4313      	orrs	r3, r2
 8008328:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008330:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	031b      	lsls	r3, r3, #12
 8008336:	b29b      	uxth	r3, r3
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	4313      	orrs	r3, r2
 800833c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008344:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	031b      	lsls	r3, r3, #12
 800834a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	4313      	orrs	r3, r2
 8008352:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	621a      	str	r2, [r3, #32]
}
 8008360:	bf00      	nop
 8008362:	371c      	adds	r7, #28
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800836c:	b480      	push	{r7}
 800836e:	b087      	sub	sp, #28
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	f003 031f 	and.w	r3, r3, #31
 800837e:	2201      	movs	r2, #1
 8008380:	fa02 f303 	lsl.w	r3, r2, r3
 8008384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a1a      	ldr	r2, [r3, #32]
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	43db      	mvns	r3, r3
 800838e:	401a      	ands	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6a1a      	ldr	r2, [r3, #32]
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	f003 031f 	and.w	r3, r3, #31
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	fa01 f303 	lsl.w	r3, r1, r3
 80083a4:	431a      	orrs	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	621a      	str	r2, [r3, #32]
}
 80083aa:	bf00      	nop
 80083ac:	371c      	adds	r7, #28
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
	...

080083b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d101      	bne.n	80083d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083cc:	2302      	movs	r3, #2
 80083ce:	e068      	b.n	80084a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2202      	movs	r2, #2
 80083dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a2e      	ldr	r2, [pc, #184]	; (80084b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d004      	beq.n	8008404 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a2d      	ldr	r2, [pc, #180]	; (80084b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d108      	bne.n	8008416 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800840a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	4313      	orrs	r3, r2
 8008414:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	4313      	orrs	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a1e      	ldr	r2, [pc, #120]	; (80084b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d01d      	beq.n	8008476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008442:	d018      	beq.n	8008476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a1b      	ldr	r2, [pc, #108]	; (80084b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d013      	beq.n	8008476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a1a      	ldr	r2, [pc, #104]	; (80084bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d00e      	beq.n	8008476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a18      	ldr	r2, [pc, #96]	; (80084c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d009      	beq.n	8008476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a13      	ldr	r2, [pc, #76]	; (80084b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d004      	beq.n	8008476 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a14      	ldr	r2, [pc, #80]	; (80084c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d10c      	bne.n	8008490 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800847c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	4313      	orrs	r3, r2
 8008486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	40012c00 	.word	0x40012c00
 80084b4:	40013400 	.word	0x40013400
 80084b8:	40000400 	.word	0x40000400
 80084bc:	40000800 	.word	0x40000800
 80084c0:	40000c00 	.word	0x40000c00
 80084c4:	40014000 	.word	0x40014000

080084c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <__errno>:
 8008504:	4b01      	ldr	r3, [pc, #4]	; (800850c <__errno+0x8>)
 8008506:	6818      	ldr	r0, [r3, #0]
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	20000030 	.word	0x20000030

08008510 <__libc_init_array>:
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	4d0d      	ldr	r5, [pc, #52]	; (8008548 <__libc_init_array+0x38>)
 8008514:	4c0d      	ldr	r4, [pc, #52]	; (800854c <__libc_init_array+0x3c>)
 8008516:	1b64      	subs	r4, r4, r5
 8008518:	10a4      	asrs	r4, r4, #2
 800851a:	2600      	movs	r6, #0
 800851c:	42a6      	cmp	r6, r4
 800851e:	d109      	bne.n	8008534 <__libc_init_array+0x24>
 8008520:	4d0b      	ldr	r5, [pc, #44]	; (8008550 <__libc_init_array+0x40>)
 8008522:	4c0c      	ldr	r4, [pc, #48]	; (8008554 <__libc_init_array+0x44>)
 8008524:	f000 ffae 	bl	8009484 <_init>
 8008528:	1b64      	subs	r4, r4, r5
 800852a:	10a4      	asrs	r4, r4, #2
 800852c:	2600      	movs	r6, #0
 800852e:	42a6      	cmp	r6, r4
 8008530:	d105      	bne.n	800853e <__libc_init_array+0x2e>
 8008532:	bd70      	pop	{r4, r5, r6, pc}
 8008534:	f855 3b04 	ldr.w	r3, [r5], #4
 8008538:	4798      	blx	r3
 800853a:	3601      	adds	r6, #1
 800853c:	e7ee      	b.n	800851c <__libc_init_array+0xc>
 800853e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008542:	4798      	blx	r3
 8008544:	3601      	adds	r6, #1
 8008546:	e7f2      	b.n	800852e <__libc_init_array+0x1e>
 8008548:	0800958c 	.word	0x0800958c
 800854c:	0800958c 	.word	0x0800958c
 8008550:	0800958c 	.word	0x0800958c
 8008554:	08009590 	.word	0x08009590

08008558 <memset>:
 8008558:	4402      	add	r2, r0
 800855a:	4603      	mov	r3, r0
 800855c:	4293      	cmp	r3, r2
 800855e:	d100      	bne.n	8008562 <memset+0xa>
 8008560:	4770      	bx	lr
 8008562:	f803 1b01 	strb.w	r1, [r3], #1
 8008566:	e7f9      	b.n	800855c <memset+0x4>

08008568 <__sfputc_r>:
 8008568:	6893      	ldr	r3, [r2, #8]
 800856a:	3b01      	subs	r3, #1
 800856c:	2b00      	cmp	r3, #0
 800856e:	b410      	push	{r4}
 8008570:	6093      	str	r3, [r2, #8]
 8008572:	da08      	bge.n	8008586 <__sfputc_r+0x1e>
 8008574:	6994      	ldr	r4, [r2, #24]
 8008576:	42a3      	cmp	r3, r4
 8008578:	db01      	blt.n	800857e <__sfputc_r+0x16>
 800857a:	290a      	cmp	r1, #10
 800857c:	d103      	bne.n	8008586 <__sfputc_r+0x1e>
 800857e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008582:	f000 baf7 	b.w	8008b74 <__swbuf_r>
 8008586:	6813      	ldr	r3, [r2, #0]
 8008588:	1c58      	adds	r0, r3, #1
 800858a:	6010      	str	r0, [r2, #0]
 800858c:	7019      	strb	r1, [r3, #0]
 800858e:	4608      	mov	r0, r1
 8008590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008594:	4770      	bx	lr

08008596 <__sfputs_r>:
 8008596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008598:	4606      	mov	r6, r0
 800859a:	460f      	mov	r7, r1
 800859c:	4614      	mov	r4, r2
 800859e:	18d5      	adds	r5, r2, r3
 80085a0:	42ac      	cmp	r4, r5
 80085a2:	d101      	bne.n	80085a8 <__sfputs_r+0x12>
 80085a4:	2000      	movs	r0, #0
 80085a6:	e007      	b.n	80085b8 <__sfputs_r+0x22>
 80085a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ac:	463a      	mov	r2, r7
 80085ae:	4630      	mov	r0, r6
 80085b0:	f7ff ffda 	bl	8008568 <__sfputc_r>
 80085b4:	1c43      	adds	r3, r0, #1
 80085b6:	d1f3      	bne.n	80085a0 <__sfputs_r+0xa>
 80085b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085bc <_vfiprintf_r>:
 80085bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	460d      	mov	r5, r1
 80085c2:	b09d      	sub	sp, #116	; 0x74
 80085c4:	4614      	mov	r4, r2
 80085c6:	4698      	mov	r8, r3
 80085c8:	4606      	mov	r6, r0
 80085ca:	b118      	cbz	r0, 80085d4 <_vfiprintf_r+0x18>
 80085cc:	6983      	ldr	r3, [r0, #24]
 80085ce:	b90b      	cbnz	r3, 80085d4 <_vfiprintf_r+0x18>
 80085d0:	f000 fcaa 	bl	8008f28 <__sinit>
 80085d4:	4b89      	ldr	r3, [pc, #548]	; (80087fc <_vfiprintf_r+0x240>)
 80085d6:	429d      	cmp	r5, r3
 80085d8:	d11b      	bne.n	8008612 <_vfiprintf_r+0x56>
 80085da:	6875      	ldr	r5, [r6, #4]
 80085dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085de:	07d9      	lsls	r1, r3, #31
 80085e0:	d405      	bmi.n	80085ee <_vfiprintf_r+0x32>
 80085e2:	89ab      	ldrh	r3, [r5, #12]
 80085e4:	059a      	lsls	r2, r3, #22
 80085e6:	d402      	bmi.n	80085ee <_vfiprintf_r+0x32>
 80085e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ea:	f000 fd3b 	bl	8009064 <__retarget_lock_acquire_recursive>
 80085ee:	89ab      	ldrh	r3, [r5, #12]
 80085f0:	071b      	lsls	r3, r3, #28
 80085f2:	d501      	bpl.n	80085f8 <_vfiprintf_r+0x3c>
 80085f4:	692b      	ldr	r3, [r5, #16]
 80085f6:	b9eb      	cbnz	r3, 8008634 <_vfiprintf_r+0x78>
 80085f8:	4629      	mov	r1, r5
 80085fa:	4630      	mov	r0, r6
 80085fc:	f000 fb0c 	bl	8008c18 <__swsetup_r>
 8008600:	b1c0      	cbz	r0, 8008634 <_vfiprintf_r+0x78>
 8008602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008604:	07dc      	lsls	r4, r3, #31
 8008606:	d50e      	bpl.n	8008626 <_vfiprintf_r+0x6a>
 8008608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800860c:	b01d      	add	sp, #116	; 0x74
 800860e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008612:	4b7b      	ldr	r3, [pc, #492]	; (8008800 <_vfiprintf_r+0x244>)
 8008614:	429d      	cmp	r5, r3
 8008616:	d101      	bne.n	800861c <_vfiprintf_r+0x60>
 8008618:	68b5      	ldr	r5, [r6, #8]
 800861a:	e7df      	b.n	80085dc <_vfiprintf_r+0x20>
 800861c:	4b79      	ldr	r3, [pc, #484]	; (8008804 <_vfiprintf_r+0x248>)
 800861e:	429d      	cmp	r5, r3
 8008620:	bf08      	it	eq
 8008622:	68f5      	ldreq	r5, [r6, #12]
 8008624:	e7da      	b.n	80085dc <_vfiprintf_r+0x20>
 8008626:	89ab      	ldrh	r3, [r5, #12]
 8008628:	0598      	lsls	r0, r3, #22
 800862a:	d4ed      	bmi.n	8008608 <_vfiprintf_r+0x4c>
 800862c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800862e:	f000 fd1a 	bl	8009066 <__retarget_lock_release_recursive>
 8008632:	e7e9      	b.n	8008608 <_vfiprintf_r+0x4c>
 8008634:	2300      	movs	r3, #0
 8008636:	9309      	str	r3, [sp, #36]	; 0x24
 8008638:	2320      	movs	r3, #32
 800863a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800863e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008642:	2330      	movs	r3, #48	; 0x30
 8008644:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008808 <_vfiprintf_r+0x24c>
 8008648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800864c:	f04f 0901 	mov.w	r9, #1
 8008650:	4623      	mov	r3, r4
 8008652:	469a      	mov	sl, r3
 8008654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008658:	b10a      	cbz	r2, 800865e <_vfiprintf_r+0xa2>
 800865a:	2a25      	cmp	r2, #37	; 0x25
 800865c:	d1f9      	bne.n	8008652 <_vfiprintf_r+0x96>
 800865e:	ebba 0b04 	subs.w	fp, sl, r4
 8008662:	d00b      	beq.n	800867c <_vfiprintf_r+0xc0>
 8008664:	465b      	mov	r3, fp
 8008666:	4622      	mov	r2, r4
 8008668:	4629      	mov	r1, r5
 800866a:	4630      	mov	r0, r6
 800866c:	f7ff ff93 	bl	8008596 <__sfputs_r>
 8008670:	3001      	adds	r0, #1
 8008672:	f000 80aa 	beq.w	80087ca <_vfiprintf_r+0x20e>
 8008676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008678:	445a      	add	r2, fp
 800867a:	9209      	str	r2, [sp, #36]	; 0x24
 800867c:	f89a 3000 	ldrb.w	r3, [sl]
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 80a2 	beq.w	80087ca <_vfiprintf_r+0x20e>
 8008686:	2300      	movs	r3, #0
 8008688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800868c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008690:	f10a 0a01 	add.w	sl, sl, #1
 8008694:	9304      	str	r3, [sp, #16]
 8008696:	9307      	str	r3, [sp, #28]
 8008698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800869c:	931a      	str	r3, [sp, #104]	; 0x68
 800869e:	4654      	mov	r4, sl
 80086a0:	2205      	movs	r2, #5
 80086a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a6:	4858      	ldr	r0, [pc, #352]	; (8008808 <_vfiprintf_r+0x24c>)
 80086a8:	f7f7 fd92 	bl	80001d0 <memchr>
 80086ac:	9a04      	ldr	r2, [sp, #16]
 80086ae:	b9d8      	cbnz	r0, 80086e8 <_vfiprintf_r+0x12c>
 80086b0:	06d1      	lsls	r1, r2, #27
 80086b2:	bf44      	itt	mi
 80086b4:	2320      	movmi	r3, #32
 80086b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086ba:	0713      	lsls	r3, r2, #28
 80086bc:	bf44      	itt	mi
 80086be:	232b      	movmi	r3, #43	; 0x2b
 80086c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086c4:	f89a 3000 	ldrb.w	r3, [sl]
 80086c8:	2b2a      	cmp	r3, #42	; 0x2a
 80086ca:	d015      	beq.n	80086f8 <_vfiprintf_r+0x13c>
 80086cc:	9a07      	ldr	r2, [sp, #28]
 80086ce:	4654      	mov	r4, sl
 80086d0:	2000      	movs	r0, #0
 80086d2:	f04f 0c0a 	mov.w	ip, #10
 80086d6:	4621      	mov	r1, r4
 80086d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086dc:	3b30      	subs	r3, #48	; 0x30
 80086de:	2b09      	cmp	r3, #9
 80086e0:	d94e      	bls.n	8008780 <_vfiprintf_r+0x1c4>
 80086e2:	b1b0      	cbz	r0, 8008712 <_vfiprintf_r+0x156>
 80086e4:	9207      	str	r2, [sp, #28]
 80086e6:	e014      	b.n	8008712 <_vfiprintf_r+0x156>
 80086e8:	eba0 0308 	sub.w	r3, r0, r8
 80086ec:	fa09 f303 	lsl.w	r3, r9, r3
 80086f0:	4313      	orrs	r3, r2
 80086f2:	9304      	str	r3, [sp, #16]
 80086f4:	46a2      	mov	sl, r4
 80086f6:	e7d2      	b.n	800869e <_vfiprintf_r+0xe2>
 80086f8:	9b03      	ldr	r3, [sp, #12]
 80086fa:	1d19      	adds	r1, r3, #4
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	9103      	str	r1, [sp, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	bfbb      	ittet	lt
 8008704:	425b      	neglt	r3, r3
 8008706:	f042 0202 	orrlt.w	r2, r2, #2
 800870a:	9307      	strge	r3, [sp, #28]
 800870c:	9307      	strlt	r3, [sp, #28]
 800870e:	bfb8      	it	lt
 8008710:	9204      	strlt	r2, [sp, #16]
 8008712:	7823      	ldrb	r3, [r4, #0]
 8008714:	2b2e      	cmp	r3, #46	; 0x2e
 8008716:	d10c      	bne.n	8008732 <_vfiprintf_r+0x176>
 8008718:	7863      	ldrb	r3, [r4, #1]
 800871a:	2b2a      	cmp	r3, #42	; 0x2a
 800871c:	d135      	bne.n	800878a <_vfiprintf_r+0x1ce>
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	1d1a      	adds	r2, r3, #4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	9203      	str	r2, [sp, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	bfb8      	it	lt
 800872a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800872e:	3402      	adds	r4, #2
 8008730:	9305      	str	r3, [sp, #20]
 8008732:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008818 <_vfiprintf_r+0x25c>
 8008736:	7821      	ldrb	r1, [r4, #0]
 8008738:	2203      	movs	r2, #3
 800873a:	4650      	mov	r0, sl
 800873c:	f7f7 fd48 	bl	80001d0 <memchr>
 8008740:	b140      	cbz	r0, 8008754 <_vfiprintf_r+0x198>
 8008742:	2340      	movs	r3, #64	; 0x40
 8008744:	eba0 000a 	sub.w	r0, r0, sl
 8008748:	fa03 f000 	lsl.w	r0, r3, r0
 800874c:	9b04      	ldr	r3, [sp, #16]
 800874e:	4303      	orrs	r3, r0
 8008750:	3401      	adds	r4, #1
 8008752:	9304      	str	r3, [sp, #16]
 8008754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008758:	482c      	ldr	r0, [pc, #176]	; (800880c <_vfiprintf_r+0x250>)
 800875a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800875e:	2206      	movs	r2, #6
 8008760:	f7f7 fd36 	bl	80001d0 <memchr>
 8008764:	2800      	cmp	r0, #0
 8008766:	d03f      	beq.n	80087e8 <_vfiprintf_r+0x22c>
 8008768:	4b29      	ldr	r3, [pc, #164]	; (8008810 <_vfiprintf_r+0x254>)
 800876a:	bb1b      	cbnz	r3, 80087b4 <_vfiprintf_r+0x1f8>
 800876c:	9b03      	ldr	r3, [sp, #12]
 800876e:	3307      	adds	r3, #7
 8008770:	f023 0307 	bic.w	r3, r3, #7
 8008774:	3308      	adds	r3, #8
 8008776:	9303      	str	r3, [sp, #12]
 8008778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800877a:	443b      	add	r3, r7
 800877c:	9309      	str	r3, [sp, #36]	; 0x24
 800877e:	e767      	b.n	8008650 <_vfiprintf_r+0x94>
 8008780:	fb0c 3202 	mla	r2, ip, r2, r3
 8008784:	460c      	mov	r4, r1
 8008786:	2001      	movs	r0, #1
 8008788:	e7a5      	b.n	80086d6 <_vfiprintf_r+0x11a>
 800878a:	2300      	movs	r3, #0
 800878c:	3401      	adds	r4, #1
 800878e:	9305      	str	r3, [sp, #20]
 8008790:	4619      	mov	r1, r3
 8008792:	f04f 0c0a 	mov.w	ip, #10
 8008796:	4620      	mov	r0, r4
 8008798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800879c:	3a30      	subs	r2, #48	; 0x30
 800879e:	2a09      	cmp	r2, #9
 80087a0:	d903      	bls.n	80087aa <_vfiprintf_r+0x1ee>
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0c5      	beq.n	8008732 <_vfiprintf_r+0x176>
 80087a6:	9105      	str	r1, [sp, #20]
 80087a8:	e7c3      	b.n	8008732 <_vfiprintf_r+0x176>
 80087aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80087ae:	4604      	mov	r4, r0
 80087b0:	2301      	movs	r3, #1
 80087b2:	e7f0      	b.n	8008796 <_vfiprintf_r+0x1da>
 80087b4:	ab03      	add	r3, sp, #12
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	462a      	mov	r2, r5
 80087ba:	4b16      	ldr	r3, [pc, #88]	; (8008814 <_vfiprintf_r+0x258>)
 80087bc:	a904      	add	r1, sp, #16
 80087be:	4630      	mov	r0, r6
 80087c0:	f3af 8000 	nop.w
 80087c4:	4607      	mov	r7, r0
 80087c6:	1c78      	adds	r0, r7, #1
 80087c8:	d1d6      	bne.n	8008778 <_vfiprintf_r+0x1bc>
 80087ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087cc:	07d9      	lsls	r1, r3, #31
 80087ce:	d405      	bmi.n	80087dc <_vfiprintf_r+0x220>
 80087d0:	89ab      	ldrh	r3, [r5, #12]
 80087d2:	059a      	lsls	r2, r3, #22
 80087d4:	d402      	bmi.n	80087dc <_vfiprintf_r+0x220>
 80087d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087d8:	f000 fc45 	bl	8009066 <__retarget_lock_release_recursive>
 80087dc:	89ab      	ldrh	r3, [r5, #12]
 80087de:	065b      	lsls	r3, r3, #25
 80087e0:	f53f af12 	bmi.w	8008608 <_vfiprintf_r+0x4c>
 80087e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087e6:	e711      	b.n	800860c <_vfiprintf_r+0x50>
 80087e8:	ab03      	add	r3, sp, #12
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	462a      	mov	r2, r5
 80087ee:	4b09      	ldr	r3, [pc, #36]	; (8008814 <_vfiprintf_r+0x258>)
 80087f0:	a904      	add	r1, sp, #16
 80087f2:	4630      	mov	r0, r6
 80087f4:	f000 f880 	bl	80088f8 <_printf_i>
 80087f8:	e7e4      	b.n	80087c4 <_vfiprintf_r+0x208>
 80087fa:	bf00      	nop
 80087fc:	08009544 	.word	0x08009544
 8008800:	08009564 	.word	0x08009564
 8008804:	08009524 	.word	0x08009524
 8008808:	080094f0 	.word	0x080094f0
 800880c:	080094fa 	.word	0x080094fa
 8008810:	00000000 	.word	0x00000000
 8008814:	08008597 	.word	0x08008597
 8008818:	080094f6 	.word	0x080094f6

0800881c <_printf_common>:
 800881c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008820:	4616      	mov	r6, r2
 8008822:	4699      	mov	r9, r3
 8008824:	688a      	ldr	r2, [r1, #8]
 8008826:	690b      	ldr	r3, [r1, #16]
 8008828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800882c:	4293      	cmp	r3, r2
 800882e:	bfb8      	it	lt
 8008830:	4613      	movlt	r3, r2
 8008832:	6033      	str	r3, [r6, #0]
 8008834:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008838:	4607      	mov	r7, r0
 800883a:	460c      	mov	r4, r1
 800883c:	b10a      	cbz	r2, 8008842 <_printf_common+0x26>
 800883e:	3301      	adds	r3, #1
 8008840:	6033      	str	r3, [r6, #0]
 8008842:	6823      	ldr	r3, [r4, #0]
 8008844:	0699      	lsls	r1, r3, #26
 8008846:	bf42      	ittt	mi
 8008848:	6833      	ldrmi	r3, [r6, #0]
 800884a:	3302      	addmi	r3, #2
 800884c:	6033      	strmi	r3, [r6, #0]
 800884e:	6825      	ldr	r5, [r4, #0]
 8008850:	f015 0506 	ands.w	r5, r5, #6
 8008854:	d106      	bne.n	8008864 <_printf_common+0x48>
 8008856:	f104 0a19 	add.w	sl, r4, #25
 800885a:	68e3      	ldr	r3, [r4, #12]
 800885c:	6832      	ldr	r2, [r6, #0]
 800885e:	1a9b      	subs	r3, r3, r2
 8008860:	42ab      	cmp	r3, r5
 8008862:	dc26      	bgt.n	80088b2 <_printf_common+0x96>
 8008864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008868:	1e13      	subs	r3, r2, #0
 800886a:	6822      	ldr	r2, [r4, #0]
 800886c:	bf18      	it	ne
 800886e:	2301      	movne	r3, #1
 8008870:	0692      	lsls	r2, r2, #26
 8008872:	d42b      	bmi.n	80088cc <_printf_common+0xb0>
 8008874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008878:	4649      	mov	r1, r9
 800887a:	4638      	mov	r0, r7
 800887c:	47c0      	blx	r8
 800887e:	3001      	adds	r0, #1
 8008880:	d01e      	beq.n	80088c0 <_printf_common+0xa4>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	68e5      	ldr	r5, [r4, #12]
 8008886:	6832      	ldr	r2, [r6, #0]
 8008888:	f003 0306 	and.w	r3, r3, #6
 800888c:	2b04      	cmp	r3, #4
 800888e:	bf08      	it	eq
 8008890:	1aad      	subeq	r5, r5, r2
 8008892:	68a3      	ldr	r3, [r4, #8]
 8008894:	6922      	ldr	r2, [r4, #16]
 8008896:	bf0c      	ite	eq
 8008898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800889c:	2500      	movne	r5, #0
 800889e:	4293      	cmp	r3, r2
 80088a0:	bfc4      	itt	gt
 80088a2:	1a9b      	subgt	r3, r3, r2
 80088a4:	18ed      	addgt	r5, r5, r3
 80088a6:	2600      	movs	r6, #0
 80088a8:	341a      	adds	r4, #26
 80088aa:	42b5      	cmp	r5, r6
 80088ac:	d11a      	bne.n	80088e4 <_printf_common+0xc8>
 80088ae:	2000      	movs	r0, #0
 80088b0:	e008      	b.n	80088c4 <_printf_common+0xa8>
 80088b2:	2301      	movs	r3, #1
 80088b4:	4652      	mov	r2, sl
 80088b6:	4649      	mov	r1, r9
 80088b8:	4638      	mov	r0, r7
 80088ba:	47c0      	blx	r8
 80088bc:	3001      	adds	r0, #1
 80088be:	d103      	bne.n	80088c8 <_printf_common+0xac>
 80088c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c8:	3501      	adds	r5, #1
 80088ca:	e7c6      	b.n	800885a <_printf_common+0x3e>
 80088cc:	18e1      	adds	r1, r4, r3
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	2030      	movs	r0, #48	; 0x30
 80088d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088d6:	4422      	add	r2, r4
 80088d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088e0:	3302      	adds	r3, #2
 80088e2:	e7c7      	b.n	8008874 <_printf_common+0x58>
 80088e4:	2301      	movs	r3, #1
 80088e6:	4622      	mov	r2, r4
 80088e8:	4649      	mov	r1, r9
 80088ea:	4638      	mov	r0, r7
 80088ec:	47c0      	blx	r8
 80088ee:	3001      	adds	r0, #1
 80088f0:	d0e6      	beq.n	80088c0 <_printf_common+0xa4>
 80088f2:	3601      	adds	r6, #1
 80088f4:	e7d9      	b.n	80088aa <_printf_common+0x8e>
	...

080088f8 <_printf_i>:
 80088f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088fc:	7e0f      	ldrb	r7, [r1, #24]
 80088fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008900:	2f78      	cmp	r7, #120	; 0x78
 8008902:	4691      	mov	r9, r2
 8008904:	4680      	mov	r8, r0
 8008906:	460c      	mov	r4, r1
 8008908:	469a      	mov	sl, r3
 800890a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800890e:	d807      	bhi.n	8008920 <_printf_i+0x28>
 8008910:	2f62      	cmp	r7, #98	; 0x62
 8008912:	d80a      	bhi.n	800892a <_printf_i+0x32>
 8008914:	2f00      	cmp	r7, #0
 8008916:	f000 80d8 	beq.w	8008aca <_printf_i+0x1d2>
 800891a:	2f58      	cmp	r7, #88	; 0x58
 800891c:	f000 80a3 	beq.w	8008a66 <_printf_i+0x16e>
 8008920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008928:	e03a      	b.n	80089a0 <_printf_i+0xa8>
 800892a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800892e:	2b15      	cmp	r3, #21
 8008930:	d8f6      	bhi.n	8008920 <_printf_i+0x28>
 8008932:	a101      	add	r1, pc, #4	; (adr r1, 8008938 <_printf_i+0x40>)
 8008934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008938:	08008991 	.word	0x08008991
 800893c:	080089a5 	.word	0x080089a5
 8008940:	08008921 	.word	0x08008921
 8008944:	08008921 	.word	0x08008921
 8008948:	08008921 	.word	0x08008921
 800894c:	08008921 	.word	0x08008921
 8008950:	080089a5 	.word	0x080089a5
 8008954:	08008921 	.word	0x08008921
 8008958:	08008921 	.word	0x08008921
 800895c:	08008921 	.word	0x08008921
 8008960:	08008921 	.word	0x08008921
 8008964:	08008ab1 	.word	0x08008ab1
 8008968:	080089d5 	.word	0x080089d5
 800896c:	08008a93 	.word	0x08008a93
 8008970:	08008921 	.word	0x08008921
 8008974:	08008921 	.word	0x08008921
 8008978:	08008ad3 	.word	0x08008ad3
 800897c:	08008921 	.word	0x08008921
 8008980:	080089d5 	.word	0x080089d5
 8008984:	08008921 	.word	0x08008921
 8008988:	08008921 	.word	0x08008921
 800898c:	08008a9b 	.word	0x08008a9b
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	1d1a      	adds	r2, r3, #4
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	602a      	str	r2, [r5, #0]
 8008998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800899c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089a0:	2301      	movs	r3, #1
 80089a2:	e0a3      	b.n	8008aec <_printf_i+0x1f4>
 80089a4:	6820      	ldr	r0, [r4, #0]
 80089a6:	6829      	ldr	r1, [r5, #0]
 80089a8:	0606      	lsls	r6, r0, #24
 80089aa:	f101 0304 	add.w	r3, r1, #4
 80089ae:	d50a      	bpl.n	80089c6 <_printf_i+0xce>
 80089b0:	680e      	ldr	r6, [r1, #0]
 80089b2:	602b      	str	r3, [r5, #0]
 80089b4:	2e00      	cmp	r6, #0
 80089b6:	da03      	bge.n	80089c0 <_printf_i+0xc8>
 80089b8:	232d      	movs	r3, #45	; 0x2d
 80089ba:	4276      	negs	r6, r6
 80089bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089c0:	485e      	ldr	r0, [pc, #376]	; (8008b3c <_printf_i+0x244>)
 80089c2:	230a      	movs	r3, #10
 80089c4:	e019      	b.n	80089fa <_printf_i+0x102>
 80089c6:	680e      	ldr	r6, [r1, #0]
 80089c8:	602b      	str	r3, [r5, #0]
 80089ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089ce:	bf18      	it	ne
 80089d0:	b236      	sxthne	r6, r6
 80089d2:	e7ef      	b.n	80089b4 <_printf_i+0xbc>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	6820      	ldr	r0, [r4, #0]
 80089d8:	1d19      	adds	r1, r3, #4
 80089da:	6029      	str	r1, [r5, #0]
 80089dc:	0601      	lsls	r1, r0, #24
 80089de:	d501      	bpl.n	80089e4 <_printf_i+0xec>
 80089e0:	681e      	ldr	r6, [r3, #0]
 80089e2:	e002      	b.n	80089ea <_printf_i+0xf2>
 80089e4:	0646      	lsls	r6, r0, #25
 80089e6:	d5fb      	bpl.n	80089e0 <_printf_i+0xe8>
 80089e8:	881e      	ldrh	r6, [r3, #0]
 80089ea:	4854      	ldr	r0, [pc, #336]	; (8008b3c <_printf_i+0x244>)
 80089ec:	2f6f      	cmp	r7, #111	; 0x6f
 80089ee:	bf0c      	ite	eq
 80089f0:	2308      	moveq	r3, #8
 80089f2:	230a      	movne	r3, #10
 80089f4:	2100      	movs	r1, #0
 80089f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089fa:	6865      	ldr	r5, [r4, #4]
 80089fc:	60a5      	str	r5, [r4, #8]
 80089fe:	2d00      	cmp	r5, #0
 8008a00:	bfa2      	ittt	ge
 8008a02:	6821      	ldrge	r1, [r4, #0]
 8008a04:	f021 0104 	bicge.w	r1, r1, #4
 8008a08:	6021      	strge	r1, [r4, #0]
 8008a0a:	b90e      	cbnz	r6, 8008a10 <_printf_i+0x118>
 8008a0c:	2d00      	cmp	r5, #0
 8008a0e:	d04d      	beq.n	8008aac <_printf_i+0x1b4>
 8008a10:	4615      	mov	r5, r2
 8008a12:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a16:	fb03 6711 	mls	r7, r3, r1, r6
 8008a1a:	5dc7      	ldrb	r7, [r0, r7]
 8008a1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a20:	4637      	mov	r7, r6
 8008a22:	42bb      	cmp	r3, r7
 8008a24:	460e      	mov	r6, r1
 8008a26:	d9f4      	bls.n	8008a12 <_printf_i+0x11a>
 8008a28:	2b08      	cmp	r3, #8
 8008a2a:	d10b      	bne.n	8008a44 <_printf_i+0x14c>
 8008a2c:	6823      	ldr	r3, [r4, #0]
 8008a2e:	07de      	lsls	r6, r3, #31
 8008a30:	d508      	bpl.n	8008a44 <_printf_i+0x14c>
 8008a32:	6923      	ldr	r3, [r4, #16]
 8008a34:	6861      	ldr	r1, [r4, #4]
 8008a36:	4299      	cmp	r1, r3
 8008a38:	bfde      	ittt	le
 8008a3a:	2330      	movle	r3, #48	; 0x30
 8008a3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008a44:	1b52      	subs	r2, r2, r5
 8008a46:	6122      	str	r2, [r4, #16]
 8008a48:	f8cd a000 	str.w	sl, [sp]
 8008a4c:	464b      	mov	r3, r9
 8008a4e:	aa03      	add	r2, sp, #12
 8008a50:	4621      	mov	r1, r4
 8008a52:	4640      	mov	r0, r8
 8008a54:	f7ff fee2 	bl	800881c <_printf_common>
 8008a58:	3001      	adds	r0, #1
 8008a5a:	d14c      	bne.n	8008af6 <_printf_i+0x1fe>
 8008a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a60:	b004      	add	sp, #16
 8008a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a66:	4835      	ldr	r0, [pc, #212]	; (8008b3c <_printf_i+0x244>)
 8008a68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a6c:	6829      	ldr	r1, [r5, #0]
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a74:	6029      	str	r1, [r5, #0]
 8008a76:	061d      	lsls	r5, r3, #24
 8008a78:	d514      	bpl.n	8008aa4 <_printf_i+0x1ac>
 8008a7a:	07df      	lsls	r7, r3, #31
 8008a7c:	bf44      	itt	mi
 8008a7e:	f043 0320 	orrmi.w	r3, r3, #32
 8008a82:	6023      	strmi	r3, [r4, #0]
 8008a84:	b91e      	cbnz	r6, 8008a8e <_printf_i+0x196>
 8008a86:	6823      	ldr	r3, [r4, #0]
 8008a88:	f023 0320 	bic.w	r3, r3, #32
 8008a8c:	6023      	str	r3, [r4, #0]
 8008a8e:	2310      	movs	r3, #16
 8008a90:	e7b0      	b.n	80089f4 <_printf_i+0xfc>
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	f043 0320 	orr.w	r3, r3, #32
 8008a98:	6023      	str	r3, [r4, #0]
 8008a9a:	2378      	movs	r3, #120	; 0x78
 8008a9c:	4828      	ldr	r0, [pc, #160]	; (8008b40 <_printf_i+0x248>)
 8008a9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008aa2:	e7e3      	b.n	8008a6c <_printf_i+0x174>
 8008aa4:	0659      	lsls	r1, r3, #25
 8008aa6:	bf48      	it	mi
 8008aa8:	b2b6      	uxthmi	r6, r6
 8008aaa:	e7e6      	b.n	8008a7a <_printf_i+0x182>
 8008aac:	4615      	mov	r5, r2
 8008aae:	e7bb      	b.n	8008a28 <_printf_i+0x130>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	6826      	ldr	r6, [r4, #0]
 8008ab4:	6961      	ldr	r1, [r4, #20]
 8008ab6:	1d18      	adds	r0, r3, #4
 8008ab8:	6028      	str	r0, [r5, #0]
 8008aba:	0635      	lsls	r5, r6, #24
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	d501      	bpl.n	8008ac4 <_printf_i+0x1cc>
 8008ac0:	6019      	str	r1, [r3, #0]
 8008ac2:	e002      	b.n	8008aca <_printf_i+0x1d2>
 8008ac4:	0670      	lsls	r0, r6, #25
 8008ac6:	d5fb      	bpl.n	8008ac0 <_printf_i+0x1c8>
 8008ac8:	8019      	strh	r1, [r3, #0]
 8008aca:	2300      	movs	r3, #0
 8008acc:	6123      	str	r3, [r4, #16]
 8008ace:	4615      	mov	r5, r2
 8008ad0:	e7ba      	b.n	8008a48 <_printf_i+0x150>
 8008ad2:	682b      	ldr	r3, [r5, #0]
 8008ad4:	1d1a      	adds	r2, r3, #4
 8008ad6:	602a      	str	r2, [r5, #0]
 8008ad8:	681d      	ldr	r5, [r3, #0]
 8008ada:	6862      	ldr	r2, [r4, #4]
 8008adc:	2100      	movs	r1, #0
 8008ade:	4628      	mov	r0, r5
 8008ae0:	f7f7 fb76 	bl	80001d0 <memchr>
 8008ae4:	b108      	cbz	r0, 8008aea <_printf_i+0x1f2>
 8008ae6:	1b40      	subs	r0, r0, r5
 8008ae8:	6060      	str	r0, [r4, #4]
 8008aea:	6863      	ldr	r3, [r4, #4]
 8008aec:	6123      	str	r3, [r4, #16]
 8008aee:	2300      	movs	r3, #0
 8008af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008af4:	e7a8      	b.n	8008a48 <_printf_i+0x150>
 8008af6:	6923      	ldr	r3, [r4, #16]
 8008af8:	462a      	mov	r2, r5
 8008afa:	4649      	mov	r1, r9
 8008afc:	4640      	mov	r0, r8
 8008afe:	47d0      	blx	sl
 8008b00:	3001      	adds	r0, #1
 8008b02:	d0ab      	beq.n	8008a5c <_printf_i+0x164>
 8008b04:	6823      	ldr	r3, [r4, #0]
 8008b06:	079b      	lsls	r3, r3, #30
 8008b08:	d413      	bmi.n	8008b32 <_printf_i+0x23a>
 8008b0a:	68e0      	ldr	r0, [r4, #12]
 8008b0c:	9b03      	ldr	r3, [sp, #12]
 8008b0e:	4298      	cmp	r0, r3
 8008b10:	bfb8      	it	lt
 8008b12:	4618      	movlt	r0, r3
 8008b14:	e7a4      	b.n	8008a60 <_printf_i+0x168>
 8008b16:	2301      	movs	r3, #1
 8008b18:	4632      	mov	r2, r6
 8008b1a:	4649      	mov	r1, r9
 8008b1c:	4640      	mov	r0, r8
 8008b1e:	47d0      	blx	sl
 8008b20:	3001      	adds	r0, #1
 8008b22:	d09b      	beq.n	8008a5c <_printf_i+0x164>
 8008b24:	3501      	adds	r5, #1
 8008b26:	68e3      	ldr	r3, [r4, #12]
 8008b28:	9903      	ldr	r1, [sp, #12]
 8008b2a:	1a5b      	subs	r3, r3, r1
 8008b2c:	42ab      	cmp	r3, r5
 8008b2e:	dcf2      	bgt.n	8008b16 <_printf_i+0x21e>
 8008b30:	e7eb      	b.n	8008b0a <_printf_i+0x212>
 8008b32:	2500      	movs	r5, #0
 8008b34:	f104 0619 	add.w	r6, r4, #25
 8008b38:	e7f5      	b.n	8008b26 <_printf_i+0x22e>
 8008b3a:	bf00      	nop
 8008b3c:	08009501 	.word	0x08009501
 8008b40:	08009512 	.word	0x08009512

08008b44 <iprintf>:
 8008b44:	b40f      	push	{r0, r1, r2, r3}
 8008b46:	4b0a      	ldr	r3, [pc, #40]	; (8008b70 <iprintf+0x2c>)
 8008b48:	b513      	push	{r0, r1, r4, lr}
 8008b4a:	681c      	ldr	r4, [r3, #0]
 8008b4c:	b124      	cbz	r4, 8008b58 <iprintf+0x14>
 8008b4e:	69a3      	ldr	r3, [r4, #24]
 8008b50:	b913      	cbnz	r3, 8008b58 <iprintf+0x14>
 8008b52:	4620      	mov	r0, r4
 8008b54:	f000 f9e8 	bl	8008f28 <__sinit>
 8008b58:	ab05      	add	r3, sp, #20
 8008b5a:	9a04      	ldr	r2, [sp, #16]
 8008b5c:	68a1      	ldr	r1, [r4, #8]
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	4620      	mov	r0, r4
 8008b62:	f7ff fd2b 	bl	80085bc <_vfiprintf_r>
 8008b66:	b002      	add	sp, #8
 8008b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b6c:	b004      	add	sp, #16
 8008b6e:	4770      	bx	lr
 8008b70:	20000030 	.word	0x20000030

08008b74 <__swbuf_r>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	460e      	mov	r6, r1
 8008b78:	4614      	mov	r4, r2
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	b118      	cbz	r0, 8008b86 <__swbuf_r+0x12>
 8008b7e:	6983      	ldr	r3, [r0, #24]
 8008b80:	b90b      	cbnz	r3, 8008b86 <__swbuf_r+0x12>
 8008b82:	f000 f9d1 	bl	8008f28 <__sinit>
 8008b86:	4b21      	ldr	r3, [pc, #132]	; (8008c0c <__swbuf_r+0x98>)
 8008b88:	429c      	cmp	r4, r3
 8008b8a:	d12b      	bne.n	8008be4 <__swbuf_r+0x70>
 8008b8c:	686c      	ldr	r4, [r5, #4]
 8008b8e:	69a3      	ldr	r3, [r4, #24]
 8008b90:	60a3      	str	r3, [r4, #8]
 8008b92:	89a3      	ldrh	r3, [r4, #12]
 8008b94:	071a      	lsls	r2, r3, #28
 8008b96:	d52f      	bpl.n	8008bf8 <__swbuf_r+0x84>
 8008b98:	6923      	ldr	r3, [r4, #16]
 8008b9a:	b36b      	cbz	r3, 8008bf8 <__swbuf_r+0x84>
 8008b9c:	6923      	ldr	r3, [r4, #16]
 8008b9e:	6820      	ldr	r0, [r4, #0]
 8008ba0:	1ac0      	subs	r0, r0, r3
 8008ba2:	6963      	ldr	r3, [r4, #20]
 8008ba4:	b2f6      	uxtb	r6, r6
 8008ba6:	4283      	cmp	r3, r0
 8008ba8:	4637      	mov	r7, r6
 8008baa:	dc04      	bgt.n	8008bb6 <__swbuf_r+0x42>
 8008bac:	4621      	mov	r1, r4
 8008bae:	4628      	mov	r0, r5
 8008bb0:	f000 f926 	bl	8008e00 <_fflush_r>
 8008bb4:	bb30      	cbnz	r0, 8008c04 <__swbuf_r+0x90>
 8008bb6:	68a3      	ldr	r3, [r4, #8]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	60a3      	str	r3, [r4, #8]
 8008bbc:	6823      	ldr	r3, [r4, #0]
 8008bbe:	1c5a      	adds	r2, r3, #1
 8008bc0:	6022      	str	r2, [r4, #0]
 8008bc2:	701e      	strb	r6, [r3, #0]
 8008bc4:	6963      	ldr	r3, [r4, #20]
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	4283      	cmp	r3, r0
 8008bca:	d004      	beq.n	8008bd6 <__swbuf_r+0x62>
 8008bcc:	89a3      	ldrh	r3, [r4, #12]
 8008bce:	07db      	lsls	r3, r3, #31
 8008bd0:	d506      	bpl.n	8008be0 <__swbuf_r+0x6c>
 8008bd2:	2e0a      	cmp	r6, #10
 8008bd4:	d104      	bne.n	8008be0 <__swbuf_r+0x6c>
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	4628      	mov	r0, r5
 8008bda:	f000 f911 	bl	8008e00 <_fflush_r>
 8008bde:	b988      	cbnz	r0, 8008c04 <__swbuf_r+0x90>
 8008be0:	4638      	mov	r0, r7
 8008be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008be4:	4b0a      	ldr	r3, [pc, #40]	; (8008c10 <__swbuf_r+0x9c>)
 8008be6:	429c      	cmp	r4, r3
 8008be8:	d101      	bne.n	8008bee <__swbuf_r+0x7a>
 8008bea:	68ac      	ldr	r4, [r5, #8]
 8008bec:	e7cf      	b.n	8008b8e <__swbuf_r+0x1a>
 8008bee:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <__swbuf_r+0xa0>)
 8008bf0:	429c      	cmp	r4, r3
 8008bf2:	bf08      	it	eq
 8008bf4:	68ec      	ldreq	r4, [r5, #12]
 8008bf6:	e7ca      	b.n	8008b8e <__swbuf_r+0x1a>
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f000 f80c 	bl	8008c18 <__swsetup_r>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d0cb      	beq.n	8008b9c <__swbuf_r+0x28>
 8008c04:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008c08:	e7ea      	b.n	8008be0 <__swbuf_r+0x6c>
 8008c0a:	bf00      	nop
 8008c0c:	08009544 	.word	0x08009544
 8008c10:	08009564 	.word	0x08009564
 8008c14:	08009524 	.word	0x08009524

08008c18 <__swsetup_r>:
 8008c18:	4b32      	ldr	r3, [pc, #200]	; (8008ce4 <__swsetup_r+0xcc>)
 8008c1a:	b570      	push	{r4, r5, r6, lr}
 8008c1c:	681d      	ldr	r5, [r3, #0]
 8008c1e:	4606      	mov	r6, r0
 8008c20:	460c      	mov	r4, r1
 8008c22:	b125      	cbz	r5, 8008c2e <__swsetup_r+0x16>
 8008c24:	69ab      	ldr	r3, [r5, #24]
 8008c26:	b913      	cbnz	r3, 8008c2e <__swsetup_r+0x16>
 8008c28:	4628      	mov	r0, r5
 8008c2a:	f000 f97d 	bl	8008f28 <__sinit>
 8008c2e:	4b2e      	ldr	r3, [pc, #184]	; (8008ce8 <__swsetup_r+0xd0>)
 8008c30:	429c      	cmp	r4, r3
 8008c32:	d10f      	bne.n	8008c54 <__swsetup_r+0x3c>
 8008c34:	686c      	ldr	r4, [r5, #4]
 8008c36:	89a3      	ldrh	r3, [r4, #12]
 8008c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c3c:	0719      	lsls	r1, r3, #28
 8008c3e:	d42c      	bmi.n	8008c9a <__swsetup_r+0x82>
 8008c40:	06dd      	lsls	r5, r3, #27
 8008c42:	d411      	bmi.n	8008c68 <__swsetup_r+0x50>
 8008c44:	2309      	movs	r3, #9
 8008c46:	6033      	str	r3, [r6, #0]
 8008c48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c4c:	81a3      	strh	r3, [r4, #12]
 8008c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c52:	e03e      	b.n	8008cd2 <__swsetup_r+0xba>
 8008c54:	4b25      	ldr	r3, [pc, #148]	; (8008cec <__swsetup_r+0xd4>)
 8008c56:	429c      	cmp	r4, r3
 8008c58:	d101      	bne.n	8008c5e <__swsetup_r+0x46>
 8008c5a:	68ac      	ldr	r4, [r5, #8]
 8008c5c:	e7eb      	b.n	8008c36 <__swsetup_r+0x1e>
 8008c5e:	4b24      	ldr	r3, [pc, #144]	; (8008cf0 <__swsetup_r+0xd8>)
 8008c60:	429c      	cmp	r4, r3
 8008c62:	bf08      	it	eq
 8008c64:	68ec      	ldreq	r4, [r5, #12]
 8008c66:	e7e6      	b.n	8008c36 <__swsetup_r+0x1e>
 8008c68:	0758      	lsls	r0, r3, #29
 8008c6a:	d512      	bpl.n	8008c92 <__swsetup_r+0x7a>
 8008c6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c6e:	b141      	cbz	r1, 8008c82 <__swsetup_r+0x6a>
 8008c70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c74:	4299      	cmp	r1, r3
 8008c76:	d002      	beq.n	8008c7e <__swsetup_r+0x66>
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f000 fa5b 	bl	8009134 <_free_r>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	6363      	str	r3, [r4, #52]	; 0x34
 8008c82:	89a3      	ldrh	r3, [r4, #12]
 8008c84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c88:	81a3      	strh	r3, [r4, #12]
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	6063      	str	r3, [r4, #4]
 8008c8e:	6923      	ldr	r3, [r4, #16]
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	89a3      	ldrh	r3, [r4, #12]
 8008c94:	f043 0308 	orr.w	r3, r3, #8
 8008c98:	81a3      	strh	r3, [r4, #12]
 8008c9a:	6923      	ldr	r3, [r4, #16]
 8008c9c:	b94b      	cbnz	r3, 8008cb2 <__swsetup_r+0x9a>
 8008c9e:	89a3      	ldrh	r3, [r4, #12]
 8008ca0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ca8:	d003      	beq.n	8008cb2 <__swsetup_r+0x9a>
 8008caa:	4621      	mov	r1, r4
 8008cac:	4630      	mov	r0, r6
 8008cae:	f000 fa01 	bl	80090b4 <__smakebuf_r>
 8008cb2:	89a0      	ldrh	r0, [r4, #12]
 8008cb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cb8:	f010 0301 	ands.w	r3, r0, #1
 8008cbc:	d00a      	beq.n	8008cd4 <__swsetup_r+0xbc>
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60a3      	str	r3, [r4, #8]
 8008cc2:	6963      	ldr	r3, [r4, #20]
 8008cc4:	425b      	negs	r3, r3
 8008cc6:	61a3      	str	r3, [r4, #24]
 8008cc8:	6923      	ldr	r3, [r4, #16]
 8008cca:	b943      	cbnz	r3, 8008cde <__swsetup_r+0xc6>
 8008ccc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cd0:	d1ba      	bne.n	8008c48 <__swsetup_r+0x30>
 8008cd2:	bd70      	pop	{r4, r5, r6, pc}
 8008cd4:	0781      	lsls	r1, r0, #30
 8008cd6:	bf58      	it	pl
 8008cd8:	6963      	ldrpl	r3, [r4, #20]
 8008cda:	60a3      	str	r3, [r4, #8]
 8008cdc:	e7f4      	b.n	8008cc8 <__swsetup_r+0xb0>
 8008cde:	2000      	movs	r0, #0
 8008ce0:	e7f7      	b.n	8008cd2 <__swsetup_r+0xba>
 8008ce2:	bf00      	nop
 8008ce4:	20000030 	.word	0x20000030
 8008ce8:	08009544 	.word	0x08009544
 8008cec:	08009564 	.word	0x08009564
 8008cf0:	08009524 	.word	0x08009524

08008cf4 <__sflush_r>:
 8008cf4:	898a      	ldrh	r2, [r1, #12]
 8008cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	0710      	lsls	r0, r2, #28
 8008cfe:	460c      	mov	r4, r1
 8008d00:	d458      	bmi.n	8008db4 <__sflush_r+0xc0>
 8008d02:	684b      	ldr	r3, [r1, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	dc05      	bgt.n	8008d14 <__sflush_r+0x20>
 8008d08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	dc02      	bgt.n	8008d14 <__sflush_r+0x20>
 8008d0e:	2000      	movs	r0, #0
 8008d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d16:	2e00      	cmp	r6, #0
 8008d18:	d0f9      	beq.n	8008d0e <__sflush_r+0x1a>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d20:	682f      	ldr	r7, [r5, #0]
 8008d22:	602b      	str	r3, [r5, #0]
 8008d24:	d032      	beq.n	8008d8c <__sflush_r+0x98>
 8008d26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	075a      	lsls	r2, r3, #29
 8008d2c:	d505      	bpl.n	8008d3a <__sflush_r+0x46>
 8008d2e:	6863      	ldr	r3, [r4, #4]
 8008d30:	1ac0      	subs	r0, r0, r3
 8008d32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d34:	b10b      	cbz	r3, 8008d3a <__sflush_r+0x46>
 8008d36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d38:	1ac0      	subs	r0, r0, r3
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d40:	6a21      	ldr	r1, [r4, #32]
 8008d42:	4628      	mov	r0, r5
 8008d44:	47b0      	blx	r6
 8008d46:	1c43      	adds	r3, r0, #1
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	d106      	bne.n	8008d5a <__sflush_r+0x66>
 8008d4c:	6829      	ldr	r1, [r5, #0]
 8008d4e:	291d      	cmp	r1, #29
 8008d50:	d82c      	bhi.n	8008dac <__sflush_r+0xb8>
 8008d52:	4a2a      	ldr	r2, [pc, #168]	; (8008dfc <__sflush_r+0x108>)
 8008d54:	40ca      	lsrs	r2, r1
 8008d56:	07d6      	lsls	r6, r2, #31
 8008d58:	d528      	bpl.n	8008dac <__sflush_r+0xb8>
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	6062      	str	r2, [r4, #4]
 8008d5e:	04d9      	lsls	r1, r3, #19
 8008d60:	6922      	ldr	r2, [r4, #16]
 8008d62:	6022      	str	r2, [r4, #0]
 8008d64:	d504      	bpl.n	8008d70 <__sflush_r+0x7c>
 8008d66:	1c42      	adds	r2, r0, #1
 8008d68:	d101      	bne.n	8008d6e <__sflush_r+0x7a>
 8008d6a:	682b      	ldr	r3, [r5, #0]
 8008d6c:	b903      	cbnz	r3, 8008d70 <__sflush_r+0x7c>
 8008d6e:	6560      	str	r0, [r4, #84]	; 0x54
 8008d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d72:	602f      	str	r7, [r5, #0]
 8008d74:	2900      	cmp	r1, #0
 8008d76:	d0ca      	beq.n	8008d0e <__sflush_r+0x1a>
 8008d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d7c:	4299      	cmp	r1, r3
 8008d7e:	d002      	beq.n	8008d86 <__sflush_r+0x92>
 8008d80:	4628      	mov	r0, r5
 8008d82:	f000 f9d7 	bl	8009134 <_free_r>
 8008d86:	2000      	movs	r0, #0
 8008d88:	6360      	str	r0, [r4, #52]	; 0x34
 8008d8a:	e7c1      	b.n	8008d10 <__sflush_r+0x1c>
 8008d8c:	6a21      	ldr	r1, [r4, #32]
 8008d8e:	2301      	movs	r3, #1
 8008d90:	4628      	mov	r0, r5
 8008d92:	47b0      	blx	r6
 8008d94:	1c41      	adds	r1, r0, #1
 8008d96:	d1c7      	bne.n	8008d28 <__sflush_r+0x34>
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d0c4      	beq.n	8008d28 <__sflush_r+0x34>
 8008d9e:	2b1d      	cmp	r3, #29
 8008da0:	d001      	beq.n	8008da6 <__sflush_r+0xb2>
 8008da2:	2b16      	cmp	r3, #22
 8008da4:	d101      	bne.n	8008daa <__sflush_r+0xb6>
 8008da6:	602f      	str	r7, [r5, #0]
 8008da8:	e7b1      	b.n	8008d0e <__sflush_r+0x1a>
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db0:	81a3      	strh	r3, [r4, #12]
 8008db2:	e7ad      	b.n	8008d10 <__sflush_r+0x1c>
 8008db4:	690f      	ldr	r7, [r1, #16]
 8008db6:	2f00      	cmp	r7, #0
 8008db8:	d0a9      	beq.n	8008d0e <__sflush_r+0x1a>
 8008dba:	0793      	lsls	r3, r2, #30
 8008dbc:	680e      	ldr	r6, [r1, #0]
 8008dbe:	bf08      	it	eq
 8008dc0:	694b      	ldreq	r3, [r1, #20]
 8008dc2:	600f      	str	r7, [r1, #0]
 8008dc4:	bf18      	it	ne
 8008dc6:	2300      	movne	r3, #0
 8008dc8:	eba6 0807 	sub.w	r8, r6, r7
 8008dcc:	608b      	str	r3, [r1, #8]
 8008dce:	f1b8 0f00 	cmp.w	r8, #0
 8008dd2:	dd9c      	ble.n	8008d0e <__sflush_r+0x1a>
 8008dd4:	6a21      	ldr	r1, [r4, #32]
 8008dd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008dd8:	4643      	mov	r3, r8
 8008dda:	463a      	mov	r2, r7
 8008ddc:	4628      	mov	r0, r5
 8008dde:	47b0      	blx	r6
 8008de0:	2800      	cmp	r0, #0
 8008de2:	dc06      	bgt.n	8008df2 <__sflush_r+0xfe>
 8008de4:	89a3      	ldrh	r3, [r4, #12]
 8008de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dea:	81a3      	strh	r3, [r4, #12]
 8008dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008df0:	e78e      	b.n	8008d10 <__sflush_r+0x1c>
 8008df2:	4407      	add	r7, r0
 8008df4:	eba8 0800 	sub.w	r8, r8, r0
 8008df8:	e7e9      	b.n	8008dce <__sflush_r+0xda>
 8008dfa:	bf00      	nop
 8008dfc:	20400001 	.word	0x20400001

08008e00 <_fflush_r>:
 8008e00:	b538      	push	{r3, r4, r5, lr}
 8008e02:	690b      	ldr	r3, [r1, #16]
 8008e04:	4605      	mov	r5, r0
 8008e06:	460c      	mov	r4, r1
 8008e08:	b913      	cbnz	r3, 8008e10 <_fflush_r+0x10>
 8008e0a:	2500      	movs	r5, #0
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	bd38      	pop	{r3, r4, r5, pc}
 8008e10:	b118      	cbz	r0, 8008e1a <_fflush_r+0x1a>
 8008e12:	6983      	ldr	r3, [r0, #24]
 8008e14:	b90b      	cbnz	r3, 8008e1a <_fflush_r+0x1a>
 8008e16:	f000 f887 	bl	8008f28 <__sinit>
 8008e1a:	4b14      	ldr	r3, [pc, #80]	; (8008e6c <_fflush_r+0x6c>)
 8008e1c:	429c      	cmp	r4, r3
 8008e1e:	d11b      	bne.n	8008e58 <_fflush_r+0x58>
 8008e20:	686c      	ldr	r4, [r5, #4]
 8008e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d0ef      	beq.n	8008e0a <_fflush_r+0xa>
 8008e2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e2c:	07d0      	lsls	r0, r2, #31
 8008e2e:	d404      	bmi.n	8008e3a <_fflush_r+0x3a>
 8008e30:	0599      	lsls	r1, r3, #22
 8008e32:	d402      	bmi.n	8008e3a <_fflush_r+0x3a>
 8008e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e36:	f000 f915 	bl	8009064 <__retarget_lock_acquire_recursive>
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	4621      	mov	r1, r4
 8008e3e:	f7ff ff59 	bl	8008cf4 <__sflush_r>
 8008e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e44:	07da      	lsls	r2, r3, #31
 8008e46:	4605      	mov	r5, r0
 8008e48:	d4e0      	bmi.n	8008e0c <_fflush_r+0xc>
 8008e4a:	89a3      	ldrh	r3, [r4, #12]
 8008e4c:	059b      	lsls	r3, r3, #22
 8008e4e:	d4dd      	bmi.n	8008e0c <_fflush_r+0xc>
 8008e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e52:	f000 f908 	bl	8009066 <__retarget_lock_release_recursive>
 8008e56:	e7d9      	b.n	8008e0c <_fflush_r+0xc>
 8008e58:	4b05      	ldr	r3, [pc, #20]	; (8008e70 <_fflush_r+0x70>)
 8008e5a:	429c      	cmp	r4, r3
 8008e5c:	d101      	bne.n	8008e62 <_fflush_r+0x62>
 8008e5e:	68ac      	ldr	r4, [r5, #8]
 8008e60:	e7df      	b.n	8008e22 <_fflush_r+0x22>
 8008e62:	4b04      	ldr	r3, [pc, #16]	; (8008e74 <_fflush_r+0x74>)
 8008e64:	429c      	cmp	r4, r3
 8008e66:	bf08      	it	eq
 8008e68:	68ec      	ldreq	r4, [r5, #12]
 8008e6a:	e7da      	b.n	8008e22 <_fflush_r+0x22>
 8008e6c:	08009544 	.word	0x08009544
 8008e70:	08009564 	.word	0x08009564
 8008e74:	08009524 	.word	0x08009524

08008e78 <std>:
 8008e78:	2300      	movs	r3, #0
 8008e7a:	b510      	push	{r4, lr}
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e86:	6083      	str	r3, [r0, #8]
 8008e88:	8181      	strh	r1, [r0, #12]
 8008e8a:	6643      	str	r3, [r0, #100]	; 0x64
 8008e8c:	81c2      	strh	r2, [r0, #14]
 8008e8e:	6183      	str	r3, [r0, #24]
 8008e90:	4619      	mov	r1, r3
 8008e92:	2208      	movs	r2, #8
 8008e94:	305c      	adds	r0, #92	; 0x5c
 8008e96:	f7ff fb5f 	bl	8008558 <memset>
 8008e9a:	4b05      	ldr	r3, [pc, #20]	; (8008eb0 <std+0x38>)
 8008e9c:	6263      	str	r3, [r4, #36]	; 0x24
 8008e9e:	4b05      	ldr	r3, [pc, #20]	; (8008eb4 <std+0x3c>)
 8008ea0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ea2:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <std+0x40>)
 8008ea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ea6:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <std+0x44>)
 8008ea8:	6224      	str	r4, [r4, #32]
 8008eaa:	6323      	str	r3, [r4, #48]	; 0x30
 8008eac:	bd10      	pop	{r4, pc}
 8008eae:	bf00      	nop
 8008eb0:	08009315 	.word	0x08009315
 8008eb4:	08009337 	.word	0x08009337
 8008eb8:	0800936f 	.word	0x0800936f
 8008ebc:	08009393 	.word	0x08009393

08008ec0 <_cleanup_r>:
 8008ec0:	4901      	ldr	r1, [pc, #4]	; (8008ec8 <_cleanup_r+0x8>)
 8008ec2:	f000 b8af 	b.w	8009024 <_fwalk_reent>
 8008ec6:	bf00      	nop
 8008ec8:	08008e01 	.word	0x08008e01

08008ecc <__sfmoreglue>:
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	2268      	movs	r2, #104	; 0x68
 8008ed0:	1e4d      	subs	r5, r1, #1
 8008ed2:	4355      	muls	r5, r2
 8008ed4:	460e      	mov	r6, r1
 8008ed6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008eda:	f000 f997 	bl	800920c <_malloc_r>
 8008ede:	4604      	mov	r4, r0
 8008ee0:	b140      	cbz	r0, 8008ef4 <__sfmoreglue+0x28>
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	e9c0 1600 	strd	r1, r6, [r0]
 8008ee8:	300c      	adds	r0, #12
 8008eea:	60a0      	str	r0, [r4, #8]
 8008eec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ef0:	f7ff fb32 	bl	8008558 <memset>
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}

08008ef8 <__sfp_lock_acquire>:
 8008ef8:	4801      	ldr	r0, [pc, #4]	; (8008f00 <__sfp_lock_acquire+0x8>)
 8008efa:	f000 b8b3 	b.w	8009064 <__retarget_lock_acquire_recursive>
 8008efe:	bf00      	nop
 8008f00:	20000271 	.word	0x20000271

08008f04 <__sfp_lock_release>:
 8008f04:	4801      	ldr	r0, [pc, #4]	; (8008f0c <__sfp_lock_release+0x8>)
 8008f06:	f000 b8ae 	b.w	8009066 <__retarget_lock_release_recursive>
 8008f0a:	bf00      	nop
 8008f0c:	20000271 	.word	0x20000271

08008f10 <__sinit_lock_acquire>:
 8008f10:	4801      	ldr	r0, [pc, #4]	; (8008f18 <__sinit_lock_acquire+0x8>)
 8008f12:	f000 b8a7 	b.w	8009064 <__retarget_lock_acquire_recursive>
 8008f16:	bf00      	nop
 8008f18:	20000272 	.word	0x20000272

08008f1c <__sinit_lock_release>:
 8008f1c:	4801      	ldr	r0, [pc, #4]	; (8008f24 <__sinit_lock_release+0x8>)
 8008f1e:	f000 b8a2 	b.w	8009066 <__retarget_lock_release_recursive>
 8008f22:	bf00      	nop
 8008f24:	20000272 	.word	0x20000272

08008f28 <__sinit>:
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	f7ff fff0 	bl	8008f10 <__sinit_lock_acquire>
 8008f30:	69a3      	ldr	r3, [r4, #24]
 8008f32:	b11b      	cbz	r3, 8008f3c <__sinit+0x14>
 8008f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f38:	f7ff bff0 	b.w	8008f1c <__sinit_lock_release>
 8008f3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f40:	6523      	str	r3, [r4, #80]	; 0x50
 8008f42:	4b13      	ldr	r3, [pc, #76]	; (8008f90 <__sinit+0x68>)
 8008f44:	4a13      	ldr	r2, [pc, #76]	; (8008f94 <__sinit+0x6c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f4a:	42a3      	cmp	r3, r4
 8008f4c:	bf04      	itt	eq
 8008f4e:	2301      	moveq	r3, #1
 8008f50:	61a3      	streq	r3, [r4, #24]
 8008f52:	4620      	mov	r0, r4
 8008f54:	f000 f820 	bl	8008f98 <__sfp>
 8008f58:	6060      	str	r0, [r4, #4]
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f000 f81c 	bl	8008f98 <__sfp>
 8008f60:	60a0      	str	r0, [r4, #8]
 8008f62:	4620      	mov	r0, r4
 8008f64:	f000 f818 	bl	8008f98 <__sfp>
 8008f68:	2200      	movs	r2, #0
 8008f6a:	60e0      	str	r0, [r4, #12]
 8008f6c:	2104      	movs	r1, #4
 8008f6e:	6860      	ldr	r0, [r4, #4]
 8008f70:	f7ff ff82 	bl	8008e78 <std>
 8008f74:	68a0      	ldr	r0, [r4, #8]
 8008f76:	2201      	movs	r2, #1
 8008f78:	2109      	movs	r1, #9
 8008f7a:	f7ff ff7d 	bl	8008e78 <std>
 8008f7e:	68e0      	ldr	r0, [r4, #12]
 8008f80:	2202      	movs	r2, #2
 8008f82:	2112      	movs	r1, #18
 8008f84:	f7ff ff78 	bl	8008e78 <std>
 8008f88:	2301      	movs	r3, #1
 8008f8a:	61a3      	str	r3, [r4, #24]
 8008f8c:	e7d2      	b.n	8008f34 <__sinit+0xc>
 8008f8e:	bf00      	nop
 8008f90:	080094ec 	.word	0x080094ec
 8008f94:	08008ec1 	.word	0x08008ec1

08008f98 <__sfp>:
 8008f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9a:	4607      	mov	r7, r0
 8008f9c:	f7ff ffac 	bl	8008ef8 <__sfp_lock_acquire>
 8008fa0:	4b1e      	ldr	r3, [pc, #120]	; (800901c <__sfp+0x84>)
 8008fa2:	681e      	ldr	r6, [r3, #0]
 8008fa4:	69b3      	ldr	r3, [r6, #24]
 8008fa6:	b913      	cbnz	r3, 8008fae <__sfp+0x16>
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f7ff ffbd 	bl	8008f28 <__sinit>
 8008fae:	3648      	adds	r6, #72	; 0x48
 8008fb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	d503      	bpl.n	8008fc0 <__sfp+0x28>
 8008fb8:	6833      	ldr	r3, [r6, #0]
 8008fba:	b30b      	cbz	r3, 8009000 <__sfp+0x68>
 8008fbc:	6836      	ldr	r6, [r6, #0]
 8008fbe:	e7f7      	b.n	8008fb0 <__sfp+0x18>
 8008fc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008fc4:	b9d5      	cbnz	r5, 8008ffc <__sfp+0x64>
 8008fc6:	4b16      	ldr	r3, [pc, #88]	; (8009020 <__sfp+0x88>)
 8008fc8:	60e3      	str	r3, [r4, #12]
 8008fca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fce:	6665      	str	r5, [r4, #100]	; 0x64
 8008fd0:	f000 f847 	bl	8009062 <__retarget_lock_init_recursive>
 8008fd4:	f7ff ff96 	bl	8008f04 <__sfp_lock_release>
 8008fd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008fdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008fe0:	6025      	str	r5, [r4, #0]
 8008fe2:	61a5      	str	r5, [r4, #24]
 8008fe4:	2208      	movs	r2, #8
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008fec:	f7ff fab4 	bl	8008558 <memset>
 8008ff0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ff4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ffc:	3468      	adds	r4, #104	; 0x68
 8008ffe:	e7d9      	b.n	8008fb4 <__sfp+0x1c>
 8009000:	2104      	movs	r1, #4
 8009002:	4638      	mov	r0, r7
 8009004:	f7ff ff62 	bl	8008ecc <__sfmoreglue>
 8009008:	4604      	mov	r4, r0
 800900a:	6030      	str	r0, [r6, #0]
 800900c:	2800      	cmp	r0, #0
 800900e:	d1d5      	bne.n	8008fbc <__sfp+0x24>
 8009010:	f7ff ff78 	bl	8008f04 <__sfp_lock_release>
 8009014:	230c      	movs	r3, #12
 8009016:	603b      	str	r3, [r7, #0]
 8009018:	e7ee      	b.n	8008ff8 <__sfp+0x60>
 800901a:	bf00      	nop
 800901c:	080094ec 	.word	0x080094ec
 8009020:	ffff0001 	.word	0xffff0001

08009024 <_fwalk_reent>:
 8009024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009028:	4606      	mov	r6, r0
 800902a:	4688      	mov	r8, r1
 800902c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009030:	2700      	movs	r7, #0
 8009032:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009036:	f1b9 0901 	subs.w	r9, r9, #1
 800903a:	d505      	bpl.n	8009048 <_fwalk_reent+0x24>
 800903c:	6824      	ldr	r4, [r4, #0]
 800903e:	2c00      	cmp	r4, #0
 8009040:	d1f7      	bne.n	8009032 <_fwalk_reent+0xe>
 8009042:	4638      	mov	r0, r7
 8009044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009048:	89ab      	ldrh	r3, [r5, #12]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d907      	bls.n	800905e <_fwalk_reent+0x3a>
 800904e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009052:	3301      	adds	r3, #1
 8009054:	d003      	beq.n	800905e <_fwalk_reent+0x3a>
 8009056:	4629      	mov	r1, r5
 8009058:	4630      	mov	r0, r6
 800905a:	47c0      	blx	r8
 800905c:	4307      	orrs	r7, r0
 800905e:	3568      	adds	r5, #104	; 0x68
 8009060:	e7e9      	b.n	8009036 <_fwalk_reent+0x12>

08009062 <__retarget_lock_init_recursive>:
 8009062:	4770      	bx	lr

08009064 <__retarget_lock_acquire_recursive>:
 8009064:	4770      	bx	lr

08009066 <__retarget_lock_release_recursive>:
 8009066:	4770      	bx	lr

08009068 <__swhatbuf_r>:
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	460e      	mov	r6, r1
 800906c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009070:	2900      	cmp	r1, #0
 8009072:	b096      	sub	sp, #88	; 0x58
 8009074:	4614      	mov	r4, r2
 8009076:	461d      	mov	r5, r3
 8009078:	da08      	bge.n	800908c <__swhatbuf_r+0x24>
 800907a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	602a      	str	r2, [r5, #0]
 8009082:	061a      	lsls	r2, r3, #24
 8009084:	d410      	bmi.n	80090a8 <__swhatbuf_r+0x40>
 8009086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800908a:	e00e      	b.n	80090aa <__swhatbuf_r+0x42>
 800908c:	466a      	mov	r2, sp
 800908e:	f000 f9a7 	bl	80093e0 <_fstat_r>
 8009092:	2800      	cmp	r0, #0
 8009094:	dbf1      	blt.n	800907a <__swhatbuf_r+0x12>
 8009096:	9a01      	ldr	r2, [sp, #4]
 8009098:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800909c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090a0:	425a      	negs	r2, r3
 80090a2:	415a      	adcs	r2, r3
 80090a4:	602a      	str	r2, [r5, #0]
 80090a6:	e7ee      	b.n	8009086 <__swhatbuf_r+0x1e>
 80090a8:	2340      	movs	r3, #64	; 0x40
 80090aa:	2000      	movs	r0, #0
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	b016      	add	sp, #88	; 0x58
 80090b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080090b4 <__smakebuf_r>:
 80090b4:	898b      	ldrh	r3, [r1, #12]
 80090b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090b8:	079d      	lsls	r5, r3, #30
 80090ba:	4606      	mov	r6, r0
 80090bc:	460c      	mov	r4, r1
 80090be:	d507      	bpl.n	80090d0 <__smakebuf_r+0x1c>
 80090c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	6123      	str	r3, [r4, #16]
 80090c8:	2301      	movs	r3, #1
 80090ca:	6163      	str	r3, [r4, #20]
 80090cc:	b002      	add	sp, #8
 80090ce:	bd70      	pop	{r4, r5, r6, pc}
 80090d0:	ab01      	add	r3, sp, #4
 80090d2:	466a      	mov	r2, sp
 80090d4:	f7ff ffc8 	bl	8009068 <__swhatbuf_r>
 80090d8:	9900      	ldr	r1, [sp, #0]
 80090da:	4605      	mov	r5, r0
 80090dc:	4630      	mov	r0, r6
 80090de:	f000 f895 	bl	800920c <_malloc_r>
 80090e2:	b948      	cbnz	r0, 80090f8 <__smakebuf_r+0x44>
 80090e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090e8:	059a      	lsls	r2, r3, #22
 80090ea:	d4ef      	bmi.n	80090cc <__smakebuf_r+0x18>
 80090ec:	f023 0303 	bic.w	r3, r3, #3
 80090f0:	f043 0302 	orr.w	r3, r3, #2
 80090f4:	81a3      	strh	r3, [r4, #12]
 80090f6:	e7e3      	b.n	80090c0 <__smakebuf_r+0xc>
 80090f8:	4b0d      	ldr	r3, [pc, #52]	; (8009130 <__smakebuf_r+0x7c>)
 80090fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80090fc:	89a3      	ldrh	r3, [r4, #12]
 80090fe:	6020      	str	r0, [r4, #0]
 8009100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009104:	81a3      	strh	r3, [r4, #12]
 8009106:	9b00      	ldr	r3, [sp, #0]
 8009108:	6163      	str	r3, [r4, #20]
 800910a:	9b01      	ldr	r3, [sp, #4]
 800910c:	6120      	str	r0, [r4, #16]
 800910e:	b15b      	cbz	r3, 8009128 <__smakebuf_r+0x74>
 8009110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009114:	4630      	mov	r0, r6
 8009116:	f000 f975 	bl	8009404 <_isatty_r>
 800911a:	b128      	cbz	r0, 8009128 <__smakebuf_r+0x74>
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	f023 0303 	bic.w	r3, r3, #3
 8009122:	f043 0301 	orr.w	r3, r3, #1
 8009126:	81a3      	strh	r3, [r4, #12]
 8009128:	89a0      	ldrh	r0, [r4, #12]
 800912a:	4305      	orrs	r5, r0
 800912c:	81a5      	strh	r5, [r4, #12]
 800912e:	e7cd      	b.n	80090cc <__smakebuf_r+0x18>
 8009130:	08008ec1 	.word	0x08008ec1

08009134 <_free_r>:
 8009134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009136:	2900      	cmp	r1, #0
 8009138:	d044      	beq.n	80091c4 <_free_r+0x90>
 800913a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800913e:	9001      	str	r0, [sp, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	f1a1 0404 	sub.w	r4, r1, #4
 8009146:	bfb8      	it	lt
 8009148:	18e4      	addlt	r4, r4, r3
 800914a:	f000 f97d 	bl	8009448 <__malloc_lock>
 800914e:	4a1e      	ldr	r2, [pc, #120]	; (80091c8 <_free_r+0x94>)
 8009150:	9801      	ldr	r0, [sp, #4]
 8009152:	6813      	ldr	r3, [r2, #0]
 8009154:	b933      	cbnz	r3, 8009164 <_free_r+0x30>
 8009156:	6063      	str	r3, [r4, #4]
 8009158:	6014      	str	r4, [r2, #0]
 800915a:	b003      	add	sp, #12
 800915c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009160:	f000 b978 	b.w	8009454 <__malloc_unlock>
 8009164:	42a3      	cmp	r3, r4
 8009166:	d908      	bls.n	800917a <_free_r+0x46>
 8009168:	6825      	ldr	r5, [r4, #0]
 800916a:	1961      	adds	r1, r4, r5
 800916c:	428b      	cmp	r3, r1
 800916e:	bf01      	itttt	eq
 8009170:	6819      	ldreq	r1, [r3, #0]
 8009172:	685b      	ldreq	r3, [r3, #4]
 8009174:	1949      	addeq	r1, r1, r5
 8009176:	6021      	streq	r1, [r4, #0]
 8009178:	e7ed      	b.n	8009156 <_free_r+0x22>
 800917a:	461a      	mov	r2, r3
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	b10b      	cbz	r3, 8009184 <_free_r+0x50>
 8009180:	42a3      	cmp	r3, r4
 8009182:	d9fa      	bls.n	800917a <_free_r+0x46>
 8009184:	6811      	ldr	r1, [r2, #0]
 8009186:	1855      	adds	r5, r2, r1
 8009188:	42a5      	cmp	r5, r4
 800918a:	d10b      	bne.n	80091a4 <_free_r+0x70>
 800918c:	6824      	ldr	r4, [r4, #0]
 800918e:	4421      	add	r1, r4
 8009190:	1854      	adds	r4, r2, r1
 8009192:	42a3      	cmp	r3, r4
 8009194:	6011      	str	r1, [r2, #0]
 8009196:	d1e0      	bne.n	800915a <_free_r+0x26>
 8009198:	681c      	ldr	r4, [r3, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	6053      	str	r3, [r2, #4]
 800919e:	4421      	add	r1, r4
 80091a0:	6011      	str	r1, [r2, #0]
 80091a2:	e7da      	b.n	800915a <_free_r+0x26>
 80091a4:	d902      	bls.n	80091ac <_free_r+0x78>
 80091a6:	230c      	movs	r3, #12
 80091a8:	6003      	str	r3, [r0, #0]
 80091aa:	e7d6      	b.n	800915a <_free_r+0x26>
 80091ac:	6825      	ldr	r5, [r4, #0]
 80091ae:	1961      	adds	r1, r4, r5
 80091b0:	428b      	cmp	r3, r1
 80091b2:	bf04      	itt	eq
 80091b4:	6819      	ldreq	r1, [r3, #0]
 80091b6:	685b      	ldreq	r3, [r3, #4]
 80091b8:	6063      	str	r3, [r4, #4]
 80091ba:	bf04      	itt	eq
 80091bc:	1949      	addeq	r1, r1, r5
 80091be:	6021      	streq	r1, [r4, #0]
 80091c0:	6054      	str	r4, [r2, #4]
 80091c2:	e7ca      	b.n	800915a <_free_r+0x26>
 80091c4:	b003      	add	sp, #12
 80091c6:	bd30      	pop	{r4, r5, pc}
 80091c8:	20000274 	.word	0x20000274

080091cc <sbrk_aligned>:
 80091cc:	b570      	push	{r4, r5, r6, lr}
 80091ce:	4e0e      	ldr	r6, [pc, #56]	; (8009208 <sbrk_aligned+0x3c>)
 80091d0:	460c      	mov	r4, r1
 80091d2:	6831      	ldr	r1, [r6, #0]
 80091d4:	4605      	mov	r5, r0
 80091d6:	b911      	cbnz	r1, 80091de <sbrk_aligned+0x12>
 80091d8:	f000 f88c 	bl	80092f4 <_sbrk_r>
 80091dc:	6030      	str	r0, [r6, #0]
 80091de:	4621      	mov	r1, r4
 80091e0:	4628      	mov	r0, r5
 80091e2:	f000 f887 	bl	80092f4 <_sbrk_r>
 80091e6:	1c43      	adds	r3, r0, #1
 80091e8:	d00a      	beq.n	8009200 <sbrk_aligned+0x34>
 80091ea:	1cc4      	adds	r4, r0, #3
 80091ec:	f024 0403 	bic.w	r4, r4, #3
 80091f0:	42a0      	cmp	r0, r4
 80091f2:	d007      	beq.n	8009204 <sbrk_aligned+0x38>
 80091f4:	1a21      	subs	r1, r4, r0
 80091f6:	4628      	mov	r0, r5
 80091f8:	f000 f87c 	bl	80092f4 <_sbrk_r>
 80091fc:	3001      	adds	r0, #1
 80091fe:	d101      	bne.n	8009204 <sbrk_aligned+0x38>
 8009200:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009204:	4620      	mov	r0, r4
 8009206:	bd70      	pop	{r4, r5, r6, pc}
 8009208:	20000278 	.word	0x20000278

0800920c <_malloc_r>:
 800920c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009210:	1ccd      	adds	r5, r1, #3
 8009212:	f025 0503 	bic.w	r5, r5, #3
 8009216:	3508      	adds	r5, #8
 8009218:	2d0c      	cmp	r5, #12
 800921a:	bf38      	it	cc
 800921c:	250c      	movcc	r5, #12
 800921e:	2d00      	cmp	r5, #0
 8009220:	4607      	mov	r7, r0
 8009222:	db01      	blt.n	8009228 <_malloc_r+0x1c>
 8009224:	42a9      	cmp	r1, r5
 8009226:	d905      	bls.n	8009234 <_malloc_r+0x28>
 8009228:	230c      	movs	r3, #12
 800922a:	603b      	str	r3, [r7, #0]
 800922c:	2600      	movs	r6, #0
 800922e:	4630      	mov	r0, r6
 8009230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009234:	4e2e      	ldr	r6, [pc, #184]	; (80092f0 <_malloc_r+0xe4>)
 8009236:	f000 f907 	bl	8009448 <__malloc_lock>
 800923a:	6833      	ldr	r3, [r6, #0]
 800923c:	461c      	mov	r4, r3
 800923e:	bb34      	cbnz	r4, 800928e <_malloc_r+0x82>
 8009240:	4629      	mov	r1, r5
 8009242:	4638      	mov	r0, r7
 8009244:	f7ff ffc2 	bl	80091cc <sbrk_aligned>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	4604      	mov	r4, r0
 800924c:	d14d      	bne.n	80092ea <_malloc_r+0xde>
 800924e:	6834      	ldr	r4, [r6, #0]
 8009250:	4626      	mov	r6, r4
 8009252:	2e00      	cmp	r6, #0
 8009254:	d140      	bne.n	80092d8 <_malloc_r+0xcc>
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	4631      	mov	r1, r6
 800925a:	4638      	mov	r0, r7
 800925c:	eb04 0803 	add.w	r8, r4, r3
 8009260:	f000 f848 	bl	80092f4 <_sbrk_r>
 8009264:	4580      	cmp	r8, r0
 8009266:	d13a      	bne.n	80092de <_malloc_r+0xd2>
 8009268:	6821      	ldr	r1, [r4, #0]
 800926a:	3503      	adds	r5, #3
 800926c:	1a6d      	subs	r5, r5, r1
 800926e:	f025 0503 	bic.w	r5, r5, #3
 8009272:	3508      	adds	r5, #8
 8009274:	2d0c      	cmp	r5, #12
 8009276:	bf38      	it	cc
 8009278:	250c      	movcc	r5, #12
 800927a:	4629      	mov	r1, r5
 800927c:	4638      	mov	r0, r7
 800927e:	f7ff ffa5 	bl	80091cc <sbrk_aligned>
 8009282:	3001      	adds	r0, #1
 8009284:	d02b      	beq.n	80092de <_malloc_r+0xd2>
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	442b      	add	r3, r5
 800928a:	6023      	str	r3, [r4, #0]
 800928c:	e00e      	b.n	80092ac <_malloc_r+0xa0>
 800928e:	6822      	ldr	r2, [r4, #0]
 8009290:	1b52      	subs	r2, r2, r5
 8009292:	d41e      	bmi.n	80092d2 <_malloc_r+0xc6>
 8009294:	2a0b      	cmp	r2, #11
 8009296:	d916      	bls.n	80092c6 <_malloc_r+0xba>
 8009298:	1961      	adds	r1, r4, r5
 800929a:	42a3      	cmp	r3, r4
 800929c:	6025      	str	r5, [r4, #0]
 800929e:	bf18      	it	ne
 80092a0:	6059      	strne	r1, [r3, #4]
 80092a2:	6863      	ldr	r3, [r4, #4]
 80092a4:	bf08      	it	eq
 80092a6:	6031      	streq	r1, [r6, #0]
 80092a8:	5162      	str	r2, [r4, r5]
 80092aa:	604b      	str	r3, [r1, #4]
 80092ac:	4638      	mov	r0, r7
 80092ae:	f104 060b 	add.w	r6, r4, #11
 80092b2:	f000 f8cf 	bl	8009454 <__malloc_unlock>
 80092b6:	f026 0607 	bic.w	r6, r6, #7
 80092ba:	1d23      	adds	r3, r4, #4
 80092bc:	1af2      	subs	r2, r6, r3
 80092be:	d0b6      	beq.n	800922e <_malloc_r+0x22>
 80092c0:	1b9b      	subs	r3, r3, r6
 80092c2:	50a3      	str	r3, [r4, r2]
 80092c4:	e7b3      	b.n	800922e <_malloc_r+0x22>
 80092c6:	6862      	ldr	r2, [r4, #4]
 80092c8:	42a3      	cmp	r3, r4
 80092ca:	bf0c      	ite	eq
 80092cc:	6032      	streq	r2, [r6, #0]
 80092ce:	605a      	strne	r2, [r3, #4]
 80092d0:	e7ec      	b.n	80092ac <_malloc_r+0xa0>
 80092d2:	4623      	mov	r3, r4
 80092d4:	6864      	ldr	r4, [r4, #4]
 80092d6:	e7b2      	b.n	800923e <_malloc_r+0x32>
 80092d8:	4634      	mov	r4, r6
 80092da:	6876      	ldr	r6, [r6, #4]
 80092dc:	e7b9      	b.n	8009252 <_malloc_r+0x46>
 80092de:	230c      	movs	r3, #12
 80092e0:	603b      	str	r3, [r7, #0]
 80092e2:	4638      	mov	r0, r7
 80092e4:	f000 f8b6 	bl	8009454 <__malloc_unlock>
 80092e8:	e7a1      	b.n	800922e <_malloc_r+0x22>
 80092ea:	6025      	str	r5, [r4, #0]
 80092ec:	e7de      	b.n	80092ac <_malloc_r+0xa0>
 80092ee:	bf00      	nop
 80092f0:	20000274 	.word	0x20000274

080092f4 <_sbrk_r>:
 80092f4:	b538      	push	{r3, r4, r5, lr}
 80092f6:	4d06      	ldr	r5, [pc, #24]	; (8009310 <_sbrk_r+0x1c>)
 80092f8:	2300      	movs	r3, #0
 80092fa:	4604      	mov	r4, r0
 80092fc:	4608      	mov	r0, r1
 80092fe:	602b      	str	r3, [r5, #0]
 8009300:	f7f9 fad2 	bl	80028a8 <_sbrk>
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	d102      	bne.n	800930e <_sbrk_r+0x1a>
 8009308:	682b      	ldr	r3, [r5, #0]
 800930a:	b103      	cbz	r3, 800930e <_sbrk_r+0x1a>
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	bd38      	pop	{r3, r4, r5, pc}
 8009310:	2000027c 	.word	0x2000027c

08009314 <__sread>:
 8009314:	b510      	push	{r4, lr}
 8009316:	460c      	mov	r4, r1
 8009318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800931c:	f000 f8a0 	bl	8009460 <_read_r>
 8009320:	2800      	cmp	r0, #0
 8009322:	bfab      	itete	ge
 8009324:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009326:	89a3      	ldrhlt	r3, [r4, #12]
 8009328:	181b      	addge	r3, r3, r0
 800932a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800932e:	bfac      	ite	ge
 8009330:	6563      	strge	r3, [r4, #84]	; 0x54
 8009332:	81a3      	strhlt	r3, [r4, #12]
 8009334:	bd10      	pop	{r4, pc}

08009336 <__swrite>:
 8009336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800933a:	461f      	mov	r7, r3
 800933c:	898b      	ldrh	r3, [r1, #12]
 800933e:	05db      	lsls	r3, r3, #23
 8009340:	4605      	mov	r5, r0
 8009342:	460c      	mov	r4, r1
 8009344:	4616      	mov	r6, r2
 8009346:	d505      	bpl.n	8009354 <__swrite+0x1e>
 8009348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800934c:	2302      	movs	r3, #2
 800934e:	2200      	movs	r2, #0
 8009350:	f000 f868 	bl	8009424 <_lseek_r>
 8009354:	89a3      	ldrh	r3, [r4, #12]
 8009356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800935a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	4632      	mov	r2, r6
 8009362:	463b      	mov	r3, r7
 8009364:	4628      	mov	r0, r5
 8009366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800936a:	f000 b817 	b.w	800939c <_write_r>

0800936e <__sseek>:
 800936e:	b510      	push	{r4, lr}
 8009370:	460c      	mov	r4, r1
 8009372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009376:	f000 f855 	bl	8009424 <_lseek_r>
 800937a:	1c43      	adds	r3, r0, #1
 800937c:	89a3      	ldrh	r3, [r4, #12]
 800937e:	bf15      	itete	ne
 8009380:	6560      	strne	r0, [r4, #84]	; 0x54
 8009382:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009386:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800938a:	81a3      	strheq	r3, [r4, #12]
 800938c:	bf18      	it	ne
 800938e:	81a3      	strhne	r3, [r4, #12]
 8009390:	bd10      	pop	{r4, pc}

08009392 <__sclose>:
 8009392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009396:	f000 b813 	b.w	80093c0 <_close_r>
	...

0800939c <_write_r>:
 800939c:	b538      	push	{r3, r4, r5, lr}
 800939e:	4d07      	ldr	r5, [pc, #28]	; (80093bc <_write_r+0x20>)
 80093a0:	4604      	mov	r4, r0
 80093a2:	4608      	mov	r0, r1
 80093a4:	4611      	mov	r1, r2
 80093a6:	2200      	movs	r2, #0
 80093a8:	602a      	str	r2, [r5, #0]
 80093aa:	461a      	mov	r2, r3
 80093ac:	f7f9 fa2b 	bl	8002806 <_write>
 80093b0:	1c43      	adds	r3, r0, #1
 80093b2:	d102      	bne.n	80093ba <_write_r+0x1e>
 80093b4:	682b      	ldr	r3, [r5, #0]
 80093b6:	b103      	cbz	r3, 80093ba <_write_r+0x1e>
 80093b8:	6023      	str	r3, [r4, #0]
 80093ba:	bd38      	pop	{r3, r4, r5, pc}
 80093bc:	2000027c 	.word	0x2000027c

080093c0 <_close_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	4d06      	ldr	r5, [pc, #24]	; (80093dc <_close_r+0x1c>)
 80093c4:	2300      	movs	r3, #0
 80093c6:	4604      	mov	r4, r0
 80093c8:	4608      	mov	r0, r1
 80093ca:	602b      	str	r3, [r5, #0]
 80093cc:	f7f9 fa37 	bl	800283e <_close>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	d102      	bne.n	80093da <_close_r+0x1a>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	b103      	cbz	r3, 80093da <_close_r+0x1a>
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	2000027c 	.word	0x2000027c

080093e0 <_fstat_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4d07      	ldr	r5, [pc, #28]	; (8009400 <_fstat_r+0x20>)
 80093e4:	2300      	movs	r3, #0
 80093e6:	4604      	mov	r4, r0
 80093e8:	4608      	mov	r0, r1
 80093ea:	4611      	mov	r1, r2
 80093ec:	602b      	str	r3, [r5, #0]
 80093ee:	f7f9 fa32 	bl	8002856 <_fstat>
 80093f2:	1c43      	adds	r3, r0, #1
 80093f4:	d102      	bne.n	80093fc <_fstat_r+0x1c>
 80093f6:	682b      	ldr	r3, [r5, #0]
 80093f8:	b103      	cbz	r3, 80093fc <_fstat_r+0x1c>
 80093fa:	6023      	str	r3, [r4, #0]
 80093fc:	bd38      	pop	{r3, r4, r5, pc}
 80093fe:	bf00      	nop
 8009400:	2000027c 	.word	0x2000027c

08009404 <_isatty_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4d06      	ldr	r5, [pc, #24]	; (8009420 <_isatty_r+0x1c>)
 8009408:	2300      	movs	r3, #0
 800940a:	4604      	mov	r4, r0
 800940c:	4608      	mov	r0, r1
 800940e:	602b      	str	r3, [r5, #0]
 8009410:	f7f9 fa31 	bl	8002876 <_isatty>
 8009414:	1c43      	adds	r3, r0, #1
 8009416:	d102      	bne.n	800941e <_isatty_r+0x1a>
 8009418:	682b      	ldr	r3, [r5, #0]
 800941a:	b103      	cbz	r3, 800941e <_isatty_r+0x1a>
 800941c:	6023      	str	r3, [r4, #0]
 800941e:	bd38      	pop	{r3, r4, r5, pc}
 8009420:	2000027c 	.word	0x2000027c

08009424 <_lseek_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4d07      	ldr	r5, [pc, #28]	; (8009444 <_lseek_r+0x20>)
 8009428:	4604      	mov	r4, r0
 800942a:	4608      	mov	r0, r1
 800942c:	4611      	mov	r1, r2
 800942e:	2200      	movs	r2, #0
 8009430:	602a      	str	r2, [r5, #0]
 8009432:	461a      	mov	r2, r3
 8009434:	f7f9 fa2a 	bl	800288c <_lseek>
 8009438:	1c43      	adds	r3, r0, #1
 800943a:	d102      	bne.n	8009442 <_lseek_r+0x1e>
 800943c:	682b      	ldr	r3, [r5, #0]
 800943e:	b103      	cbz	r3, 8009442 <_lseek_r+0x1e>
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	bd38      	pop	{r3, r4, r5, pc}
 8009444:	2000027c 	.word	0x2000027c

08009448 <__malloc_lock>:
 8009448:	4801      	ldr	r0, [pc, #4]	; (8009450 <__malloc_lock+0x8>)
 800944a:	f7ff be0b 	b.w	8009064 <__retarget_lock_acquire_recursive>
 800944e:	bf00      	nop
 8009450:	20000270 	.word	0x20000270

08009454 <__malloc_unlock>:
 8009454:	4801      	ldr	r0, [pc, #4]	; (800945c <__malloc_unlock+0x8>)
 8009456:	f7ff be06 	b.w	8009066 <__retarget_lock_release_recursive>
 800945a:	bf00      	nop
 800945c:	20000270 	.word	0x20000270

08009460 <_read_r>:
 8009460:	b538      	push	{r3, r4, r5, lr}
 8009462:	4d07      	ldr	r5, [pc, #28]	; (8009480 <_read_r+0x20>)
 8009464:	4604      	mov	r4, r0
 8009466:	4608      	mov	r0, r1
 8009468:	4611      	mov	r1, r2
 800946a:	2200      	movs	r2, #0
 800946c:	602a      	str	r2, [r5, #0]
 800946e:	461a      	mov	r2, r3
 8009470:	f7f9 f9ac 	bl	80027cc <_read>
 8009474:	1c43      	adds	r3, r0, #1
 8009476:	d102      	bne.n	800947e <_read_r+0x1e>
 8009478:	682b      	ldr	r3, [r5, #0]
 800947a:	b103      	cbz	r3, 800947e <_read_r+0x1e>
 800947c:	6023      	str	r3, [r4, #0]
 800947e:	bd38      	pop	{r3, r4, r5, pc}
 8009480:	2000027c 	.word	0x2000027c

08009484 <_init>:
 8009484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009486:	bf00      	nop
 8009488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800948a:	bc08      	pop	{r3}
 800948c:	469e      	mov	lr, r3
 800948e:	4770      	bx	lr

08009490 <_fini>:
 8009490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009492:	bf00      	nop
 8009494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009496:	bc08      	pop	{r3}
 8009498:	469e      	mov	lr, r3
 800949a:	4770      	bx	lr

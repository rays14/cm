
cm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004860  08004860  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004860  08004860  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004860  08004860  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004860  08004860  00014860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004864  08004864  00014864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000078  080048e0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  080048e0  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cabf  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce6  00000000  00000000  0002cb67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0002e850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  0002f588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000027a3  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4fc  00000000  00000000  0003297b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1542  00000000  00000000  0003fe77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001313b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ecc  00000000  00000000  0013140c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004760 	.word	0x08004760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004760 	.word	0x08004760

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_TIM_IC_CaptureCallback>:
	}
}
#endif


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  {// if the interrupt source is channel1
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	7f1b      	ldrb	r3, [r3, #28]
 800027c:	2b01      	cmp	r3, #1
 800027e:	d14e      	bne.n	800031e <HAL_TIM_IC_CaptureCallback+0xae>
		if (isFirstCaptured == 0) { // if the first value is not captured
 8000280:	4b29      	ldr	r3, [pc, #164]	; (8000328 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d10a      	bne.n	800029e <HAL_TIM_IC_CaptureCallback+0x2e>
			icVal1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000288:	2100      	movs	r1, #0
 800028a:	6878      	ldr	r0, [r7, #4]
 800028c:	f002 fcdc 	bl	8002c48 <HAL_TIM_ReadCapturedValue>
 8000290:	4603      	mov	r3, r0
 8000292:	4a26      	ldr	r2, [pc, #152]	; (800032c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000294:	6013      	str	r3, [r2, #0]
			isFirstCaptured = 1;  // set the first captured as true
 8000296:	4b24      	ldr	r3, [pc, #144]	; (8000328 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000298:	2201      	movs	r2, #1
 800029a:	601a      	str	r2, [r3, #0]
			// Resetting the counter messes up the the base counter and the pwm
			//__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			isFirstCaptured = 0; // set it back to false
		}
	}
}
 800029c:	e03f      	b.n	800031e <HAL_TIM_IC_CaptureCallback+0xae>
			icVal2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800029e:	2100      	movs	r1, #0
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f002 fcd1 	bl	8002c48 <HAL_TIM_ReadCapturedValue>
 80002a6:	4603      	mov	r3, r0
 80002a8:	4a21      	ldr	r2, [pc, #132]	; (8000330 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80002aa:	6013      	str	r3, [r2, #0]
			if (icVal2 > icVal1) {
 80002ac:	4b20      	ldr	r3, [pc, #128]	; (8000330 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	4b1e      	ldr	r3, [pc, #120]	; (800032c <HAL_TIM_IC_CaptureCallback+0xbc>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d907      	bls.n	80002c8 <HAL_TIM_IC_CaptureCallback+0x58>
				difference = icVal2 - icVal1;
 80002b8:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <HAL_TIM_IC_CaptureCallback+0xbc>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	1ad3      	subs	r3, r2, r3
 80002c2:	4a1c      	ldr	r2, [pc, #112]	; (8000334 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80002c4:	6013      	str	r3, [r2, #0]
 80002c6:	e00d      	b.n	80002e4 <HAL_TIM_IC_CaptureCallback+0x74>
			} else if (icVal1 > icVal2) {
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <HAL_TIM_IC_CaptureCallback+0xbc>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4b18      	ldr	r3, [pc, #96]	; (8000330 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d907      	bls.n	80002e4 <HAL_TIM_IC_CaptureCallback+0x74>
				difference = (0xffffffff - icVal1) + icVal2;
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <HAL_TIM_IC_CaptureCallback+0xbc>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	1ad3      	subs	r3, r2, r3
 80002de:	3b01      	subs	r3, #1
 80002e0:	4a14      	ldr	r2, [pc, #80]	; (8000334 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80002e2:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK / (PRESCALAR);
 80002e4:	4b14      	ldr	r3, [pc, #80]	; (8000338 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80002e6:	60fb      	str	r3, [r7, #12]
			float mFactor = 1000000 / refClock;
 80002e8:	eddf 6a14 	vldr	s13, [pc, #80]	; 800033c <HAL_TIM_IC_CaptureCallback+0xcc>
 80002ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80002f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80002f4:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth = difference * mFactor;
 80002f8:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	ee07 3a90 	vmov	s15, r3
 8000300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000304:	edd7 7a02 	vldr	s15, [r7, #8]
 8000308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800030c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000310:	ee17 2a90 	vmov	r2, s15
 8000314:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000316:	601a      	str	r2, [r3, #0]
			isFirstCaptured = 0; // set it back to false
 8000318:	4b03      	ldr	r3, [pc, #12]	; (8000328 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000118 	.word	0x20000118
 800032c:	2000010c 	.word	0x2000010c
 8000330:	20000110 	.word	0x20000110
 8000334:	20000114 	.word	0x20000114
 8000338:	49742400 	.word	0x49742400
 800033c:	49742400 	.word	0x49742400
 8000340:	2000011c 	.word	0x2000011c

08000344 <delay>:

void delay(uint32_t maxDelayAmount) {
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	volatile uint32_t amount = maxDelayAmount;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	60fb      	str	r3, [r7, #12]
	while (amount > 0) {
 8000350:	e002      	b.n	8000358 <delay+0x14>
		amount--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b01      	subs	r3, #1
 8000356:	60fb      	str	r3, [r7, #12]
	while (amount > 0) {
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d1f9      	bne.n	8000352 <delay+0xe>
	}
}
 800035e:	bf00      	nop
 8000360:	bf00      	nop
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000370:	f000 fbaf 	bl	8000ad2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000374:	f000 f866 	bl	8000444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000378:	f000 f96c 	bl	8000654 <MX_GPIO_Init>
  MX_TIM2_Init();
 800037c:	f000 f8ec 	bl	8000558 <MX_TIM2_Init>
  MX_CAN1_Init();
 8000380:	f000 f8b2 	bl	80004e8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000384:	2108      	movs	r1, #8
 8000386:	4828      	ldr	r0, [pc, #160]	; (8000428 <main+0xbc>)
 8000388:	f001 fee6 	bl	8002158 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800038c:	4826      	ldr	r0, [pc, #152]	; (8000428 <main+0xbc>)
 800038e:	f001 fe11 	bl	8001fb4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000392:	2100      	movs	r1, #0
 8000394:	4824      	ldr	r0, [pc, #144]	; (8000428 <main+0xbc>)
 8000396:	f002 f83d 	bl	8002414 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  pwmOnTime = 5000;
 800039a:	4b24      	ldr	r3, [pc, #144]	; (800042c <main+0xc0>)
 800039c:	f241 3288 	movw	r2, #5000	; 0x1388
 80003a0:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Decrement toggle counter.
	  counter--;
 80003a2:	4b23      	ldr	r3, [pc, #140]	; (8000430 <main+0xc4>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	3b01      	subs	r3, #1
 80003a8:	4a21      	ldr	r2, [pc, #132]	; (8000430 <main+0xc4>)
 80003aa:	6013      	str	r3, [r2, #0]
	  if (counter == 0) {
 80003ac:	4b20      	ldr	r3, [pc, #128]	; (8000430 <main+0xc4>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d109      	bne.n	80003c8 <main+0x5c>
		  counter = MAX_COUNT;
 80003b4:	4b1e      	ldr	r3, [pc, #120]	; (8000430 <main+0xc4>)
 80003b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003ba:	601a      	str	r2, [r3, #0]
		  toggle = 1 - toggle;
 80003bc:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <main+0xc8>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f1c3 0301 	rsb	r3, r3, #1
 80003c4:	4a1b      	ldr	r2, [pc, #108]	; (8000434 <main+0xc8>)
 80003c6:	6013      	str	r3, [r2, #0]
	  }

	  // Timer2 channel 3 is pwm generation
	  TIM2->CCR3 = pwmOnTime;
 80003c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003cc:	4b17      	ldr	r3, [pc, #92]	; (800042c <main+0xc0>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	63d3      	str	r3, [r2, #60]	; 0x3c
	  if (toggle) {
 80003d2:	4b18      	ldr	r3, [pc, #96]	; (8000434 <main+0xc8>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d005      	beq.n	80003e6 <main+0x7a>
		  pwmOnTime++;
 80003da:	4b14      	ldr	r3, [pc, #80]	; (800042c <main+0xc0>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	3301      	adds	r3, #1
 80003e0:	4a12      	ldr	r2, [pc, #72]	; (800042c <main+0xc0>)
 80003e2:	6013      	str	r3, [r2, #0]
 80003e4:	e004      	b.n	80003f0 <main+0x84>
	  } else {
		  pwmOnTime--;
 80003e6:	4b11      	ldr	r3, [pc, #68]	; (800042c <main+0xc0>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	3b01      	subs	r3, #1
 80003ec:	4a0f      	ldr	r2, [pc, #60]	; (800042c <main+0xc0>)
 80003ee:	6013      	str	r3, [r2, #0]
	  }

	  printf("usWidth = %d", (int)usWidth);
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <main+0xcc>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4619      	mov	r1, r3
 80003f6:	4811      	ldr	r0, [pc, #68]	; (800043c <main+0xd0>)
 80003f8:	f003 fd12 	bl	8003e20 <iprintf>

	  // Toggle PB8 - CN1 pin 10.
	  if (toggle) {
 80003fc:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <main+0xc8>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d006      	beq.n	8000412 <main+0xa6>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	f44f 7180 	mov.w	r1, #256	; 0x100
 800040a:	480d      	ldr	r0, [pc, #52]	; (8000440 <main+0xd4>)
 800040c:	f000 ff8e 	bl	800132c <HAL_GPIO_WritePin>
 8000410:	e005      	b.n	800041e <main+0xb2>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000418:	4809      	ldr	r0, [pc, #36]	; (8000440 <main+0xd4>)
 800041a:	f000 ff87 	bl	800132c <HAL_GPIO_WritePin>
	  }
	  delay(100);
 800041e:	2064      	movs	r0, #100	; 0x64
 8000420:	f7ff ff90 	bl	8000344 <delay>
	  counter--;
 8000424:	e7bd      	b.n	80003a2 <main+0x36>
 8000426:	bf00      	nop
 8000428:	200000bc 	.word	0x200000bc
 800042c:	20000108 	.word	0x20000108
 8000430:	20000000 	.word	0x20000000
 8000434:	20000004 	.word	0x20000004
 8000438:	2000011c 	.word	0x2000011c
 800043c:	08004778 	.word	0x08004778
 8000440:	48000400 	.word	0x48000400

08000444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b096      	sub	sp, #88	; 0x58
 8000448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	2244      	movs	r2, #68	; 0x44
 8000450:	2100      	movs	r1, #0
 8000452:	4618      	mov	r0, r3
 8000454:	f003 f9ee 	bl	8003834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000458:	463b      	mov	r3, r7
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000466:	f44f 7000 	mov.w	r0, #512	; 0x200
 800046a:	f000 ff85 	bl	8001378 <HAL_PWREx_ControlVoltageScaling>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000474:	f000 f92e 	bl	80006d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000478:	2302      	movs	r3, #2
 800047a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000480:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000482:	2310      	movs	r3, #16
 8000484:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000486:	2302      	movs	r3, #2
 8000488:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800048a:	2302      	movs	r3, #2
 800048c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800048e:	2301      	movs	r3, #1
 8000490:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000492:	230a      	movs	r3, #10
 8000494:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000496:	2307      	movs	r3, #7
 8000498:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800049a:	2302      	movs	r3, #2
 800049c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800049e:	2302      	movs	r3, #2
 80004a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a2:	f107 0314 	add.w	r3, r7, #20
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 ffbc 	bl	8001424 <HAL_RCC_OscConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004b2:	f000 f90f 	bl	80006d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b6:	230f      	movs	r3, #15
 80004b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ba:	2303      	movs	r3, #3
 80004bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004ca:	463b      	mov	r3, r7
 80004cc:	2104      	movs	r1, #4
 80004ce:	4618      	mov	r0, r3
 80004d0:	f001 fb84 	bl	8001bdc <HAL_RCC_ClockConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004da:	f000 f8fb 	bl	80006d4 <Error_Handler>
  }
}
 80004de:	bf00      	nop
 80004e0:	3758      	adds	r7, #88	; 0x58
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <MX_CAN1_Init+0x68>)
 80004ee:	4a19      	ldr	r2, [pc, #100]	; (8000554 <MX_CAN1_Init+0x6c>)
 80004f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_CAN1_Init+0x68>)
 80004f4:	2228      	movs	r2, #40	; 0x28
 80004f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <MX_CAN1_Init+0x68>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_CAN1_Init+0x68>)
 8000500:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000504:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <MX_CAN1_Init+0x68>)
 8000508:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800050c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <MX_CAN1_Init+0x68>)
 8000510:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000514:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_CAN1_Init+0x68>)
 8000518:	2200      	movs	r2, #0
 800051a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_CAN1_Init+0x68>)
 800051e:	2200      	movs	r2, #0
 8000520:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <MX_CAN1_Init+0x68>)
 8000524:	2200      	movs	r2, #0
 8000526:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_CAN1_Init+0x68>)
 800052a:	2200      	movs	r2, #0
 800052c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <MX_CAN1_Init+0x68>)
 8000530:	2200      	movs	r2, #0
 8000532:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_CAN1_Init+0x68>)
 8000536:	2200      	movs	r2, #0
 8000538:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <MX_CAN1_Init+0x68>)
 800053c:	f000 fb3e 	bl	8000bbc <HAL_CAN_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000546:	f000 f8c5 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000094 	.word	0x20000094
 8000554:	40006400 	.word	0x40006400

08000558 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08e      	sub	sp, #56	; 0x38
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800055e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800056a:	f107 031c 	add.w	r3, r7, #28
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000578:	463b      	mov	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]
 8000586:	615a      	str	r2, [r3, #20]
 8000588:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800058a:	4b31      	ldr	r3, [pc, #196]	; (8000650 <MX_TIM2_Init+0xf8>)
 800058c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000590:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000592:	4b2f      	ldr	r3, [pc, #188]	; (8000650 <MX_TIM2_Init+0xf8>)
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000598:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <MX_TIM2_Init+0xf8>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800059e:	4b2c      	ldr	r3, [pc, #176]	; (8000650 <MX_TIM2_Init+0xf8>)
 80005a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80005a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80005a6:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <MX_TIM2_Init+0xf8>)
 80005a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005ae:	4b28      	ldr	r3, [pc, #160]	; (8000650 <MX_TIM2_Init+0xf8>)
 80005b0:	2280      	movs	r2, #128	; 0x80
 80005b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80005b4:	4826      	ldr	r0, [pc, #152]	; (8000650 <MX_TIM2_Init+0xf8>)
 80005b6:	f001 fed5 	bl	8002364 <HAL_TIM_IC_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80005c0:	f000 f888 	bl	80006d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005c4:	4822      	ldr	r0, [pc, #136]	; (8000650 <MX_TIM2_Init+0xf8>)
 80005c6:	f001 fd65 	bl	8002094 <HAL_TIM_PWM_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80005d0:	f000 f880 	bl	80006d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d8:	2300      	movs	r3, #0
 80005da:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005e0:	4619      	mov	r1, r3
 80005e2:	481b      	ldr	r0, [pc, #108]	; (8000650 <MX_TIM2_Init+0xf8>)
 80005e4:	f003 f856 	bl	8003694 <HAL_TIMEx_MasterConfigSynchronization>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80005ee:	f000 f871 	bl	80006d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80005f2:	230a      	movs	r3, #10
 80005f4:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80005f6:	2301      	movs	r3, #1
 80005f8:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2200      	movs	r2, #0
 8000608:	4619      	mov	r1, r3
 800060a:	4811      	ldr	r0, [pc, #68]	; (8000650 <MX_TIM2_Init+0xf8>)
 800060c:	f002 f96b 	bl	80028e6 <HAL_TIM_IC_ConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8000616:	f000 f85d 	bl	80006d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800061a:	2360      	movs	r3, #96	; 0x60
 800061c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	2208      	movs	r2, #8
 800062e:	4619      	mov	r1, r3
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <MX_TIM2_Init+0xf8>)
 8000632:	f002 f9f5 	bl	8002a20 <HAL_TIM_PWM_ConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800063c:	f000 f84a 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000640:	4803      	ldr	r0, [pc, #12]	; (8000650 <MX_TIM2_Init+0xf8>)
 8000642:	f000 f8ff 	bl	8000844 <HAL_TIM_MspPostInit>

}
 8000646:	bf00      	nop
 8000648:	3738      	adds	r7, #56	; 0x38
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200000bc 	.word	0x200000bc

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_GPIO_Init+0x78>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	4a17      	ldr	r2, [pc, #92]	; (80006cc <MX_GPIO_Init+0x78>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_GPIO_Init+0x78>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_GPIO_Init+0x78>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	4a11      	ldr	r2, [pc, #68]	; (80006cc <MX_GPIO_Init+0x78>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_GPIO_Init+0x78>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MX_GPIO_Init+0x7c>)
 80006a2:	f000 fe43 	bl	800132c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	4619      	mov	r1, r3
 80006be:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_GPIO_Init+0x7c>)
 80006c0:	f000 fc8a 	bl	8000fd8 <HAL_GPIO_Init>

}
 80006c4:	bf00      	nop
 80006c6:	3720      	adds	r7, #32
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000400 	.word	0x48000400

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
}
 80006da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006dc:	e7fe      	b.n	80006dc <Error_Handler+0x8>
	...

080006e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <HAL_MspInit+0x44>)
 80006e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ea:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <HAL_MspInit+0x44>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6613      	str	r3, [r2, #96]	; 0x60
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <HAL_MspInit+0x44>)
 80006f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <HAL_MspInit+0x44>)
 8000700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000702:	4a08      	ldr	r2, [pc, #32]	; (8000724 <HAL_MspInit+0x44>)
 8000704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000708:	6593      	str	r3, [r2, #88]	; 0x58
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_MspInit+0x44>)
 800070c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000

08000728 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <HAL_CAN_MspInit+0x80>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d129      	bne.n	800079e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <HAL_CAN_MspInit+0x84>)
 800074c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074e:	4a17      	ldr	r2, [pc, #92]	; (80007ac <HAL_CAN_MspInit+0x84>)
 8000750:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000754:	6593      	str	r3, [r2, #88]	; 0x58
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_CAN_MspInit+0x84>)
 8000758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800075a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_CAN_MspInit+0x84>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a11      	ldr	r2, [pc, #68]	; (80007ac <HAL_CAN_MspInit+0x84>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <HAL_CAN_MspInit+0x84>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800077a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800077e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800078c:	2309      	movs	r3, #9
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f000 fc1d 	bl	8000fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800079e:	bf00      	nop
 80007a0:	3728      	adds	r7, #40	; 0x28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40006400 	.word	0x40006400
 80007ac:	40021000 	.word	0x40021000

080007b0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007d0:	d131      	bne.n	8000836 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <HAL_TIM_IC_MspInit+0x90>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d6:	4a1a      	ldr	r2, [pc, #104]	; (8000840 <HAL_TIM_IC_MspInit+0x90>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6593      	str	r3, [r2, #88]	; 0x58
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <HAL_TIM_IC_MspInit+0x90>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <HAL_TIM_IC_MspInit+0x90>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a14      	ldr	r2, [pc, #80]	; (8000840 <HAL_TIM_IC_MspInit+0x90>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_TIM_IC_MspInit+0x90>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000814:	2301      	movs	r3, #1
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f000 fbd9 	bl	8000fd8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2101      	movs	r1, #1
 800082a:	201c      	movs	r0, #28
 800082c:	f000 fb9d 	bl	8000f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000830:	201c      	movs	r0, #28
 8000832:	f000 fbb6 	bl	8000fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000864:	d11c      	bne.n	80008a0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <HAL_TIM_MspPostInit+0x64>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <HAL_TIM_MspPostInit+0x64>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <HAL_TIM_MspPostInit+0x64>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800087e:	2304      	movs	r3, #4
 8000880:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800088e:	2301      	movs	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089c:	f000 fb9c 	bl	8000fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40021000 	.word	0x40021000

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <NMI_Handler+0x4>

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <MemManage_Handler+0x4>

080008be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <UsageFault_Handler+0x4>

080008ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f8:	f000 f940 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <TIM2_IRQHandler+0x10>)
 8000906:	f001 fecf 	bl	80026a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000bc 	.word	0x200000bc

08000914 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	e00a      	b.n	800093c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000926:	f3af 8000 	nop.w
 800092a:	4601      	mov	r1, r0
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	60ba      	str	r2, [r7, #8]
 8000932:	b2ca      	uxtb	r2, r1
 8000934:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	3301      	adds	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697a      	ldr	r2, [r7, #20]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	dbf0      	blt.n	8000926 <_read+0x12>
	}

return len;
 8000944:	687b      	ldr	r3, [r7, #4]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b086      	sub	sp, #24
 8000952:	af00      	add	r7, sp, #0
 8000954:	60f8      	str	r0, [r7, #12]
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	e009      	b.n	8000974 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	60ba      	str	r2, [r7, #8]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	3301      	adds	r3, #1
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	429a      	cmp	r2, r3
 800097a:	dbf1      	blt.n	8000960 <_write+0x12>
	}
	return len;
 800097c:	687b      	ldr	r3, [r7, #4]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <_close>:

int _close(int file)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
	return -1;
 800098e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800099e:	b480      	push	{r7}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ae:	605a      	str	r2, [r3, #4]
	return 0;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <_isatty>:

int _isatty(int file)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	return 1;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
	return 0;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f8:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <_sbrk+0x5c>)
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <_sbrk+0x60>)
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a04:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d102      	bne.n	8000a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <_sbrk+0x64>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <_sbrk+0x68>)
 8000a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d207      	bcs.n	8000a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a20:	f002 fede 	bl	80037e0 <__errno>
 8000a24:	4603      	mov	r3, r0
 8000a26:	220c      	movs	r2, #12
 8000a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a2e:	e009      	b.n	8000a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <_sbrk+0x64>)
 8000a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a42:	68fb      	ldr	r3, [r7, #12]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20018000 	.word	0x20018000
 8000a50:	00000400 	.word	0x00000400
 8000a54:	20000120 	.word	0x20000120
 8000a58:	20000138 	.word	0x20000138

08000a5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <SystemInit+0x20>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <SystemInit+0x20>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a84:	f7ff ffea 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8a:	490d      	ldr	r1, [pc, #52]	; (8000ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <LoopForever+0xe>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa0:	4c0a      	ldr	r4, [pc, #40]	; (8000acc <LoopForever+0x16>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aae:	f002 fe9d 	bl	80037ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab2:	f7ff fc5b 	bl	800036c <main>

08000ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab6:	e7fe      	b.n	8000ab6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ac4:	08004868 	.word	0x08004868
  ldr r2, =_sbss
 8000ac8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000acc:	20000138 	.word	0x20000138

08000ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC1_2_IRQHandler>

08000ad2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 fa39 	bl	8000f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae2:	200f      	movs	r0, #15
 8000ae4:	f000 f80e 	bl	8000b04 <HAL_InitTick>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	e001      	b.n	8000af8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af4:	f7ff fdf4 	bl	80006e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af8:	79fb      	ldrb	r3, [r7, #7]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_InitTick+0x6c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d023      	beq.n	8000b60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_InitTick+0x70>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_InitTick+0x6c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 fa45 	bl	8000fbe <HAL_SYSTICK_Config>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d10f      	bne.n	8000b5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d809      	bhi.n	8000b54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b48:	f000 fa0f 	bl	8000f6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <HAL_InitTick+0x74>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	e007      	b.n	8000b64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	73fb      	strb	r3, [r7, #15]
 8000b58:	e004      	b.n	8000b64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	73fb      	strb	r3, [r7, #15]
 8000b5e:	e001      	b.n	8000b64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000010 	.word	0x20000010
 8000b74:	20000008 	.word	0x20000008
 8000b78:	2000000c 	.word	0x2000000c

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x20>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000010 	.word	0x20000010
 8000ba0:	20000124 	.word	0x20000124

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <HAL_GetTick+0x14>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000124 	.word	0x20000124

08000bbc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e0ed      	b.n	8000daa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d102      	bne.n	8000be0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff fda4 	bl	8000728 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f042 0201 	orr.w	r2, r2, #1
 8000bee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bf0:	f7ff ffd8 	bl	8000ba4 <HAL_GetTick>
 8000bf4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bf6:	e012      	b.n	8000c1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bf8:	f7ff ffd4 	bl	8000ba4 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b0a      	cmp	r3, #10
 8000c04:	d90b      	bls.n	8000c1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2205      	movs	r2, #5
 8000c16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e0c5      	b.n	8000daa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d0e5      	beq.n	8000bf8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f022 0202 	bic.w	r2, r2, #2
 8000c3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c3c:	f7ff ffb2 	bl	8000ba4 <HAL_GetTick>
 8000c40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c42:	e012      	b.n	8000c6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c44:	f7ff ffae 	bl	8000ba4 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b0a      	cmp	r3, #10
 8000c50:	d90b      	bls.n	8000c6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2205      	movs	r2, #5
 8000c62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e09f      	b.n	8000daa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1e5      	bne.n	8000c44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	7e1b      	ldrb	r3, [r3, #24]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d108      	bne.n	8000c92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	e007      	b.n	8000ca2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	7e5b      	ldrb	r3, [r3, #25]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d108      	bne.n	8000cbc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	e007      	b.n	8000ccc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	7e9b      	ldrb	r3, [r3, #26]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d108      	bne.n	8000ce6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f042 0220 	orr.w	r2, r2, #32
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	e007      	b.n	8000cf6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f022 0220 	bic.w	r2, r2, #32
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	7edb      	ldrb	r3, [r3, #27]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d108      	bne.n	8000d10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f022 0210 	bic.w	r2, r2, #16
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	e007      	b.n	8000d20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f042 0210 	orr.w	r2, r2, #16
 8000d1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7f1b      	ldrb	r3, [r3, #28]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d108      	bne.n	8000d3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f042 0208 	orr.w	r2, r2, #8
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	e007      	b.n	8000d4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f022 0208 	bic.w	r2, r2, #8
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	7f5b      	ldrb	r3, [r3, #29]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d108      	bne.n	8000d64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f042 0204 	orr.w	r2, r2, #4
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	e007      	b.n	8000d74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0204 	bic.w	r2, r2, #4
 8000d72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	431a      	orrs	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	ea42 0103 	orr.w	r1, r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	1e5a      	subs	r2, r3, #1
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	430a      	orrs	r2, r1
 8000d98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2201      	movs	r2, #1
 8000da4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60d3      	str	r3, [r2, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	db0b      	blt.n	8000e42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	f003 021f 	and.w	r2, r3, #31
 8000e30:	4907      	ldr	r1, [pc, #28]	; (8000e50 <__NVIC_EnableIRQ+0x38>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	095b      	lsrs	r3, r3, #5
 8000e38:	2001      	movs	r0, #1
 8000e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000e100 	.word	0xe000e100

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db0a      	blt.n	8000e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <__NVIC_SetPriority+0x4c>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	440b      	add	r3, r1
 8000e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e7c:	e00a      	b.n	8000e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4908      	ldr	r1, [pc, #32]	; (8000ea4 <__NVIC_SetPriority+0x50>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	3b04      	subs	r3, #4
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	440b      	add	r3, r1
 8000e92:	761a      	strb	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000e100 	.word	0xe000e100
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	bf28      	it	cs
 8000ec6:	2304      	movcs	r3, #4
 8000ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	d902      	bls.n	8000ed8 <NVIC_EncodePriority+0x30>
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3b03      	subs	r3, #3
 8000ed6:	e000      	b.n	8000eda <NVIC_EncodePriority+0x32>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	401a      	ands	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43d9      	mvns	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	4313      	orrs	r3, r2
         );
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f20:	d301      	bcc.n	8000f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00f      	b.n	8000f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f26:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <SysTick_Config+0x40>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2e:	210f      	movs	r1, #15
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f34:	f7ff ff8e 	bl	8000e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <SysTick_Config+0x40>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <SysTick_Config+0x40>)
 8000f40:	2207      	movs	r2, #7
 8000f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	e000e010 	.word	0xe000e010

08000f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff ff29 	bl	8000db4 <__NVIC_SetPriorityGrouping>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b086      	sub	sp, #24
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
 8000f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7c:	f7ff ff3e 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 8000f80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	6978      	ldr	r0, [r7, #20]
 8000f88:	f7ff ff8e 	bl	8000ea8 <NVIC_EncodePriority>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f92:	4611      	mov	r1, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff5d 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f9a:	bf00      	nop
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff31 	bl	8000e18 <__NVIC_EnableIRQ>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ffa2 	bl	8000f10 <SysTick_Config>
 8000fcc:	4603      	mov	r3, r0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe6:	e17f      	b.n	80012e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	2101      	movs	r1, #1
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 8171 	beq.w	80012e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b01      	cmp	r3, #1
 800100a:	d005      	beq.n	8001018 <HAL_GPIO_Init+0x40>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d130      	bne.n	800107a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800104e:	2201      	movs	r2, #1
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	091b      	lsrs	r3, r3, #4
 8001064:	f003 0201 	and.w	r2, r3, #1
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b03      	cmp	r3, #3
 8001084:	d118      	bne.n	80010b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800108c:	2201      	movs	r2, #1
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	08db      	lsrs	r3, r3, #3
 80010a2:	f003 0201 	and.w	r2, r3, #1
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d017      	beq.n	80010f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d123      	bne.n	8001148 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	08da      	lsrs	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3208      	adds	r2, #8
 8001142:	6939      	ldr	r1, [r7, #16]
 8001144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0203 	and.w	r2, r3, #3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80ac 	beq.w	80012e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	4b5f      	ldr	r3, [pc, #380]	; (8001308 <HAL_GPIO_Init+0x330>)
 800118c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118e:	4a5e      	ldr	r2, [pc, #376]	; (8001308 <HAL_GPIO_Init+0x330>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6613      	str	r3, [r2, #96]	; 0x60
 8001196:	4b5c      	ldr	r3, [pc, #368]	; (8001308 <HAL_GPIO_Init+0x330>)
 8001198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a2:	4a5a      	ldr	r2, [pc, #360]	; (800130c <HAL_GPIO_Init+0x334>)
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	3302      	adds	r3, #2
 80011aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	220f      	movs	r2, #15
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011cc:	d025      	beq.n	800121a <HAL_GPIO_Init+0x242>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4f      	ldr	r2, [pc, #316]	; (8001310 <HAL_GPIO_Init+0x338>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d01f      	beq.n	8001216 <HAL_GPIO_Init+0x23e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4e      	ldr	r2, [pc, #312]	; (8001314 <HAL_GPIO_Init+0x33c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d019      	beq.n	8001212 <HAL_GPIO_Init+0x23a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4d      	ldr	r2, [pc, #308]	; (8001318 <HAL_GPIO_Init+0x340>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d013      	beq.n	800120e <HAL_GPIO_Init+0x236>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4c      	ldr	r2, [pc, #304]	; (800131c <HAL_GPIO_Init+0x344>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d00d      	beq.n	800120a <HAL_GPIO_Init+0x232>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4b      	ldr	r2, [pc, #300]	; (8001320 <HAL_GPIO_Init+0x348>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d007      	beq.n	8001206 <HAL_GPIO_Init+0x22e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4a      	ldr	r2, [pc, #296]	; (8001324 <HAL_GPIO_Init+0x34c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_GPIO_Init+0x22a>
 80011fe:	2306      	movs	r3, #6
 8001200:	e00c      	b.n	800121c <HAL_GPIO_Init+0x244>
 8001202:	2307      	movs	r3, #7
 8001204:	e00a      	b.n	800121c <HAL_GPIO_Init+0x244>
 8001206:	2305      	movs	r3, #5
 8001208:	e008      	b.n	800121c <HAL_GPIO_Init+0x244>
 800120a:	2304      	movs	r3, #4
 800120c:	e006      	b.n	800121c <HAL_GPIO_Init+0x244>
 800120e:	2303      	movs	r3, #3
 8001210:	e004      	b.n	800121c <HAL_GPIO_Init+0x244>
 8001212:	2302      	movs	r3, #2
 8001214:	e002      	b.n	800121c <HAL_GPIO_Init+0x244>
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <HAL_GPIO_Init+0x244>
 800121a:	2300      	movs	r3, #0
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	f002 0203 	and.w	r2, r2, #3
 8001222:	0092      	lsls	r2, r2, #2
 8001224:	4093      	lsls	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800122c:	4937      	ldr	r1, [pc, #220]	; (800130c <HAL_GPIO_Init+0x334>)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800123a:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <HAL_GPIO_Init+0x350>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800125e:	4a32      	ldr	r2, [pc, #200]	; (8001328 <HAL_GPIO_Init+0x350>)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001264:	4b30      	ldr	r3, [pc, #192]	; (8001328 <HAL_GPIO_Init+0x350>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001288:	4a27      	ldr	r2, [pc, #156]	; (8001328 <HAL_GPIO_Init+0x350>)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <HAL_GPIO_Init+0x350>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012b2:	4a1d      	ldr	r2, [pc, #116]	; (8001328 <HAL_GPIO_Init+0x350>)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_GPIO_Init+0x350>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012dc:	4a12      	ldr	r2, [pc, #72]	; (8001328 <HAL_GPIO_Init+0x350>)
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa22 f303 	lsr.w	r3, r2, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f47f ae78 	bne.w	8000fe8 <HAL_GPIO_Init+0x10>
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	371c      	adds	r7, #28
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
 800130c:	40010000 	.word	0x40010000
 8001310:	48000400 	.word	0x48000400
 8001314:	48000800 	.word	0x48000800
 8001318:	48000c00 	.word	0x48000c00
 800131c:	48001000 	.word	0x48001000
 8001320:	48001400 	.word	0x48001400
 8001324:	48001800 	.word	0x48001800
 8001328:	40010400 	.word	0x40010400

0800132c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
 8001338:	4613      	mov	r3, r2
 800133a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800133c:	787b      	ldrb	r3, [r7, #1]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001348:	e002      	b.n	8001350 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <HAL_PWREx_GetVoltageRange+0x18>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40007000 	.word	0x40007000

08001378 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001386:	d130      	bne.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001394:	d038      	beq.n	8001408 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800139e:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2232      	movs	r2, #50	; 0x32
 80013ac:	fb02 f303 	mul.w	r3, r2, r3
 80013b0:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	0c9b      	lsrs	r3, r3, #18
 80013b8:	3301      	adds	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013bc:	e002      	b.n	80013c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d0:	d102      	bne.n	80013d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f2      	bne.n	80013be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e4:	d110      	bne.n	8001408 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e00f      	b.n	800140a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f6:	d007      	beq.n	8001408 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001400:	4a05      	ldr	r2, [pc, #20]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001406:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40007000 	.word	0x40007000
 800141c:	20000008 	.word	0x20000008
 8001420:	431bde83 	.word	0x431bde83

08001424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e3ca      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001436:	4b97      	ldr	r3, [pc, #604]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001440:	4b94      	ldr	r3, [pc, #592]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0310 	and.w	r3, r3, #16
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 80e4 	beq.w	8001620 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d007      	beq.n	800146e <HAL_RCC_OscConfig+0x4a>
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	2b0c      	cmp	r3, #12
 8001462:	f040 808b 	bne.w	800157c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	2b01      	cmp	r3, #1
 800146a:	f040 8087 	bne.w	800157c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800146e:	4b89      	ldr	r3, [pc, #548]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d005      	beq.n	8001486 <HAL_RCC_OscConfig+0x62>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e3a2      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1a      	ldr	r2, [r3, #32]
 800148a:	4b82      	ldr	r3, [pc, #520]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b00      	cmp	r3, #0
 8001494:	d004      	beq.n	80014a0 <HAL_RCC_OscConfig+0x7c>
 8001496:	4b7f      	ldr	r3, [pc, #508]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800149e:	e005      	b.n	80014ac <HAL_RCC_OscConfig+0x88>
 80014a0:	4b7c      	ldr	r3, [pc, #496]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80014a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d223      	bcs.n	80014f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fd1d 	bl	8001ef4 <RCC_SetFlashLatencyFromMSIRange>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e383      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c4:	4b73      	ldr	r3, [pc, #460]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a72      	ldr	r2, [pc, #456]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80014ca:	f043 0308 	orr.w	r3, r3, #8
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b70      	ldr	r3, [pc, #448]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	496d      	ldr	r1, [pc, #436]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e2:	4b6c      	ldr	r3, [pc, #432]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	4968      	ldr	r1, [pc, #416]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	604b      	str	r3, [r1, #4]
 80014f6:	e025      	b.n	8001544 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014f8:	4b66      	ldr	r3, [pc, #408]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a65      	ldr	r2, [pc, #404]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80014fe:	f043 0308 	orr.w	r3, r3, #8
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b63      	ldr	r3, [pc, #396]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	4960      	ldr	r1, [pc, #384]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 8001512:	4313      	orrs	r3, r2
 8001514:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001516:	4b5f      	ldr	r3, [pc, #380]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	495b      	ldr	r1, [pc, #364]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 8001526:	4313      	orrs	r3, r2
 8001528:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d109      	bne.n	8001544 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fcdd 	bl	8001ef4 <RCC_SetFlashLatencyFromMSIRange>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e343      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001544:	f000 fc4a 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001548:	4602      	mov	r2, r0
 800154a:	4b52      	ldr	r3, [pc, #328]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	091b      	lsrs	r3, r3, #4
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	4950      	ldr	r1, [pc, #320]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001556:	5ccb      	ldrb	r3, [r1, r3]
 8001558:	f003 031f 	and.w	r3, r3, #31
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
 8001560:	4a4e      	ldr	r2, [pc, #312]	; (800169c <HAL_RCC_OscConfig+0x278>)
 8001562:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001564:	4b4e      	ldr	r3, [pc, #312]	; (80016a0 <HAL_RCC_OscConfig+0x27c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff facb 	bl	8000b04 <HAL_InitTick>
 800156e:	4603      	mov	r3, r0
 8001570:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d052      	beq.n	800161e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	e327      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d032      	beq.n	80015ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001584:	4b43      	ldr	r3, [pc, #268]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a42      	ldr	r2, [pc, #264]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001590:	f7ff fb08 	bl	8000ba4 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001598:	f7ff fb04 	bl	8000ba4 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e310      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015aa:	4b3a      	ldr	r3, [pc, #232]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b6:	4b37      	ldr	r3, [pc, #220]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a36      	ldr	r2, [pc, #216]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b34      	ldr	r3, [pc, #208]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4931      	ldr	r1, [pc, #196]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d4:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	492c      	ldr	r1, [pc, #176]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
 80015e8:	e01a      	b.n	8001620 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015ea:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a29      	ldr	r2, [pc, #164]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015f6:	f7ff fad5 	bl	8000ba4 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015fe:	f7ff fad1 	bl	8000ba4 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e2dd      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001610:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f0      	bne.n	80015fe <HAL_RCC_OscConfig+0x1da>
 800161c:	e000      	b.n	8001620 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800161e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d074      	beq.n	8001716 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2b08      	cmp	r3, #8
 8001630:	d005      	beq.n	800163e <HAL_RCC_OscConfig+0x21a>
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	2b0c      	cmp	r3, #12
 8001636:	d10e      	bne.n	8001656 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d10b      	bne.n	8001656 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d064      	beq.n	8001714 <HAL_RCC_OscConfig+0x2f0>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d160      	bne.n	8001714 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e2ba      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x24a>
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 8001666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	e026      	b.n	80016bc <HAL_RCC_OscConfig+0x298>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001676:	d115      	bne.n	80016a4 <HAL_RCC_OscConfig+0x280>
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a05      	ldr	r2, [pc, #20]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 800167e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a02      	ldr	r2, [pc, #8]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 800168a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	e014      	b.n	80016bc <HAL_RCC_OscConfig+0x298>
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	08004788 	.word	0x08004788
 800169c:	20000008 	.word	0x20000008
 80016a0:	2000000c 	.word	0x2000000c
 80016a4:	4ba0      	ldr	r3, [pc, #640]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a9f      	ldr	r2, [pc, #636]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 80016aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b9d      	ldr	r3, [pc, #628]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a9c      	ldr	r2, [pc, #624]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 80016b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d013      	beq.n	80016ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff fa6e 	bl	8000ba4 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016cc:	f7ff fa6a 	bl	8000ba4 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	; 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e276      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016de:	4b92      	ldr	r3, [pc, #584]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x2a8>
 80016ea:	e014      	b.n	8001716 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff fa5a 	bl	8000ba4 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fa56 	bl	8000ba4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	; 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e262      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001706:	4b88      	ldr	r3, [pc, #544]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x2d0>
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d060      	beq.n	80017e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2b04      	cmp	r3, #4
 8001726:	d005      	beq.n	8001734 <HAL_RCC_OscConfig+0x310>
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2b0c      	cmp	r3, #12
 800172c:	d119      	bne.n	8001762 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d116      	bne.n	8001762 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001734:	4b7c      	ldr	r3, [pc, #496]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_OscConfig+0x328>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e23f      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174c:	4b76      	ldr	r3, [pc, #472]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	061b      	lsls	r3, r3, #24
 800175a:	4973      	ldr	r1, [pc, #460]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001760:	e040      	b.n	80017e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d023      	beq.n	80017b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800176a:	4b6f      	ldr	r3, [pc, #444]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a6e      	ldr	r2, [pc, #440]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 8001770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001776:	f7ff fa15 	bl	8000ba4 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177e:	f7ff fa11 	bl	8000ba4 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e21d      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001790:	4b65      	ldr	r3, [pc, #404]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179c:	4b62      	ldr	r3, [pc, #392]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	061b      	lsls	r3, r3, #24
 80017aa:	495f      	ldr	r1, [pc, #380]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
 80017b0:	e018      	b.n	80017e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b2:	4b5d      	ldr	r3, [pc, #372]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a5c      	ldr	r2, [pc, #368]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 80017b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017be:	f7ff f9f1 	bl	8000ba4 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c6:	f7ff f9ed 	bl	8000ba4 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e1f9      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d8:	4b53      	ldr	r3, [pc, #332]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f0      	bne.n	80017c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d03c      	beq.n	800186a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d01c      	beq.n	8001832 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f8:	4b4b      	ldr	r3, [pc, #300]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 80017fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fe:	4a4a      	ldr	r2, [pc, #296]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001808:	f7ff f9cc 	bl	8000ba4 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001810:	f7ff f9c8 	bl	8000ba4 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e1d4      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001822:	4b41      	ldr	r3, [pc, #260]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 8001824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0ef      	beq.n	8001810 <HAL_RCC_OscConfig+0x3ec>
 8001830:	e01b      	b.n	800186a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001832:	4b3d      	ldr	r3, [pc, #244]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 8001834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001838:	4a3b      	ldr	r2, [pc, #236]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 800183a:	f023 0301 	bic.w	r3, r3, #1
 800183e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001842:	f7ff f9af 	bl	8000ba4 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184a:	f7ff f9ab 	bl	8000ba4 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e1b7      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800185c:	4b32      	ldr	r3, [pc, #200]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 800185e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1ef      	bne.n	800184a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 80a6 	beq.w	80019c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001878:	2300      	movs	r3, #0
 800187a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 800187e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10d      	bne.n	80018a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001888:	4b27      	ldr	r3, [pc, #156]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 800188a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188c:	4a26      	ldr	r2, [pc, #152]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 800188e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001892:	6593      	str	r3, [r2, #88]	; 0x58
 8001894:	4b24      	ldr	r3, [pc, #144]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 8001896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a0:	2301      	movs	r3, #1
 80018a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a4:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_RCC_OscConfig+0x508>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d118      	bne.n	80018e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_RCC_OscConfig+0x508>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a1d      	ldr	r2, [pc, #116]	; (800192c <HAL_RCC_OscConfig+0x508>)
 80018b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018bc:	f7ff f972 	bl	8000ba4 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c4:	f7ff f96e 	bl	8000ba4 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e17a      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_RCC_OscConfig+0x508>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d108      	bne.n	80018fc <HAL_RCC_OscConfig+0x4d8>
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 80018ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f0:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018fa:	e029      	b.n	8001950 <HAL_RCC_OscConfig+0x52c>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b05      	cmp	r3, #5
 8001902:	d115      	bne.n	8001930 <HAL_RCC_OscConfig+0x50c>
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 8001906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190a:	4a07      	ldr	r2, [pc, #28]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191a:	4a03      	ldr	r2, [pc, #12]	; (8001928 <HAL_RCC_OscConfig+0x504>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001924:	e014      	b.n	8001950 <HAL_RCC_OscConfig+0x52c>
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	40007000 	.word	0x40007000
 8001930:	4b9c      	ldr	r3, [pc, #624]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001936:	4a9b      	ldr	r2, [pc, #620]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001940:	4b98      	ldr	r3, [pc, #608]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	4a97      	ldr	r2, [pc, #604]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001948:	f023 0304 	bic.w	r3, r3, #4
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d016      	beq.n	8001986 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001958:	f7ff f924 	bl	8000ba4 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800195e:	e00a      	b.n	8001976 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001960:	f7ff f920 	bl	8000ba4 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	; 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e12a      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001976:	4b8b      	ldr	r3, [pc, #556]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ed      	beq.n	8001960 <HAL_RCC_OscConfig+0x53c>
 8001984:	e015      	b.n	80019b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001986:	f7ff f90d 	bl	8000ba4 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f7ff f909 	bl	8000ba4 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f241 3288 	movw	r2, #5000	; 0x1388
 800199c:	4293      	cmp	r3, r2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e113      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019a4:	4b7f      	ldr	r3, [pc, #508]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 80019a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1ed      	bne.n	800198e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019b2:	7ffb      	ldrb	r3, [r7, #31]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d105      	bne.n	80019c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b8:	4b7a      	ldr	r3, [pc, #488]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 80019ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019bc:	4a79      	ldr	r2, [pc, #484]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 80019be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80fe 	beq.w	8001bca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	f040 80d0 	bne.w	8001b78 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019d8:	4b72      	ldr	r3, [pc, #456]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d130      	bne.n	8001a4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	3b01      	subs	r3, #1
 80019f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d127      	bne.n	8001a4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a08:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d11f      	bne.n	8001a4e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a18:	2a07      	cmp	r2, #7
 8001a1a:	bf14      	ite	ne
 8001a1c:	2201      	movne	r2, #1
 8001a1e:	2200      	moveq	r2, #0
 8001a20:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d113      	bne.n	8001a4e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	3b01      	subs	r3, #1
 8001a34:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d109      	bne.n	8001a4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	085b      	lsrs	r3, r3, #1
 8001a46:	3b01      	subs	r3, #1
 8001a48:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d06e      	beq.n	8001b2c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2b0c      	cmp	r3, #12
 8001a52:	d069      	beq.n	8001b28 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a54:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d105      	bne.n	8001a6c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a60:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0ad      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a70:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a4b      	ldr	r2, [pc, #300]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001a76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a7a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a7c:	f7ff f892 	bl	8000ba4 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff f88e 	bl	8000ba4 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e09a      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a96:	4b43      	ldr	r3, [pc, #268]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa2:	4b40      	ldr	r3, [pc, #256]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <HAL_RCC_OscConfig+0x784>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ab2:	3a01      	subs	r2, #1
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	4311      	orrs	r1, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001abc:	0212      	lsls	r2, r2, #8
 8001abe:	4311      	orrs	r1, r2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ac4:	0852      	lsrs	r2, r2, #1
 8001ac6:	3a01      	subs	r2, #1
 8001ac8:	0552      	lsls	r2, r2, #21
 8001aca:	4311      	orrs	r1, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ad0:	0852      	lsrs	r2, r2, #1
 8001ad2:	3a01      	subs	r2, #1
 8001ad4:	0652      	lsls	r2, r2, #25
 8001ad6:	4311      	orrs	r1, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001adc:	0912      	lsrs	r2, r2, #4
 8001ade:	0452      	lsls	r2, r2, #17
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	4930      	ldr	r1, [pc, #192]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ae8:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a2d      	ldr	r2, [pc, #180]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001af4:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4a2a      	ldr	r2, [pc, #168]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001afe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b00:	f7ff f850 	bl	8000ba4 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff f84c 	bl	8000ba4 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e058      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1a:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b26:	e050      	b.n	8001bca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e04f      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d148      	bne.n	8001bca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b38:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b44:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b50:	f7ff f828 	bl	8000ba4 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f824 	bl	8000ba4 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e030      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x734>
 8001b76:	e028      	b.n	8001bca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2b0c      	cmp	r3, #12
 8001b7c:	d023      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <HAL_RCC_OscConfig+0x780>)
 8001b84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8a:	f7ff f80b 	bl	8000ba4 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b90:	e00c      	b.n	8001bac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b92:	f7ff f807 	bl	8000ba4 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d905      	bls.n	8001bac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e013      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_RCC_OscConfig+0x7b0>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1ec      	bne.n	8001b92 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_RCC_OscConfig+0x7b0>)
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	4905      	ldr	r1, [pc, #20]	; (8001bd4 <HAL_RCC_OscConfig+0x7b0>)
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_RCC_OscConfig+0x7b4>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60cb      	str	r3, [r1, #12]
 8001bc4:	e001      	b.n	8001bca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3720      	adds	r7, #32
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	feeefffc 	.word	0xfeeefffc

08001bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0e7      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b75      	ldr	r3, [pc, #468]	; (8001dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d910      	bls.n	8001c20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b72      	ldr	r3, [pc, #456]	; (8001dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 0207 	bic.w	r2, r3, #7
 8001c06:	4970      	ldr	r1, [pc, #448]	; (8001dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	4b6e      	ldr	r3, [pc, #440]	; (8001dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0cf      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d010      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	4b66      	ldr	r3, [pc, #408]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d908      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3c:	4b63      	ldr	r3, [pc, #396]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4960      	ldr	r1, [pc, #384]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d04c      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d107      	bne.n	8001c72 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c62:	4b5a      	ldr	r3, [pc, #360]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d121      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0a6      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7a:	4b54      	ldr	r3, [pc, #336]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d115      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e09a      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c92:	4b4e      	ldr	r3, [pc, #312]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e08e      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca2:	4b4a      	ldr	r3, [pc, #296]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e086      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cb2:	4b46      	ldr	r3, [pc, #280]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f023 0203 	bic.w	r2, r3, #3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4943      	ldr	r1, [pc, #268]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc4:	f7fe ff6e 	bl	8000ba4 <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ccc:	f7fe ff6a 	bl	8000ba4 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e06e      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	4b3a      	ldr	r3, [pc, #232]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 020c 	and.w	r2, r3, #12
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1eb      	bne.n	8001ccc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d010      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d208      	bcs.n	8001d22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d10:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	492b      	ldr	r1, [pc, #172]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d22:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d210      	bcs.n	8001d52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d30:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f023 0207 	bic.w	r2, r3, #7
 8001d38:	4923      	ldr	r1, [pc, #140]	; (8001dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e036      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d008      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	4918      	ldr	r1, [pc, #96]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d009      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4910      	ldr	r1, [pc, #64]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d90:	f000 f824 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001d94:	4602      	mov	r2, r0
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	091b      	lsrs	r3, r3, #4
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	490b      	ldr	r1, [pc, #44]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f4>)
 8001da2:	5ccb      	ldrb	r3, [r1, r3]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dac:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_RCC_ClockConfig+0x1fc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fea5 	bl	8000b04 <HAL_InitTick>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	08004788 	.word	0x08004788
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	2000000c 	.word	0x2000000c

08001ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	; 0x24
 8001de0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dea:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df4:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x34>
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	2b0c      	cmp	r3, #12
 8001e08:	d121      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d11e      	bne.n	8001e4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e10:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e1c:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	e005      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e38:	4a2b      	ldr	r2, [pc, #172]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10d      	bne.n	8001e64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d102      	bne.n	8001e5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e54:	4b25      	ldr	r3, [pc, #148]	; (8001eec <HAL_RCC_GetSysClockFreq+0x110>)
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	e004      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e60:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	d134      	bne.n	8001ed4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d003      	beq.n	8001e82 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d003      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0xac>
 8001e80:	e005      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <HAL_RCC_GetSysClockFreq+0x110>)
 8001e84:	617b      	str	r3, [r7, #20]
      break;
 8001e86:	e005      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e8a:	617b      	str	r3, [r7, #20]
      break;
 8001e8c:	e002      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	617b      	str	r3, [r7, #20]
      break;
 8001e92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	fb03 f202 	mul.w	r2, r3, r2
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	0e5b      	lsrs	r3, r3, #25
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ed4:	69bb      	ldr	r3, [r7, #24]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3724      	adds	r7, #36	; 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	08004798 	.word	0x08004798
 8001eec:	00f42400 	.word	0x00f42400
 8001ef0:	007a1200 	.word	0x007a1200

08001ef4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f00:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f0c:	f7ff fa26 	bl	800135c <HAL_PWREx_GetVoltageRange>
 8001f10:	6178      	str	r0, [r7, #20]
 8001f12:	e014      	b.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f14:	4b25      	ldr	r3, [pc, #148]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	4a24      	ldr	r2, [pc, #144]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f20:	4b22      	ldr	r3, [pc, #136]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f2c:	f7ff fa16 	bl	800135c <HAL_PWREx_GetVoltageRange>
 8001f30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f32:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f44:	d10b      	bne.n	8001f5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b80      	cmp	r3, #128	; 0x80
 8001f4a:	d919      	bls.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f50:	d902      	bls.n	8001f58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f52:	2302      	movs	r3, #2
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	e013      	b.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f58:	2301      	movs	r3, #1
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	e010      	b.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b80      	cmp	r3, #128	; 0x80
 8001f62:	d902      	bls.n	8001f6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f64:	2303      	movs	r3, #3
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	e00a      	b.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b80      	cmp	r3, #128	; 0x80
 8001f6e:	d102      	bne.n	8001f76 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f70:	2302      	movs	r3, #2
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	e004      	b.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b70      	cmp	r3, #112	; 0x70
 8001f7a:	d101      	bne.n	8001f80 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f023 0207 	bic.w	r2, r3, #7
 8001f88:	4909      	ldr	r1, [pc, #36]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d001      	beq.n	8001fa2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40022000 	.word	0x40022000

08001fb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d001      	beq.n	8001fcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e04f      	b.n	800206c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a23      	ldr	r2, [pc, #140]	; (8002078 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01d      	beq.n	800202a <HAL_TIM_Base_Start_IT+0x76>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff6:	d018      	beq.n	800202a <HAL_TIM_Base_Start_IT+0x76>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1f      	ldr	r2, [pc, #124]	; (800207c <HAL_TIM_Base_Start_IT+0xc8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_TIM_Base_Start_IT+0x76>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <HAL_TIM_Base_Start_IT+0xcc>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00e      	beq.n	800202a <HAL_TIM_Base_Start_IT+0x76>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <HAL_TIM_Base_Start_IT+0xd0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d009      	beq.n	800202a <HAL_TIM_Base_Start_IT+0x76>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1b      	ldr	r2, [pc, #108]	; (8002088 <HAL_TIM_Base_Start_IT+0xd4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d004      	beq.n	800202a <HAL_TIM_Base_Start_IT+0x76>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a19      	ldr	r2, [pc, #100]	; (800208c <HAL_TIM_Base_Start_IT+0xd8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d115      	bne.n	8002056 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	4b17      	ldr	r3, [pc, #92]	; (8002090 <HAL_TIM_Base_Start_IT+0xdc>)
 8002032:	4013      	ands	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b06      	cmp	r3, #6
 800203a:	d015      	beq.n	8002068 <HAL_TIM_Base_Start_IT+0xb4>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002042:	d011      	beq.n	8002068 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002054:	e008      	b.n	8002068 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0201 	orr.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	e000      	b.n	800206a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002068:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40012c00 	.word	0x40012c00
 800207c:	40000400 	.word	0x40000400
 8002080:	40000800 	.word	0x40000800
 8002084:	40000c00 	.word	0x40000c00
 8002088:	40013400 	.word	0x40013400
 800208c:	40014000 	.word	0x40014000
 8002090:	00010007 	.word	0x00010007

08002094 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e049      	b.n	800213a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d106      	bne.n	80020c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f841 	bl	8002142 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3304      	adds	r3, #4
 80020d0:	4619      	mov	r1, r3
 80020d2:	4610      	mov	r0, r2
 80020d4:	f000 fe24 	bl	8002d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d109      	bne.n	800217c <HAL_TIM_PWM_Start+0x24>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	bf14      	ite	ne
 8002174:	2301      	movne	r3, #1
 8002176:	2300      	moveq	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	e03c      	b.n	80021f6 <HAL_TIM_PWM_Start+0x9e>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	2b04      	cmp	r3, #4
 8002180:	d109      	bne.n	8002196 <HAL_TIM_PWM_Start+0x3e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b01      	cmp	r3, #1
 800218c:	bf14      	ite	ne
 800218e:	2301      	movne	r3, #1
 8002190:	2300      	moveq	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	e02f      	b.n	80021f6 <HAL_TIM_PWM_Start+0x9e>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b08      	cmp	r3, #8
 800219a:	d109      	bne.n	80021b0 <HAL_TIM_PWM_Start+0x58>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	bf14      	ite	ne
 80021a8:	2301      	movne	r3, #1
 80021aa:	2300      	moveq	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	e022      	b.n	80021f6 <HAL_TIM_PWM_Start+0x9e>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2b0c      	cmp	r3, #12
 80021b4:	d109      	bne.n	80021ca <HAL_TIM_PWM_Start+0x72>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	bf14      	ite	ne
 80021c2:	2301      	movne	r3, #1
 80021c4:	2300      	moveq	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	e015      	b.n	80021f6 <HAL_TIM_PWM_Start+0x9e>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b10      	cmp	r3, #16
 80021ce:	d109      	bne.n	80021e4 <HAL_TIM_PWM_Start+0x8c>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b01      	cmp	r3, #1
 80021da:	bf14      	ite	ne
 80021dc:	2301      	movne	r3, #1
 80021de:	2300      	moveq	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	e008      	b.n	80021f6 <HAL_TIM_PWM_Start+0x9e>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	bf14      	ite	ne
 80021f0:	2301      	movne	r3, #1
 80021f2:	2300      	moveq	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e09c      	b.n	8002338 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d104      	bne.n	800220e <HAL_TIM_PWM_Start+0xb6>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800220c:	e023      	b.n	8002256 <HAL_TIM_PWM_Start+0xfe>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b04      	cmp	r3, #4
 8002212:	d104      	bne.n	800221e <HAL_TIM_PWM_Start+0xc6>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800221c:	e01b      	b.n	8002256 <HAL_TIM_PWM_Start+0xfe>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	2b08      	cmp	r3, #8
 8002222:	d104      	bne.n	800222e <HAL_TIM_PWM_Start+0xd6>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2202      	movs	r2, #2
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800222c:	e013      	b.n	8002256 <HAL_TIM_PWM_Start+0xfe>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b0c      	cmp	r3, #12
 8002232:	d104      	bne.n	800223e <HAL_TIM_PWM_Start+0xe6>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800223c:	e00b      	b.n	8002256 <HAL_TIM_PWM_Start+0xfe>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b10      	cmp	r3, #16
 8002242:	d104      	bne.n	800224e <HAL_TIM_PWM_Start+0xf6>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800224c:	e003      	b.n	8002256 <HAL_TIM_PWM_Start+0xfe>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2201      	movs	r2, #1
 800225c:	6839      	ldr	r1, [r7, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f001 f9f2 	bl	8003648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a35      	ldr	r2, [pc, #212]	; (8002340 <HAL_TIM_PWM_Start+0x1e8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <HAL_TIM_PWM_Start+0x13e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a34      	ldr	r2, [pc, #208]	; (8002344 <HAL_TIM_PWM_Start+0x1ec>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d00e      	beq.n	8002296 <HAL_TIM_PWM_Start+0x13e>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a32      	ldr	r2, [pc, #200]	; (8002348 <HAL_TIM_PWM_Start+0x1f0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d009      	beq.n	8002296 <HAL_TIM_PWM_Start+0x13e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a31      	ldr	r2, [pc, #196]	; (800234c <HAL_TIM_PWM_Start+0x1f4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d004      	beq.n	8002296 <HAL_TIM_PWM_Start+0x13e>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a2f      	ldr	r2, [pc, #188]	; (8002350 <HAL_TIM_PWM_Start+0x1f8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_TIM_PWM_Start+0x142>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_TIM_PWM_Start+0x144>
 800229a:	2300      	movs	r3, #0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d007      	beq.n	80022b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a22      	ldr	r2, [pc, #136]	; (8002340 <HAL_TIM_PWM_Start+0x1e8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01d      	beq.n	80022f6 <HAL_TIM_PWM_Start+0x19e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c2:	d018      	beq.n	80022f6 <HAL_TIM_PWM_Start+0x19e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a22      	ldr	r2, [pc, #136]	; (8002354 <HAL_TIM_PWM_Start+0x1fc>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <HAL_TIM_PWM_Start+0x19e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a21      	ldr	r2, [pc, #132]	; (8002358 <HAL_TIM_PWM_Start+0x200>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d00e      	beq.n	80022f6 <HAL_TIM_PWM_Start+0x19e>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1f      	ldr	r2, [pc, #124]	; (800235c <HAL_TIM_PWM_Start+0x204>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d009      	beq.n	80022f6 <HAL_TIM_PWM_Start+0x19e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a17      	ldr	r2, [pc, #92]	; (8002344 <HAL_TIM_PWM_Start+0x1ec>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d004      	beq.n	80022f6 <HAL_TIM_PWM_Start+0x19e>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a15      	ldr	r2, [pc, #84]	; (8002348 <HAL_TIM_PWM_Start+0x1f0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d115      	bne.n	8002322 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_TIM_PWM_Start+0x208>)
 80022fe:	4013      	ands	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b06      	cmp	r3, #6
 8002306:	d015      	beq.n	8002334 <HAL_TIM_PWM_Start+0x1dc>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800230e:	d011      	beq.n	8002334 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002320:	e008      	b.n	8002334 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0201 	orr.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	e000      	b.n	8002336 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002334:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40012c00 	.word	0x40012c00
 8002344:	40013400 	.word	0x40013400
 8002348:	40014000 	.word	0x40014000
 800234c:	40014400 	.word	0x40014400
 8002350:	40014800 	.word	0x40014800
 8002354:	40000400 	.word	0x40000400
 8002358:	40000800 	.word	0x40000800
 800235c:	40000c00 	.word	0x40000c00
 8002360:	00010007 	.word	0x00010007

08002364 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e049      	b.n	800240a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe fa10 	bl	80007b0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3304      	adds	r3, #4
 80023a0:	4619      	mov	r1, r3
 80023a2:	4610      	mov	r0, r2
 80023a4:	f000 fcbc 	bl	8002d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d104      	bne.n	8002432 <HAL_TIM_IC_Start_IT+0x1e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800242e:	b2db      	uxtb	r3, r3
 8002430:	e023      	b.n	800247a <HAL_TIM_IC_Start_IT+0x66>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b04      	cmp	r3, #4
 8002436:	d104      	bne.n	8002442 <HAL_TIM_IC_Start_IT+0x2e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800243e:	b2db      	uxtb	r3, r3
 8002440:	e01b      	b.n	800247a <HAL_TIM_IC_Start_IT+0x66>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b08      	cmp	r3, #8
 8002446:	d104      	bne.n	8002452 <HAL_TIM_IC_Start_IT+0x3e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800244e:	b2db      	uxtb	r3, r3
 8002450:	e013      	b.n	800247a <HAL_TIM_IC_Start_IT+0x66>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b0c      	cmp	r3, #12
 8002456:	d104      	bne.n	8002462 <HAL_TIM_IC_Start_IT+0x4e>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800245e:	b2db      	uxtb	r3, r3
 8002460:	e00b      	b.n	800247a <HAL_TIM_IC_Start_IT+0x66>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b10      	cmp	r3, #16
 8002466:	d104      	bne.n	8002472 <HAL_TIM_IC_Start_IT+0x5e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800246e:	b2db      	uxtb	r3, r3
 8002470:	e003      	b.n	800247a <HAL_TIM_IC_Start_IT+0x66>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002478:	b2db      	uxtb	r3, r3
 800247a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d104      	bne.n	800248c <HAL_TIM_IC_Start_IT+0x78>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002488:	b2db      	uxtb	r3, r3
 800248a:	e013      	b.n	80024b4 <HAL_TIM_IC_Start_IT+0xa0>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	2b04      	cmp	r3, #4
 8002490:	d104      	bne.n	800249c <HAL_TIM_IC_Start_IT+0x88>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002498:	b2db      	uxtb	r3, r3
 800249a:	e00b      	b.n	80024b4 <HAL_TIM_IC_Start_IT+0xa0>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d104      	bne.n	80024ac <HAL_TIM_IC_Start_IT+0x98>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	e003      	b.n	80024b4 <HAL_TIM_IC_Start_IT+0xa0>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80024b6:	7bbb      	ldrb	r3, [r7, #14]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d102      	bne.n	80024c2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80024bc:	7b7b      	ldrb	r3, [r7, #13]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d001      	beq.n	80024c6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0dd      	b.n	8002682 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d104      	bne.n	80024d6 <HAL_TIM_IC_Start_IT+0xc2>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024d4:	e023      	b.n	800251e <HAL_TIM_IC_Start_IT+0x10a>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d104      	bne.n	80024e6 <HAL_TIM_IC_Start_IT+0xd2>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024e4:	e01b      	b.n	800251e <HAL_TIM_IC_Start_IT+0x10a>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d104      	bne.n	80024f6 <HAL_TIM_IC_Start_IT+0xe2>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024f4:	e013      	b.n	800251e <HAL_TIM_IC_Start_IT+0x10a>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b0c      	cmp	r3, #12
 80024fa:	d104      	bne.n	8002506 <HAL_TIM_IC_Start_IT+0xf2>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002504:	e00b      	b.n	800251e <HAL_TIM_IC_Start_IT+0x10a>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b10      	cmp	r3, #16
 800250a:	d104      	bne.n	8002516 <HAL_TIM_IC_Start_IT+0x102>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002514:	e003      	b.n	800251e <HAL_TIM_IC_Start_IT+0x10a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2202      	movs	r2, #2
 800251a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d104      	bne.n	800252e <HAL_TIM_IC_Start_IT+0x11a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800252c:	e013      	b.n	8002556 <HAL_TIM_IC_Start_IT+0x142>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b04      	cmp	r3, #4
 8002532:	d104      	bne.n	800253e <HAL_TIM_IC_Start_IT+0x12a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800253c:	e00b      	b.n	8002556 <HAL_TIM_IC_Start_IT+0x142>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b08      	cmp	r3, #8
 8002542:	d104      	bne.n	800254e <HAL_TIM_IC_Start_IT+0x13a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800254c:	e003      	b.n	8002556 <HAL_TIM_IC_Start_IT+0x142>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2202      	movs	r2, #2
 8002552:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b0c      	cmp	r3, #12
 800255a:	d841      	bhi.n	80025e0 <HAL_TIM_IC_Start_IT+0x1cc>
 800255c:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <HAL_TIM_IC_Start_IT+0x150>)
 800255e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002562:	bf00      	nop
 8002564:	08002599 	.word	0x08002599
 8002568:	080025e1 	.word	0x080025e1
 800256c:	080025e1 	.word	0x080025e1
 8002570:	080025e1 	.word	0x080025e1
 8002574:	080025ab 	.word	0x080025ab
 8002578:	080025e1 	.word	0x080025e1
 800257c:	080025e1 	.word	0x080025e1
 8002580:	080025e1 	.word	0x080025e1
 8002584:	080025bd 	.word	0x080025bd
 8002588:	080025e1 	.word	0x080025e1
 800258c:	080025e1 	.word	0x080025e1
 8002590:	080025e1 	.word	0x080025e1
 8002594:	080025cf 	.word	0x080025cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0202 	orr.w	r2, r2, #2
 80025a6:	60da      	str	r2, [r3, #12]
      break;
 80025a8:	e01d      	b.n	80025e6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 0204 	orr.w	r2, r2, #4
 80025b8:	60da      	str	r2, [r3, #12]
      break;
 80025ba:	e014      	b.n	80025e6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0208 	orr.w	r2, r2, #8
 80025ca:	60da      	str	r2, [r3, #12]
      break;
 80025cc:	e00b      	b.n	80025e6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0210 	orr.w	r2, r2, #16
 80025dc:	60da      	str	r2, [r3, #12]
      break;
 80025de:	e002      	b.n	80025e6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      break;
 80025e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d149      	bne.n	8002680 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2201      	movs	r2, #1
 80025f2:	6839      	ldr	r1, [r7, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 f827 	bl	8003648 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a23      	ldr	r2, [pc, #140]	; (800268c <HAL_TIM_IC_Start_IT+0x278>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d01d      	beq.n	8002640 <HAL_TIM_IC_Start_IT+0x22c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260c:	d018      	beq.n	8002640 <HAL_TIM_IC_Start_IT+0x22c>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1f      	ldr	r2, [pc, #124]	; (8002690 <HAL_TIM_IC_Start_IT+0x27c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d013      	beq.n	8002640 <HAL_TIM_IC_Start_IT+0x22c>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <HAL_TIM_IC_Start_IT+0x280>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00e      	beq.n	8002640 <HAL_TIM_IC_Start_IT+0x22c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1c      	ldr	r2, [pc, #112]	; (8002698 <HAL_TIM_IC_Start_IT+0x284>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d009      	beq.n	8002640 <HAL_TIM_IC_Start_IT+0x22c>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1a      	ldr	r2, [pc, #104]	; (800269c <HAL_TIM_IC_Start_IT+0x288>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d004      	beq.n	8002640 <HAL_TIM_IC_Start_IT+0x22c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a19      	ldr	r2, [pc, #100]	; (80026a0 <HAL_TIM_IC_Start_IT+0x28c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d115      	bne.n	800266c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <HAL_TIM_IC_Start_IT+0x290>)
 8002648:	4013      	ands	r3, r2
 800264a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b06      	cmp	r3, #6
 8002650:	d015      	beq.n	800267e <HAL_TIM_IC_Start_IT+0x26a>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d011      	beq.n	800267e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0201 	orr.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266a:	e008      	b.n	800267e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	e000      	b.n	8002680 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40000400 	.word	0x40000400
 8002694:	40000800 	.word	0x40000800
 8002698:	40000c00 	.word	0x40000c00
 800269c:	40013400 	.word	0x40013400
 80026a0:	40014000 	.word	0x40014000
 80026a4:	00010007 	.word	0x00010007

080026a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d122      	bne.n	8002704 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d11b      	bne.n	8002704 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0202 	mvn.w	r2, #2
 80026d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fd fdc0 	bl	8000270 <HAL_TIM_IC_CaptureCallback>
 80026f0:	e005      	b.n	80026fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 faf6 	bl	8002ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fafd 	bl	8002cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b04      	cmp	r3, #4
 8002710:	d122      	bne.n	8002758 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b04      	cmp	r3, #4
 800271e:	d11b      	bne.n	8002758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0204 	mvn.w	r2, #4
 8002728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2202      	movs	r2, #2
 800272e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fd fd96 	bl	8000270 <HAL_TIM_IC_CaptureCallback>
 8002744:	e005      	b.n	8002752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 facc 	bl	8002ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fad3 	bl	8002cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b08      	cmp	r3, #8
 8002764:	d122      	bne.n	80027ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b08      	cmp	r3, #8
 8002772:	d11b      	bne.n	80027ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0208 	mvn.w	r2, #8
 800277c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2204      	movs	r2, #4
 8002782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fd fd6c 	bl	8000270 <HAL_TIM_IC_CaptureCallback>
 8002798:	e005      	b.n	80027a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 faa2 	bl	8002ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 faa9 	bl	8002cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	2b10      	cmp	r3, #16
 80027b8:	d122      	bne.n	8002800 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d11b      	bne.n	8002800 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0210 	mvn.w	r2, #16
 80027d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2208      	movs	r2, #8
 80027d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7fd fd42 	bl	8000270 <HAL_TIM_IC_CaptureCallback>
 80027ec:	e005      	b.n	80027fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fa78 	bl	8002ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fa7f 	bl	8002cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b01      	cmp	r3, #1
 800280c:	d10e      	bne.n	800282c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b01      	cmp	r3, #1
 800281a:	d107      	bne.n	800282c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0201 	mvn.w	r2, #1
 8002824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fa52 	bl	8002cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002836:	2b80      	cmp	r3, #128	; 0x80
 8002838:	d10e      	bne.n	8002858 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002844:	2b80      	cmp	r3, #128	; 0x80
 8002846:	d107      	bne.n	8002858 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 ffb0 	bl	80037b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002866:	d10e      	bne.n	8002886 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002872:	2b80      	cmp	r3, #128	; 0x80
 8002874:	d107      	bne.n	8002886 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800287e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 ffa3 	bl	80037cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	d10e      	bne.n	80028b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	d107      	bne.n	80028b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 fa2d 	bl	8002d0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f003 0320 	and.w	r3, r3, #32
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d10e      	bne.n	80028de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b20      	cmp	r3, #32
 80028cc:	d107      	bne.n	80028de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f06f 0220 	mvn.w	r2, #32
 80028d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 ff63 	bl	80037a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b086      	sub	sp, #24
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002900:	2302      	movs	r3, #2
 8002902:	e088      	b.n	8002a16 <HAL_TIM_IC_ConfigChannel+0x130>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d11b      	bne.n	800294a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	6819      	ldr	r1, [r3, #0]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f000 fd6d 	bl	8003400 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699a      	ldr	r2, [r3, #24]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 020c 	bic.w	r2, r2, #12
 8002934:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6999      	ldr	r1, [r3, #24]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	619a      	str	r2, [r3, #24]
 8002948:	e060      	b.n	8002a0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b04      	cmp	r3, #4
 800294e:	d11c      	bne.n	800298a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	6819      	ldr	r1, [r3, #0]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f000 fdbc 	bl	80034dc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699a      	ldr	r2, [r3, #24]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002972:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6999      	ldr	r1, [r3, #24]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	021a      	lsls	r2, r3, #8
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	619a      	str	r2, [r3, #24]
 8002988:	e040      	b.n	8002a0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b08      	cmp	r3, #8
 800298e:	d11b      	bne.n	80029c8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	6819      	ldr	r1, [r3, #0]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f000 fdd9 	bl	8003556 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 020c 	bic.w	r2, r2, #12
 80029b2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	69d9      	ldr	r1, [r3, #28]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	61da      	str	r2, [r3, #28]
 80029c6:	e021      	b.n	8002a0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d11c      	bne.n	8002a08 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	6819      	ldr	r1, [r3, #0]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f000 fdf6 	bl	80035ce <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80029f0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69d9      	ldr	r1, [r3, #28]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	021a      	lsls	r2, r3, #8
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	61da      	str	r2, [r3, #28]
 8002a06:	e001      	b.n	8002a0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e0ff      	b.n	8002c3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b14      	cmp	r3, #20
 8002a4a:	f200 80f0 	bhi.w	8002c2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002a4e:	a201      	add	r2, pc, #4	; (adr r2, 8002a54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a54:	08002aa9 	.word	0x08002aa9
 8002a58:	08002c2f 	.word	0x08002c2f
 8002a5c:	08002c2f 	.word	0x08002c2f
 8002a60:	08002c2f 	.word	0x08002c2f
 8002a64:	08002ae9 	.word	0x08002ae9
 8002a68:	08002c2f 	.word	0x08002c2f
 8002a6c:	08002c2f 	.word	0x08002c2f
 8002a70:	08002c2f 	.word	0x08002c2f
 8002a74:	08002b2b 	.word	0x08002b2b
 8002a78:	08002c2f 	.word	0x08002c2f
 8002a7c:	08002c2f 	.word	0x08002c2f
 8002a80:	08002c2f 	.word	0x08002c2f
 8002a84:	08002b6b 	.word	0x08002b6b
 8002a88:	08002c2f 	.word	0x08002c2f
 8002a8c:	08002c2f 	.word	0x08002c2f
 8002a90:	08002c2f 	.word	0x08002c2f
 8002a94:	08002bad 	.word	0x08002bad
 8002a98:	08002c2f 	.word	0x08002c2f
 8002a9c:	08002c2f 	.word	0x08002c2f
 8002aa0:	08002c2f 	.word	0x08002c2f
 8002aa4:	08002bed 	.word	0x08002bed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f9d0 	bl	8002e54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699a      	ldr	r2, [r3, #24]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0208 	orr.w	r2, r2, #8
 8002ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0204 	bic.w	r2, r2, #4
 8002ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6999      	ldr	r1, [r3, #24]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	619a      	str	r2, [r3, #24]
      break;
 8002ae6:	e0a5      	b.n	8002c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fa40 	bl	8002f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6999      	ldr	r1, [r3, #24]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	021a      	lsls	r2, r3, #8
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	619a      	str	r2, [r3, #24]
      break;
 8002b28:	e084      	b.n	8002c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 faa9 	bl	8003088 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69da      	ldr	r2, [r3, #28]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0208 	orr.w	r2, r2, #8
 8002b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	69da      	ldr	r2, [r3, #28]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0204 	bic.w	r2, r2, #4
 8002b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69d9      	ldr	r1, [r3, #28]
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	61da      	str	r2, [r3, #28]
      break;
 8002b68:	e064      	b.n	8002c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68b9      	ldr	r1, [r7, #8]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fb11 	bl	8003198 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69da      	ldr	r2, [r3, #28]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69da      	ldr	r2, [r3, #28]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69d9      	ldr	r1, [r3, #28]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	021a      	lsls	r2, r3, #8
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	61da      	str	r2, [r3, #28]
      break;
 8002baa:	e043      	b.n	8002c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fb5a 	bl	800326c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0208 	orr.w	r2, r2, #8
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0204 	bic.w	r2, r2, #4
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	691a      	ldr	r2, [r3, #16]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002bea:	e023      	b.n	8002c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fb9e 	bl	8003334 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	021a      	lsls	r2, r3, #8
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002c2c:	e002      	b.n	8002c34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	75fb      	strb	r3, [r7, #23]
      break;
 8002c32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop

08002c48 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b0c      	cmp	r3, #12
 8002c5a:	d831      	bhi.n	8002cc0 <HAL_TIM_ReadCapturedValue+0x78>
 8002c5c:	a201      	add	r2, pc, #4	; (adr r2, 8002c64 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c62:	bf00      	nop
 8002c64:	08002c99 	.word	0x08002c99
 8002c68:	08002cc1 	.word	0x08002cc1
 8002c6c:	08002cc1 	.word	0x08002cc1
 8002c70:	08002cc1 	.word	0x08002cc1
 8002c74:	08002ca3 	.word	0x08002ca3
 8002c78:	08002cc1 	.word	0x08002cc1
 8002c7c:	08002cc1 	.word	0x08002cc1
 8002c80:	08002cc1 	.word	0x08002cc1
 8002c84:	08002cad 	.word	0x08002cad
 8002c88:	08002cc1 	.word	0x08002cc1
 8002c8c:	08002cc1 	.word	0x08002cc1
 8002c90:	08002cc1 	.word	0x08002cc1
 8002c94:	08002cb7 	.word	0x08002cb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9e:	60fb      	str	r3, [r7, #12]

      break;
 8002ca0:	e00f      	b.n	8002cc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	60fb      	str	r3, [r7, #12]

      break;
 8002caa:	e00a      	b.n	8002cc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb2:	60fb      	str	r3, [r7, #12]

      break;
 8002cb4:	e005      	b.n	8002cc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	60fb      	str	r3, [r7, #12]

      break;
 8002cbe:	e000      	b.n	8002cc2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002cc0:	bf00      	nop
  }

  return tmpreg;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a40      	ldr	r2, [pc, #256]	; (8002e34 <TIM_Base_SetConfig+0x114>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d013      	beq.n	8002d60 <TIM_Base_SetConfig+0x40>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3e:	d00f      	beq.n	8002d60 <TIM_Base_SetConfig+0x40>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a3d      	ldr	r2, [pc, #244]	; (8002e38 <TIM_Base_SetConfig+0x118>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00b      	beq.n	8002d60 <TIM_Base_SetConfig+0x40>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a3c      	ldr	r2, [pc, #240]	; (8002e3c <TIM_Base_SetConfig+0x11c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d007      	beq.n	8002d60 <TIM_Base_SetConfig+0x40>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3b      	ldr	r2, [pc, #236]	; (8002e40 <TIM_Base_SetConfig+0x120>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d003      	beq.n	8002d60 <TIM_Base_SetConfig+0x40>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a3a      	ldr	r2, [pc, #232]	; (8002e44 <TIM_Base_SetConfig+0x124>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d108      	bne.n	8002d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a2f      	ldr	r2, [pc, #188]	; (8002e34 <TIM_Base_SetConfig+0x114>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d01f      	beq.n	8002dba <TIM_Base_SetConfig+0x9a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d80:	d01b      	beq.n	8002dba <TIM_Base_SetConfig+0x9a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2c      	ldr	r2, [pc, #176]	; (8002e38 <TIM_Base_SetConfig+0x118>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d017      	beq.n	8002dba <TIM_Base_SetConfig+0x9a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a2b      	ldr	r2, [pc, #172]	; (8002e3c <TIM_Base_SetConfig+0x11c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d013      	beq.n	8002dba <TIM_Base_SetConfig+0x9a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a2a      	ldr	r2, [pc, #168]	; (8002e40 <TIM_Base_SetConfig+0x120>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00f      	beq.n	8002dba <TIM_Base_SetConfig+0x9a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a29      	ldr	r2, [pc, #164]	; (8002e44 <TIM_Base_SetConfig+0x124>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00b      	beq.n	8002dba <TIM_Base_SetConfig+0x9a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a28      	ldr	r2, [pc, #160]	; (8002e48 <TIM_Base_SetConfig+0x128>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d007      	beq.n	8002dba <TIM_Base_SetConfig+0x9a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a27      	ldr	r2, [pc, #156]	; (8002e4c <TIM_Base_SetConfig+0x12c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d003      	beq.n	8002dba <TIM_Base_SetConfig+0x9a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a26      	ldr	r2, [pc, #152]	; (8002e50 <TIM_Base_SetConfig+0x130>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d108      	bne.n	8002dcc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a10      	ldr	r2, [pc, #64]	; (8002e34 <TIM_Base_SetConfig+0x114>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00f      	beq.n	8002e18 <TIM_Base_SetConfig+0xf8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <TIM_Base_SetConfig+0x124>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00b      	beq.n	8002e18 <TIM_Base_SetConfig+0xf8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a11      	ldr	r2, [pc, #68]	; (8002e48 <TIM_Base_SetConfig+0x128>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d007      	beq.n	8002e18 <TIM_Base_SetConfig+0xf8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a10      	ldr	r2, [pc, #64]	; (8002e4c <TIM_Base_SetConfig+0x12c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_Base_SetConfig+0xf8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a0f      	ldr	r2, [pc, #60]	; (8002e50 <TIM_Base_SetConfig+0x130>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d103      	bne.n	8002e20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	615a      	str	r2, [r3, #20]
}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40012c00 	.word	0x40012c00
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40000800 	.word	0x40000800
 8002e40:	40000c00 	.word	0x40000c00
 8002e44:	40013400 	.word	0x40013400
 8002e48:	40014000 	.word	0x40014000
 8002e4c:	40014400 	.word	0x40014400
 8002e50:	40014800 	.word	0x40014800

08002e54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	f023 0201 	bic.w	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0303 	bic.w	r3, r3, #3
 8002e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f023 0302 	bic.w	r3, r3, #2
 8002ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a2c      	ldr	r2, [pc, #176]	; (8002f60 <TIM_OC1_SetConfig+0x10c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00f      	beq.n	8002ed4 <TIM_OC1_SetConfig+0x80>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a2b      	ldr	r2, [pc, #172]	; (8002f64 <TIM_OC1_SetConfig+0x110>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00b      	beq.n	8002ed4 <TIM_OC1_SetConfig+0x80>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a2a      	ldr	r2, [pc, #168]	; (8002f68 <TIM_OC1_SetConfig+0x114>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d007      	beq.n	8002ed4 <TIM_OC1_SetConfig+0x80>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a29      	ldr	r2, [pc, #164]	; (8002f6c <TIM_OC1_SetConfig+0x118>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d003      	beq.n	8002ed4 <TIM_OC1_SetConfig+0x80>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <TIM_OC1_SetConfig+0x11c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d10c      	bne.n	8002eee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f023 0308 	bic.w	r3, r3, #8
 8002eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f023 0304 	bic.w	r3, r3, #4
 8002eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a1b      	ldr	r2, [pc, #108]	; (8002f60 <TIM_OC1_SetConfig+0x10c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00f      	beq.n	8002f16 <TIM_OC1_SetConfig+0xc2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a1a      	ldr	r2, [pc, #104]	; (8002f64 <TIM_OC1_SetConfig+0x110>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00b      	beq.n	8002f16 <TIM_OC1_SetConfig+0xc2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <TIM_OC1_SetConfig+0x114>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d007      	beq.n	8002f16 <TIM_OC1_SetConfig+0xc2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <TIM_OC1_SetConfig+0x118>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d003      	beq.n	8002f16 <TIM_OC1_SetConfig+0xc2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a17      	ldr	r2, [pc, #92]	; (8002f70 <TIM_OC1_SetConfig+0x11c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d111      	bne.n	8002f3a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	621a      	str	r2, [r3, #32]
}
 8002f54:	bf00      	nop
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40013400 	.word	0x40013400
 8002f68:	40014000 	.word	0x40014000
 8002f6c:	40014400 	.word	0x40014400
 8002f70:	40014800 	.word	0x40014800

08002f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f023 0210 	bic.w	r2, r3, #16
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f023 0320 	bic.w	r3, r3, #32
 8002fc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a28      	ldr	r2, [pc, #160]	; (8003074 <TIM_OC2_SetConfig+0x100>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d003      	beq.n	8002fe0 <TIM_OC2_SetConfig+0x6c>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a27      	ldr	r2, [pc, #156]	; (8003078 <TIM_OC2_SetConfig+0x104>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d10d      	bne.n	8002ffc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ffa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a1d      	ldr	r2, [pc, #116]	; (8003074 <TIM_OC2_SetConfig+0x100>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00f      	beq.n	8003024 <TIM_OC2_SetConfig+0xb0>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a1c      	ldr	r2, [pc, #112]	; (8003078 <TIM_OC2_SetConfig+0x104>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00b      	beq.n	8003024 <TIM_OC2_SetConfig+0xb0>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a1b      	ldr	r2, [pc, #108]	; (800307c <TIM_OC2_SetConfig+0x108>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d007      	beq.n	8003024 <TIM_OC2_SetConfig+0xb0>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a1a      	ldr	r2, [pc, #104]	; (8003080 <TIM_OC2_SetConfig+0x10c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d003      	beq.n	8003024 <TIM_OC2_SetConfig+0xb0>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a19      	ldr	r2, [pc, #100]	; (8003084 <TIM_OC2_SetConfig+0x110>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d113      	bne.n	800304c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800302a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	621a      	str	r2, [r3, #32]
}
 8003066:	bf00      	nop
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40012c00 	.word	0x40012c00
 8003078:	40013400 	.word	0x40013400
 800307c:	40014000 	.word	0x40014000
 8003080:	40014400 	.word	0x40014400
 8003084:	40014800 	.word	0x40014800

08003088 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0303 	bic.w	r3, r3, #3
 80030c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a27      	ldr	r2, [pc, #156]	; (8003184 <TIM_OC3_SetConfig+0xfc>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d003      	beq.n	80030f2 <TIM_OC3_SetConfig+0x6a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a26      	ldr	r2, [pc, #152]	; (8003188 <TIM_OC3_SetConfig+0x100>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10d      	bne.n	800310e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800310c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a1c      	ldr	r2, [pc, #112]	; (8003184 <TIM_OC3_SetConfig+0xfc>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00f      	beq.n	8003136 <TIM_OC3_SetConfig+0xae>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a1b      	ldr	r2, [pc, #108]	; (8003188 <TIM_OC3_SetConfig+0x100>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00b      	beq.n	8003136 <TIM_OC3_SetConfig+0xae>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a1a      	ldr	r2, [pc, #104]	; (800318c <TIM_OC3_SetConfig+0x104>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d007      	beq.n	8003136 <TIM_OC3_SetConfig+0xae>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a19      	ldr	r2, [pc, #100]	; (8003190 <TIM_OC3_SetConfig+0x108>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d003      	beq.n	8003136 <TIM_OC3_SetConfig+0xae>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a18      	ldr	r2, [pc, #96]	; (8003194 <TIM_OC3_SetConfig+0x10c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d113      	bne.n	800315e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800313c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	621a      	str	r2, [r3, #32]
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	40012c00 	.word	0x40012c00
 8003188:	40013400 	.word	0x40013400
 800318c:	40014000 	.word	0x40014000
 8003190:	40014400 	.word	0x40014400
 8003194:	40014800 	.word	0x40014800

08003198 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	031b      	lsls	r3, r3, #12
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a18      	ldr	r2, [pc, #96]	; (8003258 <TIM_OC4_SetConfig+0xc0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00f      	beq.n	800321c <TIM_OC4_SetConfig+0x84>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a17      	ldr	r2, [pc, #92]	; (800325c <TIM_OC4_SetConfig+0xc4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00b      	beq.n	800321c <TIM_OC4_SetConfig+0x84>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a16      	ldr	r2, [pc, #88]	; (8003260 <TIM_OC4_SetConfig+0xc8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d007      	beq.n	800321c <TIM_OC4_SetConfig+0x84>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a15      	ldr	r2, [pc, #84]	; (8003264 <TIM_OC4_SetConfig+0xcc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_OC4_SetConfig+0x84>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a14      	ldr	r2, [pc, #80]	; (8003268 <TIM_OC4_SetConfig+0xd0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d109      	bne.n	8003230 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	019b      	lsls	r3, r3, #6
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40012c00 	.word	0x40012c00
 800325c:	40013400 	.word	0x40013400
 8003260:	40014000 	.word	0x40014000
 8003264:	40014400 	.word	0x40014400
 8003268:	40014800 	.word	0x40014800

0800326c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80032b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a17      	ldr	r2, [pc, #92]	; (8003320 <TIM_OC5_SetConfig+0xb4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00f      	beq.n	80032e6 <TIM_OC5_SetConfig+0x7a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a16      	ldr	r2, [pc, #88]	; (8003324 <TIM_OC5_SetConfig+0xb8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00b      	beq.n	80032e6 <TIM_OC5_SetConfig+0x7a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a15      	ldr	r2, [pc, #84]	; (8003328 <TIM_OC5_SetConfig+0xbc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <TIM_OC5_SetConfig+0x7a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a14      	ldr	r2, [pc, #80]	; (800332c <TIM_OC5_SetConfig+0xc0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d003      	beq.n	80032e6 <TIM_OC5_SetConfig+0x7a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a13      	ldr	r2, [pc, #76]	; (8003330 <TIM_OC5_SetConfig+0xc4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d109      	bne.n	80032fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	621a      	str	r2, [r3, #32]
}
 8003314:	bf00      	nop
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40013400 	.word	0x40013400
 8003328:	40014000 	.word	0x40014000
 800332c:	40014400 	.word	0x40014400
 8003330:	40014800 	.word	0x40014800

08003334 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	021b      	lsls	r3, r3, #8
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800337a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a18      	ldr	r2, [pc, #96]	; (80033ec <TIM_OC6_SetConfig+0xb8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00f      	beq.n	80033b0 <TIM_OC6_SetConfig+0x7c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a17      	ldr	r2, [pc, #92]	; (80033f0 <TIM_OC6_SetConfig+0xbc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00b      	beq.n	80033b0 <TIM_OC6_SetConfig+0x7c>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a16      	ldr	r2, [pc, #88]	; (80033f4 <TIM_OC6_SetConfig+0xc0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d007      	beq.n	80033b0 <TIM_OC6_SetConfig+0x7c>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <TIM_OC6_SetConfig+0xc4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d003      	beq.n	80033b0 <TIM_OC6_SetConfig+0x7c>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a14      	ldr	r2, [pc, #80]	; (80033fc <TIM_OC6_SetConfig+0xc8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d109      	bne.n	80033c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	029b      	lsls	r3, r3, #10
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	621a      	str	r2, [r3, #32]
}
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40012c00 	.word	0x40012c00
 80033f0:	40013400 	.word	0x40013400
 80033f4:	40014000 	.word	0x40014000
 80033f8:	40014400 	.word	0x40014400
 80033fc:	40014800 	.word	0x40014800

08003400 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
 800340c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f023 0201 	bic.w	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4a26      	ldr	r2, [pc, #152]	; (80034c4 <TIM_TI1_SetConfig+0xc4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d017      	beq.n	800345e <TIM_TI1_SetConfig+0x5e>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003434:	d013      	beq.n	800345e <TIM_TI1_SetConfig+0x5e>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a23      	ldr	r2, [pc, #140]	; (80034c8 <TIM_TI1_SetConfig+0xc8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00f      	beq.n	800345e <TIM_TI1_SetConfig+0x5e>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4a22      	ldr	r2, [pc, #136]	; (80034cc <TIM_TI1_SetConfig+0xcc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00b      	beq.n	800345e <TIM_TI1_SetConfig+0x5e>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4a21      	ldr	r2, [pc, #132]	; (80034d0 <TIM_TI1_SetConfig+0xd0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d007      	beq.n	800345e <TIM_TI1_SetConfig+0x5e>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4a20      	ldr	r2, [pc, #128]	; (80034d4 <TIM_TI1_SetConfig+0xd4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d003      	beq.n	800345e <TIM_TI1_SetConfig+0x5e>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <TIM_TI1_SetConfig+0xd8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <TIM_TI1_SetConfig+0x62>
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <TIM_TI1_SetConfig+0x64>
 8003462:	2300      	movs	r3, #0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f023 0303 	bic.w	r3, r3, #3
 800346e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	e003      	b.n	8003482 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003488:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	b2db      	uxtb	r3, r3
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f023 030a 	bic.w	r3, r3, #10
 800349c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f003 030a 	and.w	r3, r3, #10
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	621a      	str	r2, [r3, #32]
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40012c00 	.word	0x40012c00
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40000800 	.word	0x40000800
 80034d0:	40000c00 	.word	0x40000c00
 80034d4:	40013400 	.word	0x40013400
 80034d8:	40014000 	.word	0x40014000

080034dc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	f023 0210 	bic.w	r2, r3, #16
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003508:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	021b      	lsls	r3, r3, #8
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800351a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	031b      	lsls	r3, r3, #12
 8003520:	b29b      	uxth	r3, r3
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4313      	orrs	r3, r2
 8003526:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800352e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	621a      	str	r2, [r3, #32]
}
 800354a:	bf00      	nop
 800354c:	371c      	adds	r7, #28
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003556:	b480      	push	{r7}
 8003558:	b087      	sub	sp, #28
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f023 0303 	bic.w	r3, r3, #3
 8003582:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003592:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	b2db      	uxtb	r3, r3
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4313      	orrs	r3, r2
 800359e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80035a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	621a      	str	r2, [r3, #32]
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b087      	sub	sp, #28
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800360c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	031b      	lsls	r3, r3, #12
 8003612:	b29b      	uxth	r3, r3
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003620:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	031b      	lsls	r3, r3, #12
 8003626:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	621a      	str	r2, [r3, #32]
}
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2201      	movs	r2, #1
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a1a      	ldr	r2, [r3, #32]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	43db      	mvns	r3, r3
 800366a:	401a      	ands	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a1a      	ldr	r2, [r3, #32]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	fa01 f303 	lsl.w	r3, r1, r3
 8003680:	431a      	orrs	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	621a      	str	r2, [r3, #32]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
	...

08003694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e068      	b.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a2e      	ldr	r2, [pc, #184]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d004      	beq.n	80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a2d      	ldr	r2, [pc, #180]	; (8003790 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d108      	bne.n	80036f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1e      	ldr	r2, [pc, #120]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01d      	beq.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371e:	d018      	beq.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1a      	ldr	r2, [pc, #104]	; (8003798 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00e      	beq.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a18      	ldr	r2, [pc, #96]	; (800379c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d009      	beq.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a13      	ldr	r2, [pc, #76]	; (8003790 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d004      	beq.n	8003752 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a14      	ldr	r2, [pc, #80]	; (80037a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d10c      	bne.n	800376c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	4313      	orrs	r3, r2
 8003762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40012c00 	.word	0x40012c00
 8003790:	40013400 	.word	0x40013400
 8003794:	40000400 	.word	0x40000400
 8003798:	40000800 	.word	0x40000800
 800379c:	40000c00 	.word	0x40000c00
 80037a0:	40014000 	.word	0x40014000

080037a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <__errno>:
 80037e0:	4b01      	ldr	r3, [pc, #4]	; (80037e8 <__errno+0x8>)
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000014 	.word	0x20000014

080037ec <__libc_init_array>:
 80037ec:	b570      	push	{r4, r5, r6, lr}
 80037ee:	4d0d      	ldr	r5, [pc, #52]	; (8003824 <__libc_init_array+0x38>)
 80037f0:	4c0d      	ldr	r4, [pc, #52]	; (8003828 <__libc_init_array+0x3c>)
 80037f2:	1b64      	subs	r4, r4, r5
 80037f4:	10a4      	asrs	r4, r4, #2
 80037f6:	2600      	movs	r6, #0
 80037f8:	42a6      	cmp	r6, r4
 80037fa:	d109      	bne.n	8003810 <__libc_init_array+0x24>
 80037fc:	4d0b      	ldr	r5, [pc, #44]	; (800382c <__libc_init_array+0x40>)
 80037fe:	4c0c      	ldr	r4, [pc, #48]	; (8003830 <__libc_init_array+0x44>)
 8003800:	f000 ffae 	bl	8004760 <_init>
 8003804:	1b64      	subs	r4, r4, r5
 8003806:	10a4      	asrs	r4, r4, #2
 8003808:	2600      	movs	r6, #0
 800380a:	42a6      	cmp	r6, r4
 800380c:	d105      	bne.n	800381a <__libc_init_array+0x2e>
 800380e:	bd70      	pop	{r4, r5, r6, pc}
 8003810:	f855 3b04 	ldr.w	r3, [r5], #4
 8003814:	4798      	blx	r3
 8003816:	3601      	adds	r6, #1
 8003818:	e7ee      	b.n	80037f8 <__libc_init_array+0xc>
 800381a:	f855 3b04 	ldr.w	r3, [r5], #4
 800381e:	4798      	blx	r3
 8003820:	3601      	adds	r6, #1
 8003822:	e7f2      	b.n	800380a <__libc_init_array+0x1e>
 8003824:	08004860 	.word	0x08004860
 8003828:	08004860 	.word	0x08004860
 800382c:	08004860 	.word	0x08004860
 8003830:	08004864 	.word	0x08004864

08003834 <memset>:
 8003834:	4402      	add	r2, r0
 8003836:	4603      	mov	r3, r0
 8003838:	4293      	cmp	r3, r2
 800383a:	d100      	bne.n	800383e <memset+0xa>
 800383c:	4770      	bx	lr
 800383e:	f803 1b01 	strb.w	r1, [r3], #1
 8003842:	e7f9      	b.n	8003838 <memset+0x4>

08003844 <__sfputc_r>:
 8003844:	6893      	ldr	r3, [r2, #8]
 8003846:	3b01      	subs	r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	b410      	push	{r4}
 800384c:	6093      	str	r3, [r2, #8]
 800384e:	da08      	bge.n	8003862 <__sfputc_r+0x1e>
 8003850:	6994      	ldr	r4, [r2, #24]
 8003852:	42a3      	cmp	r3, r4
 8003854:	db01      	blt.n	800385a <__sfputc_r+0x16>
 8003856:	290a      	cmp	r1, #10
 8003858:	d103      	bne.n	8003862 <__sfputc_r+0x1e>
 800385a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800385e:	f000 baf7 	b.w	8003e50 <__swbuf_r>
 8003862:	6813      	ldr	r3, [r2, #0]
 8003864:	1c58      	adds	r0, r3, #1
 8003866:	6010      	str	r0, [r2, #0]
 8003868:	7019      	strb	r1, [r3, #0]
 800386a:	4608      	mov	r0, r1
 800386c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003870:	4770      	bx	lr

08003872 <__sfputs_r>:
 8003872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003874:	4606      	mov	r6, r0
 8003876:	460f      	mov	r7, r1
 8003878:	4614      	mov	r4, r2
 800387a:	18d5      	adds	r5, r2, r3
 800387c:	42ac      	cmp	r4, r5
 800387e:	d101      	bne.n	8003884 <__sfputs_r+0x12>
 8003880:	2000      	movs	r0, #0
 8003882:	e007      	b.n	8003894 <__sfputs_r+0x22>
 8003884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003888:	463a      	mov	r2, r7
 800388a:	4630      	mov	r0, r6
 800388c:	f7ff ffda 	bl	8003844 <__sfputc_r>
 8003890:	1c43      	adds	r3, r0, #1
 8003892:	d1f3      	bne.n	800387c <__sfputs_r+0xa>
 8003894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003898 <_vfiprintf_r>:
 8003898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800389c:	460d      	mov	r5, r1
 800389e:	b09d      	sub	sp, #116	; 0x74
 80038a0:	4614      	mov	r4, r2
 80038a2:	4698      	mov	r8, r3
 80038a4:	4606      	mov	r6, r0
 80038a6:	b118      	cbz	r0, 80038b0 <_vfiprintf_r+0x18>
 80038a8:	6983      	ldr	r3, [r0, #24]
 80038aa:	b90b      	cbnz	r3, 80038b0 <_vfiprintf_r+0x18>
 80038ac:	f000 fcaa 	bl	8004204 <__sinit>
 80038b0:	4b89      	ldr	r3, [pc, #548]	; (8003ad8 <_vfiprintf_r+0x240>)
 80038b2:	429d      	cmp	r5, r3
 80038b4:	d11b      	bne.n	80038ee <_vfiprintf_r+0x56>
 80038b6:	6875      	ldr	r5, [r6, #4]
 80038b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038ba:	07d9      	lsls	r1, r3, #31
 80038bc:	d405      	bmi.n	80038ca <_vfiprintf_r+0x32>
 80038be:	89ab      	ldrh	r3, [r5, #12]
 80038c0:	059a      	lsls	r2, r3, #22
 80038c2:	d402      	bmi.n	80038ca <_vfiprintf_r+0x32>
 80038c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038c6:	f000 fd3b 	bl	8004340 <__retarget_lock_acquire_recursive>
 80038ca:	89ab      	ldrh	r3, [r5, #12]
 80038cc:	071b      	lsls	r3, r3, #28
 80038ce:	d501      	bpl.n	80038d4 <_vfiprintf_r+0x3c>
 80038d0:	692b      	ldr	r3, [r5, #16]
 80038d2:	b9eb      	cbnz	r3, 8003910 <_vfiprintf_r+0x78>
 80038d4:	4629      	mov	r1, r5
 80038d6:	4630      	mov	r0, r6
 80038d8:	f000 fb0c 	bl	8003ef4 <__swsetup_r>
 80038dc:	b1c0      	cbz	r0, 8003910 <_vfiprintf_r+0x78>
 80038de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038e0:	07dc      	lsls	r4, r3, #31
 80038e2:	d50e      	bpl.n	8003902 <_vfiprintf_r+0x6a>
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038e8:	b01d      	add	sp, #116	; 0x74
 80038ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ee:	4b7b      	ldr	r3, [pc, #492]	; (8003adc <_vfiprintf_r+0x244>)
 80038f0:	429d      	cmp	r5, r3
 80038f2:	d101      	bne.n	80038f8 <_vfiprintf_r+0x60>
 80038f4:	68b5      	ldr	r5, [r6, #8]
 80038f6:	e7df      	b.n	80038b8 <_vfiprintf_r+0x20>
 80038f8:	4b79      	ldr	r3, [pc, #484]	; (8003ae0 <_vfiprintf_r+0x248>)
 80038fa:	429d      	cmp	r5, r3
 80038fc:	bf08      	it	eq
 80038fe:	68f5      	ldreq	r5, [r6, #12]
 8003900:	e7da      	b.n	80038b8 <_vfiprintf_r+0x20>
 8003902:	89ab      	ldrh	r3, [r5, #12]
 8003904:	0598      	lsls	r0, r3, #22
 8003906:	d4ed      	bmi.n	80038e4 <_vfiprintf_r+0x4c>
 8003908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800390a:	f000 fd1a 	bl	8004342 <__retarget_lock_release_recursive>
 800390e:	e7e9      	b.n	80038e4 <_vfiprintf_r+0x4c>
 8003910:	2300      	movs	r3, #0
 8003912:	9309      	str	r3, [sp, #36]	; 0x24
 8003914:	2320      	movs	r3, #32
 8003916:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800391a:	f8cd 800c 	str.w	r8, [sp, #12]
 800391e:	2330      	movs	r3, #48	; 0x30
 8003920:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003ae4 <_vfiprintf_r+0x24c>
 8003924:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003928:	f04f 0901 	mov.w	r9, #1
 800392c:	4623      	mov	r3, r4
 800392e:	469a      	mov	sl, r3
 8003930:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003934:	b10a      	cbz	r2, 800393a <_vfiprintf_r+0xa2>
 8003936:	2a25      	cmp	r2, #37	; 0x25
 8003938:	d1f9      	bne.n	800392e <_vfiprintf_r+0x96>
 800393a:	ebba 0b04 	subs.w	fp, sl, r4
 800393e:	d00b      	beq.n	8003958 <_vfiprintf_r+0xc0>
 8003940:	465b      	mov	r3, fp
 8003942:	4622      	mov	r2, r4
 8003944:	4629      	mov	r1, r5
 8003946:	4630      	mov	r0, r6
 8003948:	f7ff ff93 	bl	8003872 <__sfputs_r>
 800394c:	3001      	adds	r0, #1
 800394e:	f000 80aa 	beq.w	8003aa6 <_vfiprintf_r+0x20e>
 8003952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003954:	445a      	add	r2, fp
 8003956:	9209      	str	r2, [sp, #36]	; 0x24
 8003958:	f89a 3000 	ldrb.w	r3, [sl]
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80a2 	beq.w	8003aa6 <_vfiprintf_r+0x20e>
 8003962:	2300      	movs	r3, #0
 8003964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003968:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800396c:	f10a 0a01 	add.w	sl, sl, #1
 8003970:	9304      	str	r3, [sp, #16]
 8003972:	9307      	str	r3, [sp, #28]
 8003974:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003978:	931a      	str	r3, [sp, #104]	; 0x68
 800397a:	4654      	mov	r4, sl
 800397c:	2205      	movs	r2, #5
 800397e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003982:	4858      	ldr	r0, [pc, #352]	; (8003ae4 <_vfiprintf_r+0x24c>)
 8003984:	f7fc fc24 	bl	80001d0 <memchr>
 8003988:	9a04      	ldr	r2, [sp, #16]
 800398a:	b9d8      	cbnz	r0, 80039c4 <_vfiprintf_r+0x12c>
 800398c:	06d1      	lsls	r1, r2, #27
 800398e:	bf44      	itt	mi
 8003990:	2320      	movmi	r3, #32
 8003992:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003996:	0713      	lsls	r3, r2, #28
 8003998:	bf44      	itt	mi
 800399a:	232b      	movmi	r3, #43	; 0x2b
 800399c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039a0:	f89a 3000 	ldrb.w	r3, [sl]
 80039a4:	2b2a      	cmp	r3, #42	; 0x2a
 80039a6:	d015      	beq.n	80039d4 <_vfiprintf_r+0x13c>
 80039a8:	9a07      	ldr	r2, [sp, #28]
 80039aa:	4654      	mov	r4, sl
 80039ac:	2000      	movs	r0, #0
 80039ae:	f04f 0c0a 	mov.w	ip, #10
 80039b2:	4621      	mov	r1, r4
 80039b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039b8:	3b30      	subs	r3, #48	; 0x30
 80039ba:	2b09      	cmp	r3, #9
 80039bc:	d94e      	bls.n	8003a5c <_vfiprintf_r+0x1c4>
 80039be:	b1b0      	cbz	r0, 80039ee <_vfiprintf_r+0x156>
 80039c0:	9207      	str	r2, [sp, #28]
 80039c2:	e014      	b.n	80039ee <_vfiprintf_r+0x156>
 80039c4:	eba0 0308 	sub.w	r3, r0, r8
 80039c8:	fa09 f303 	lsl.w	r3, r9, r3
 80039cc:	4313      	orrs	r3, r2
 80039ce:	9304      	str	r3, [sp, #16]
 80039d0:	46a2      	mov	sl, r4
 80039d2:	e7d2      	b.n	800397a <_vfiprintf_r+0xe2>
 80039d4:	9b03      	ldr	r3, [sp, #12]
 80039d6:	1d19      	adds	r1, r3, #4
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	9103      	str	r1, [sp, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bfbb      	ittet	lt
 80039e0:	425b      	neglt	r3, r3
 80039e2:	f042 0202 	orrlt.w	r2, r2, #2
 80039e6:	9307      	strge	r3, [sp, #28]
 80039e8:	9307      	strlt	r3, [sp, #28]
 80039ea:	bfb8      	it	lt
 80039ec:	9204      	strlt	r2, [sp, #16]
 80039ee:	7823      	ldrb	r3, [r4, #0]
 80039f0:	2b2e      	cmp	r3, #46	; 0x2e
 80039f2:	d10c      	bne.n	8003a0e <_vfiprintf_r+0x176>
 80039f4:	7863      	ldrb	r3, [r4, #1]
 80039f6:	2b2a      	cmp	r3, #42	; 0x2a
 80039f8:	d135      	bne.n	8003a66 <_vfiprintf_r+0x1ce>
 80039fa:	9b03      	ldr	r3, [sp, #12]
 80039fc:	1d1a      	adds	r2, r3, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	9203      	str	r2, [sp, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bfb8      	it	lt
 8003a06:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003a0a:	3402      	adds	r4, #2
 8003a0c:	9305      	str	r3, [sp, #20]
 8003a0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003af4 <_vfiprintf_r+0x25c>
 8003a12:	7821      	ldrb	r1, [r4, #0]
 8003a14:	2203      	movs	r2, #3
 8003a16:	4650      	mov	r0, sl
 8003a18:	f7fc fbda 	bl	80001d0 <memchr>
 8003a1c:	b140      	cbz	r0, 8003a30 <_vfiprintf_r+0x198>
 8003a1e:	2340      	movs	r3, #64	; 0x40
 8003a20:	eba0 000a 	sub.w	r0, r0, sl
 8003a24:	fa03 f000 	lsl.w	r0, r3, r0
 8003a28:	9b04      	ldr	r3, [sp, #16]
 8003a2a:	4303      	orrs	r3, r0
 8003a2c:	3401      	adds	r4, #1
 8003a2e:	9304      	str	r3, [sp, #16]
 8003a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a34:	482c      	ldr	r0, [pc, #176]	; (8003ae8 <_vfiprintf_r+0x250>)
 8003a36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a3a:	2206      	movs	r2, #6
 8003a3c:	f7fc fbc8 	bl	80001d0 <memchr>
 8003a40:	2800      	cmp	r0, #0
 8003a42:	d03f      	beq.n	8003ac4 <_vfiprintf_r+0x22c>
 8003a44:	4b29      	ldr	r3, [pc, #164]	; (8003aec <_vfiprintf_r+0x254>)
 8003a46:	bb1b      	cbnz	r3, 8003a90 <_vfiprintf_r+0x1f8>
 8003a48:	9b03      	ldr	r3, [sp, #12]
 8003a4a:	3307      	adds	r3, #7
 8003a4c:	f023 0307 	bic.w	r3, r3, #7
 8003a50:	3308      	adds	r3, #8
 8003a52:	9303      	str	r3, [sp, #12]
 8003a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a56:	443b      	add	r3, r7
 8003a58:	9309      	str	r3, [sp, #36]	; 0x24
 8003a5a:	e767      	b.n	800392c <_vfiprintf_r+0x94>
 8003a5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a60:	460c      	mov	r4, r1
 8003a62:	2001      	movs	r0, #1
 8003a64:	e7a5      	b.n	80039b2 <_vfiprintf_r+0x11a>
 8003a66:	2300      	movs	r3, #0
 8003a68:	3401      	adds	r4, #1
 8003a6a:	9305      	str	r3, [sp, #20]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f04f 0c0a 	mov.w	ip, #10
 8003a72:	4620      	mov	r0, r4
 8003a74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a78:	3a30      	subs	r2, #48	; 0x30
 8003a7a:	2a09      	cmp	r2, #9
 8003a7c:	d903      	bls.n	8003a86 <_vfiprintf_r+0x1ee>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0c5      	beq.n	8003a0e <_vfiprintf_r+0x176>
 8003a82:	9105      	str	r1, [sp, #20]
 8003a84:	e7c3      	b.n	8003a0e <_vfiprintf_r+0x176>
 8003a86:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e7f0      	b.n	8003a72 <_vfiprintf_r+0x1da>
 8003a90:	ab03      	add	r3, sp, #12
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	462a      	mov	r2, r5
 8003a96:	4b16      	ldr	r3, [pc, #88]	; (8003af0 <_vfiprintf_r+0x258>)
 8003a98:	a904      	add	r1, sp, #16
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	f3af 8000 	nop.w
 8003aa0:	4607      	mov	r7, r0
 8003aa2:	1c78      	adds	r0, r7, #1
 8003aa4:	d1d6      	bne.n	8003a54 <_vfiprintf_r+0x1bc>
 8003aa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003aa8:	07d9      	lsls	r1, r3, #31
 8003aaa:	d405      	bmi.n	8003ab8 <_vfiprintf_r+0x220>
 8003aac:	89ab      	ldrh	r3, [r5, #12]
 8003aae:	059a      	lsls	r2, r3, #22
 8003ab0:	d402      	bmi.n	8003ab8 <_vfiprintf_r+0x220>
 8003ab2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ab4:	f000 fc45 	bl	8004342 <__retarget_lock_release_recursive>
 8003ab8:	89ab      	ldrh	r3, [r5, #12]
 8003aba:	065b      	lsls	r3, r3, #25
 8003abc:	f53f af12 	bmi.w	80038e4 <_vfiprintf_r+0x4c>
 8003ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ac2:	e711      	b.n	80038e8 <_vfiprintf_r+0x50>
 8003ac4:	ab03      	add	r3, sp, #12
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	462a      	mov	r2, r5
 8003aca:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <_vfiprintf_r+0x258>)
 8003acc:	a904      	add	r1, sp, #16
 8003ace:	4630      	mov	r0, r6
 8003ad0:	f000 f880 	bl	8003bd4 <_printf_i>
 8003ad4:	e7e4      	b.n	8003aa0 <_vfiprintf_r+0x208>
 8003ad6:	bf00      	nop
 8003ad8:	08004820 	.word	0x08004820
 8003adc:	08004840 	.word	0x08004840
 8003ae0:	08004800 	.word	0x08004800
 8003ae4:	080047cc 	.word	0x080047cc
 8003ae8:	080047d6 	.word	0x080047d6
 8003aec:	00000000 	.word	0x00000000
 8003af0:	08003873 	.word	0x08003873
 8003af4:	080047d2 	.word	0x080047d2

08003af8 <_printf_common>:
 8003af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003afc:	4616      	mov	r6, r2
 8003afe:	4699      	mov	r9, r3
 8003b00:	688a      	ldr	r2, [r1, #8]
 8003b02:	690b      	ldr	r3, [r1, #16]
 8003b04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	bfb8      	it	lt
 8003b0c:	4613      	movlt	r3, r2
 8003b0e:	6033      	str	r3, [r6, #0]
 8003b10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b14:	4607      	mov	r7, r0
 8003b16:	460c      	mov	r4, r1
 8003b18:	b10a      	cbz	r2, 8003b1e <_printf_common+0x26>
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	6033      	str	r3, [r6, #0]
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	0699      	lsls	r1, r3, #26
 8003b22:	bf42      	ittt	mi
 8003b24:	6833      	ldrmi	r3, [r6, #0]
 8003b26:	3302      	addmi	r3, #2
 8003b28:	6033      	strmi	r3, [r6, #0]
 8003b2a:	6825      	ldr	r5, [r4, #0]
 8003b2c:	f015 0506 	ands.w	r5, r5, #6
 8003b30:	d106      	bne.n	8003b40 <_printf_common+0x48>
 8003b32:	f104 0a19 	add.w	sl, r4, #25
 8003b36:	68e3      	ldr	r3, [r4, #12]
 8003b38:	6832      	ldr	r2, [r6, #0]
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	42ab      	cmp	r3, r5
 8003b3e:	dc26      	bgt.n	8003b8e <_printf_common+0x96>
 8003b40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b44:	1e13      	subs	r3, r2, #0
 8003b46:	6822      	ldr	r2, [r4, #0]
 8003b48:	bf18      	it	ne
 8003b4a:	2301      	movne	r3, #1
 8003b4c:	0692      	lsls	r2, r2, #26
 8003b4e:	d42b      	bmi.n	8003ba8 <_printf_common+0xb0>
 8003b50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b54:	4649      	mov	r1, r9
 8003b56:	4638      	mov	r0, r7
 8003b58:	47c0      	blx	r8
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d01e      	beq.n	8003b9c <_printf_common+0xa4>
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	68e5      	ldr	r5, [r4, #12]
 8003b62:	6832      	ldr	r2, [r6, #0]
 8003b64:	f003 0306 	and.w	r3, r3, #6
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	bf08      	it	eq
 8003b6c:	1aad      	subeq	r5, r5, r2
 8003b6e:	68a3      	ldr	r3, [r4, #8]
 8003b70:	6922      	ldr	r2, [r4, #16]
 8003b72:	bf0c      	ite	eq
 8003b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b78:	2500      	movne	r5, #0
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	bfc4      	itt	gt
 8003b7e:	1a9b      	subgt	r3, r3, r2
 8003b80:	18ed      	addgt	r5, r5, r3
 8003b82:	2600      	movs	r6, #0
 8003b84:	341a      	adds	r4, #26
 8003b86:	42b5      	cmp	r5, r6
 8003b88:	d11a      	bne.n	8003bc0 <_printf_common+0xc8>
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	e008      	b.n	8003ba0 <_printf_common+0xa8>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	4652      	mov	r2, sl
 8003b92:	4649      	mov	r1, r9
 8003b94:	4638      	mov	r0, r7
 8003b96:	47c0      	blx	r8
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d103      	bne.n	8003ba4 <_printf_common+0xac>
 8003b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba4:	3501      	adds	r5, #1
 8003ba6:	e7c6      	b.n	8003b36 <_printf_common+0x3e>
 8003ba8:	18e1      	adds	r1, r4, r3
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	2030      	movs	r0, #48	; 0x30
 8003bae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bb2:	4422      	add	r2, r4
 8003bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	e7c7      	b.n	8003b50 <_printf_common+0x58>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	4622      	mov	r2, r4
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	47c0      	blx	r8
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d0e6      	beq.n	8003b9c <_printf_common+0xa4>
 8003bce:	3601      	adds	r6, #1
 8003bd0:	e7d9      	b.n	8003b86 <_printf_common+0x8e>
	...

08003bd4 <_printf_i>:
 8003bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd8:	7e0f      	ldrb	r7, [r1, #24]
 8003bda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bdc:	2f78      	cmp	r7, #120	; 0x78
 8003bde:	4691      	mov	r9, r2
 8003be0:	4680      	mov	r8, r0
 8003be2:	460c      	mov	r4, r1
 8003be4:	469a      	mov	sl, r3
 8003be6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bea:	d807      	bhi.n	8003bfc <_printf_i+0x28>
 8003bec:	2f62      	cmp	r7, #98	; 0x62
 8003bee:	d80a      	bhi.n	8003c06 <_printf_i+0x32>
 8003bf0:	2f00      	cmp	r7, #0
 8003bf2:	f000 80d8 	beq.w	8003da6 <_printf_i+0x1d2>
 8003bf6:	2f58      	cmp	r7, #88	; 0x58
 8003bf8:	f000 80a3 	beq.w	8003d42 <_printf_i+0x16e>
 8003bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c04:	e03a      	b.n	8003c7c <_printf_i+0xa8>
 8003c06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c0a:	2b15      	cmp	r3, #21
 8003c0c:	d8f6      	bhi.n	8003bfc <_printf_i+0x28>
 8003c0e:	a101      	add	r1, pc, #4	; (adr r1, 8003c14 <_printf_i+0x40>)
 8003c10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c14:	08003c6d 	.word	0x08003c6d
 8003c18:	08003c81 	.word	0x08003c81
 8003c1c:	08003bfd 	.word	0x08003bfd
 8003c20:	08003bfd 	.word	0x08003bfd
 8003c24:	08003bfd 	.word	0x08003bfd
 8003c28:	08003bfd 	.word	0x08003bfd
 8003c2c:	08003c81 	.word	0x08003c81
 8003c30:	08003bfd 	.word	0x08003bfd
 8003c34:	08003bfd 	.word	0x08003bfd
 8003c38:	08003bfd 	.word	0x08003bfd
 8003c3c:	08003bfd 	.word	0x08003bfd
 8003c40:	08003d8d 	.word	0x08003d8d
 8003c44:	08003cb1 	.word	0x08003cb1
 8003c48:	08003d6f 	.word	0x08003d6f
 8003c4c:	08003bfd 	.word	0x08003bfd
 8003c50:	08003bfd 	.word	0x08003bfd
 8003c54:	08003daf 	.word	0x08003daf
 8003c58:	08003bfd 	.word	0x08003bfd
 8003c5c:	08003cb1 	.word	0x08003cb1
 8003c60:	08003bfd 	.word	0x08003bfd
 8003c64:	08003bfd 	.word	0x08003bfd
 8003c68:	08003d77 	.word	0x08003d77
 8003c6c:	682b      	ldr	r3, [r5, #0]
 8003c6e:	1d1a      	adds	r2, r3, #4
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	602a      	str	r2, [r5, #0]
 8003c74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0a3      	b.n	8003dc8 <_printf_i+0x1f4>
 8003c80:	6820      	ldr	r0, [r4, #0]
 8003c82:	6829      	ldr	r1, [r5, #0]
 8003c84:	0606      	lsls	r6, r0, #24
 8003c86:	f101 0304 	add.w	r3, r1, #4
 8003c8a:	d50a      	bpl.n	8003ca2 <_printf_i+0xce>
 8003c8c:	680e      	ldr	r6, [r1, #0]
 8003c8e:	602b      	str	r3, [r5, #0]
 8003c90:	2e00      	cmp	r6, #0
 8003c92:	da03      	bge.n	8003c9c <_printf_i+0xc8>
 8003c94:	232d      	movs	r3, #45	; 0x2d
 8003c96:	4276      	negs	r6, r6
 8003c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c9c:	485e      	ldr	r0, [pc, #376]	; (8003e18 <_printf_i+0x244>)
 8003c9e:	230a      	movs	r3, #10
 8003ca0:	e019      	b.n	8003cd6 <_printf_i+0x102>
 8003ca2:	680e      	ldr	r6, [r1, #0]
 8003ca4:	602b      	str	r3, [r5, #0]
 8003ca6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003caa:	bf18      	it	ne
 8003cac:	b236      	sxthne	r6, r6
 8003cae:	e7ef      	b.n	8003c90 <_printf_i+0xbc>
 8003cb0:	682b      	ldr	r3, [r5, #0]
 8003cb2:	6820      	ldr	r0, [r4, #0]
 8003cb4:	1d19      	adds	r1, r3, #4
 8003cb6:	6029      	str	r1, [r5, #0]
 8003cb8:	0601      	lsls	r1, r0, #24
 8003cba:	d501      	bpl.n	8003cc0 <_printf_i+0xec>
 8003cbc:	681e      	ldr	r6, [r3, #0]
 8003cbe:	e002      	b.n	8003cc6 <_printf_i+0xf2>
 8003cc0:	0646      	lsls	r6, r0, #25
 8003cc2:	d5fb      	bpl.n	8003cbc <_printf_i+0xe8>
 8003cc4:	881e      	ldrh	r6, [r3, #0]
 8003cc6:	4854      	ldr	r0, [pc, #336]	; (8003e18 <_printf_i+0x244>)
 8003cc8:	2f6f      	cmp	r7, #111	; 0x6f
 8003cca:	bf0c      	ite	eq
 8003ccc:	2308      	moveq	r3, #8
 8003cce:	230a      	movne	r3, #10
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cd6:	6865      	ldr	r5, [r4, #4]
 8003cd8:	60a5      	str	r5, [r4, #8]
 8003cda:	2d00      	cmp	r5, #0
 8003cdc:	bfa2      	ittt	ge
 8003cde:	6821      	ldrge	r1, [r4, #0]
 8003ce0:	f021 0104 	bicge.w	r1, r1, #4
 8003ce4:	6021      	strge	r1, [r4, #0]
 8003ce6:	b90e      	cbnz	r6, 8003cec <_printf_i+0x118>
 8003ce8:	2d00      	cmp	r5, #0
 8003cea:	d04d      	beq.n	8003d88 <_printf_i+0x1b4>
 8003cec:	4615      	mov	r5, r2
 8003cee:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cf2:	fb03 6711 	mls	r7, r3, r1, r6
 8003cf6:	5dc7      	ldrb	r7, [r0, r7]
 8003cf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cfc:	4637      	mov	r7, r6
 8003cfe:	42bb      	cmp	r3, r7
 8003d00:	460e      	mov	r6, r1
 8003d02:	d9f4      	bls.n	8003cee <_printf_i+0x11a>
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d10b      	bne.n	8003d20 <_printf_i+0x14c>
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	07de      	lsls	r6, r3, #31
 8003d0c:	d508      	bpl.n	8003d20 <_printf_i+0x14c>
 8003d0e:	6923      	ldr	r3, [r4, #16]
 8003d10:	6861      	ldr	r1, [r4, #4]
 8003d12:	4299      	cmp	r1, r3
 8003d14:	bfde      	ittt	le
 8003d16:	2330      	movle	r3, #48	; 0x30
 8003d18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d1c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003d20:	1b52      	subs	r2, r2, r5
 8003d22:	6122      	str	r2, [r4, #16]
 8003d24:	f8cd a000 	str.w	sl, [sp]
 8003d28:	464b      	mov	r3, r9
 8003d2a:	aa03      	add	r2, sp, #12
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	4640      	mov	r0, r8
 8003d30:	f7ff fee2 	bl	8003af8 <_printf_common>
 8003d34:	3001      	adds	r0, #1
 8003d36:	d14c      	bne.n	8003dd2 <_printf_i+0x1fe>
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d3c:	b004      	add	sp, #16
 8003d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d42:	4835      	ldr	r0, [pc, #212]	; (8003e18 <_printf_i+0x244>)
 8003d44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d48:	6829      	ldr	r1, [r5, #0]
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d50:	6029      	str	r1, [r5, #0]
 8003d52:	061d      	lsls	r5, r3, #24
 8003d54:	d514      	bpl.n	8003d80 <_printf_i+0x1ac>
 8003d56:	07df      	lsls	r7, r3, #31
 8003d58:	bf44      	itt	mi
 8003d5a:	f043 0320 	orrmi.w	r3, r3, #32
 8003d5e:	6023      	strmi	r3, [r4, #0]
 8003d60:	b91e      	cbnz	r6, 8003d6a <_printf_i+0x196>
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	f023 0320 	bic.w	r3, r3, #32
 8003d68:	6023      	str	r3, [r4, #0]
 8003d6a:	2310      	movs	r3, #16
 8003d6c:	e7b0      	b.n	8003cd0 <_printf_i+0xfc>
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	f043 0320 	orr.w	r3, r3, #32
 8003d74:	6023      	str	r3, [r4, #0]
 8003d76:	2378      	movs	r3, #120	; 0x78
 8003d78:	4828      	ldr	r0, [pc, #160]	; (8003e1c <_printf_i+0x248>)
 8003d7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d7e:	e7e3      	b.n	8003d48 <_printf_i+0x174>
 8003d80:	0659      	lsls	r1, r3, #25
 8003d82:	bf48      	it	mi
 8003d84:	b2b6      	uxthmi	r6, r6
 8003d86:	e7e6      	b.n	8003d56 <_printf_i+0x182>
 8003d88:	4615      	mov	r5, r2
 8003d8a:	e7bb      	b.n	8003d04 <_printf_i+0x130>
 8003d8c:	682b      	ldr	r3, [r5, #0]
 8003d8e:	6826      	ldr	r6, [r4, #0]
 8003d90:	6961      	ldr	r1, [r4, #20]
 8003d92:	1d18      	adds	r0, r3, #4
 8003d94:	6028      	str	r0, [r5, #0]
 8003d96:	0635      	lsls	r5, r6, #24
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	d501      	bpl.n	8003da0 <_printf_i+0x1cc>
 8003d9c:	6019      	str	r1, [r3, #0]
 8003d9e:	e002      	b.n	8003da6 <_printf_i+0x1d2>
 8003da0:	0670      	lsls	r0, r6, #25
 8003da2:	d5fb      	bpl.n	8003d9c <_printf_i+0x1c8>
 8003da4:	8019      	strh	r1, [r3, #0]
 8003da6:	2300      	movs	r3, #0
 8003da8:	6123      	str	r3, [r4, #16]
 8003daa:	4615      	mov	r5, r2
 8003dac:	e7ba      	b.n	8003d24 <_printf_i+0x150>
 8003dae:	682b      	ldr	r3, [r5, #0]
 8003db0:	1d1a      	adds	r2, r3, #4
 8003db2:	602a      	str	r2, [r5, #0]
 8003db4:	681d      	ldr	r5, [r3, #0]
 8003db6:	6862      	ldr	r2, [r4, #4]
 8003db8:	2100      	movs	r1, #0
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f7fc fa08 	bl	80001d0 <memchr>
 8003dc0:	b108      	cbz	r0, 8003dc6 <_printf_i+0x1f2>
 8003dc2:	1b40      	subs	r0, r0, r5
 8003dc4:	6060      	str	r0, [r4, #4]
 8003dc6:	6863      	ldr	r3, [r4, #4]
 8003dc8:	6123      	str	r3, [r4, #16]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dd0:	e7a8      	b.n	8003d24 <_printf_i+0x150>
 8003dd2:	6923      	ldr	r3, [r4, #16]
 8003dd4:	462a      	mov	r2, r5
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	4640      	mov	r0, r8
 8003dda:	47d0      	blx	sl
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d0ab      	beq.n	8003d38 <_printf_i+0x164>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	079b      	lsls	r3, r3, #30
 8003de4:	d413      	bmi.n	8003e0e <_printf_i+0x23a>
 8003de6:	68e0      	ldr	r0, [r4, #12]
 8003de8:	9b03      	ldr	r3, [sp, #12]
 8003dea:	4298      	cmp	r0, r3
 8003dec:	bfb8      	it	lt
 8003dee:	4618      	movlt	r0, r3
 8003df0:	e7a4      	b.n	8003d3c <_printf_i+0x168>
 8003df2:	2301      	movs	r3, #1
 8003df4:	4632      	mov	r2, r6
 8003df6:	4649      	mov	r1, r9
 8003df8:	4640      	mov	r0, r8
 8003dfa:	47d0      	blx	sl
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d09b      	beq.n	8003d38 <_printf_i+0x164>
 8003e00:	3501      	adds	r5, #1
 8003e02:	68e3      	ldr	r3, [r4, #12]
 8003e04:	9903      	ldr	r1, [sp, #12]
 8003e06:	1a5b      	subs	r3, r3, r1
 8003e08:	42ab      	cmp	r3, r5
 8003e0a:	dcf2      	bgt.n	8003df2 <_printf_i+0x21e>
 8003e0c:	e7eb      	b.n	8003de6 <_printf_i+0x212>
 8003e0e:	2500      	movs	r5, #0
 8003e10:	f104 0619 	add.w	r6, r4, #25
 8003e14:	e7f5      	b.n	8003e02 <_printf_i+0x22e>
 8003e16:	bf00      	nop
 8003e18:	080047dd 	.word	0x080047dd
 8003e1c:	080047ee 	.word	0x080047ee

08003e20 <iprintf>:
 8003e20:	b40f      	push	{r0, r1, r2, r3}
 8003e22:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <iprintf+0x2c>)
 8003e24:	b513      	push	{r0, r1, r4, lr}
 8003e26:	681c      	ldr	r4, [r3, #0]
 8003e28:	b124      	cbz	r4, 8003e34 <iprintf+0x14>
 8003e2a:	69a3      	ldr	r3, [r4, #24]
 8003e2c:	b913      	cbnz	r3, 8003e34 <iprintf+0x14>
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f000 f9e8 	bl	8004204 <__sinit>
 8003e34:	ab05      	add	r3, sp, #20
 8003e36:	9a04      	ldr	r2, [sp, #16]
 8003e38:	68a1      	ldr	r1, [r4, #8]
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	f7ff fd2b 	bl	8003898 <_vfiprintf_r>
 8003e42:	b002      	add	sp, #8
 8003e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e48:	b004      	add	sp, #16
 8003e4a:	4770      	bx	lr
 8003e4c:	20000014 	.word	0x20000014

08003e50 <__swbuf_r>:
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	460e      	mov	r6, r1
 8003e54:	4614      	mov	r4, r2
 8003e56:	4605      	mov	r5, r0
 8003e58:	b118      	cbz	r0, 8003e62 <__swbuf_r+0x12>
 8003e5a:	6983      	ldr	r3, [r0, #24]
 8003e5c:	b90b      	cbnz	r3, 8003e62 <__swbuf_r+0x12>
 8003e5e:	f000 f9d1 	bl	8004204 <__sinit>
 8003e62:	4b21      	ldr	r3, [pc, #132]	; (8003ee8 <__swbuf_r+0x98>)
 8003e64:	429c      	cmp	r4, r3
 8003e66:	d12b      	bne.n	8003ec0 <__swbuf_r+0x70>
 8003e68:	686c      	ldr	r4, [r5, #4]
 8003e6a:	69a3      	ldr	r3, [r4, #24]
 8003e6c:	60a3      	str	r3, [r4, #8]
 8003e6e:	89a3      	ldrh	r3, [r4, #12]
 8003e70:	071a      	lsls	r2, r3, #28
 8003e72:	d52f      	bpl.n	8003ed4 <__swbuf_r+0x84>
 8003e74:	6923      	ldr	r3, [r4, #16]
 8003e76:	b36b      	cbz	r3, 8003ed4 <__swbuf_r+0x84>
 8003e78:	6923      	ldr	r3, [r4, #16]
 8003e7a:	6820      	ldr	r0, [r4, #0]
 8003e7c:	1ac0      	subs	r0, r0, r3
 8003e7e:	6963      	ldr	r3, [r4, #20]
 8003e80:	b2f6      	uxtb	r6, r6
 8003e82:	4283      	cmp	r3, r0
 8003e84:	4637      	mov	r7, r6
 8003e86:	dc04      	bgt.n	8003e92 <__swbuf_r+0x42>
 8003e88:	4621      	mov	r1, r4
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f000 f926 	bl	80040dc <_fflush_r>
 8003e90:	bb30      	cbnz	r0, 8003ee0 <__swbuf_r+0x90>
 8003e92:	68a3      	ldr	r3, [r4, #8]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	60a3      	str	r3, [r4, #8]
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	6022      	str	r2, [r4, #0]
 8003e9e:	701e      	strb	r6, [r3, #0]
 8003ea0:	6963      	ldr	r3, [r4, #20]
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	4283      	cmp	r3, r0
 8003ea6:	d004      	beq.n	8003eb2 <__swbuf_r+0x62>
 8003ea8:	89a3      	ldrh	r3, [r4, #12]
 8003eaa:	07db      	lsls	r3, r3, #31
 8003eac:	d506      	bpl.n	8003ebc <__swbuf_r+0x6c>
 8003eae:	2e0a      	cmp	r6, #10
 8003eb0:	d104      	bne.n	8003ebc <__swbuf_r+0x6c>
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	f000 f911 	bl	80040dc <_fflush_r>
 8003eba:	b988      	cbnz	r0, 8003ee0 <__swbuf_r+0x90>
 8003ebc:	4638      	mov	r0, r7
 8003ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <__swbuf_r+0x9c>)
 8003ec2:	429c      	cmp	r4, r3
 8003ec4:	d101      	bne.n	8003eca <__swbuf_r+0x7a>
 8003ec6:	68ac      	ldr	r4, [r5, #8]
 8003ec8:	e7cf      	b.n	8003e6a <__swbuf_r+0x1a>
 8003eca:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <__swbuf_r+0xa0>)
 8003ecc:	429c      	cmp	r4, r3
 8003ece:	bf08      	it	eq
 8003ed0:	68ec      	ldreq	r4, [r5, #12]
 8003ed2:	e7ca      	b.n	8003e6a <__swbuf_r+0x1a>
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	f000 f80c 	bl	8003ef4 <__swsetup_r>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d0cb      	beq.n	8003e78 <__swbuf_r+0x28>
 8003ee0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003ee4:	e7ea      	b.n	8003ebc <__swbuf_r+0x6c>
 8003ee6:	bf00      	nop
 8003ee8:	08004820 	.word	0x08004820
 8003eec:	08004840 	.word	0x08004840
 8003ef0:	08004800 	.word	0x08004800

08003ef4 <__swsetup_r>:
 8003ef4:	4b32      	ldr	r3, [pc, #200]	; (8003fc0 <__swsetup_r+0xcc>)
 8003ef6:	b570      	push	{r4, r5, r6, lr}
 8003ef8:	681d      	ldr	r5, [r3, #0]
 8003efa:	4606      	mov	r6, r0
 8003efc:	460c      	mov	r4, r1
 8003efe:	b125      	cbz	r5, 8003f0a <__swsetup_r+0x16>
 8003f00:	69ab      	ldr	r3, [r5, #24]
 8003f02:	b913      	cbnz	r3, 8003f0a <__swsetup_r+0x16>
 8003f04:	4628      	mov	r0, r5
 8003f06:	f000 f97d 	bl	8004204 <__sinit>
 8003f0a:	4b2e      	ldr	r3, [pc, #184]	; (8003fc4 <__swsetup_r+0xd0>)
 8003f0c:	429c      	cmp	r4, r3
 8003f0e:	d10f      	bne.n	8003f30 <__swsetup_r+0x3c>
 8003f10:	686c      	ldr	r4, [r5, #4]
 8003f12:	89a3      	ldrh	r3, [r4, #12]
 8003f14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f18:	0719      	lsls	r1, r3, #28
 8003f1a:	d42c      	bmi.n	8003f76 <__swsetup_r+0x82>
 8003f1c:	06dd      	lsls	r5, r3, #27
 8003f1e:	d411      	bmi.n	8003f44 <__swsetup_r+0x50>
 8003f20:	2309      	movs	r3, #9
 8003f22:	6033      	str	r3, [r6, #0]
 8003f24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f28:	81a3      	strh	r3, [r4, #12]
 8003f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f2e:	e03e      	b.n	8003fae <__swsetup_r+0xba>
 8003f30:	4b25      	ldr	r3, [pc, #148]	; (8003fc8 <__swsetup_r+0xd4>)
 8003f32:	429c      	cmp	r4, r3
 8003f34:	d101      	bne.n	8003f3a <__swsetup_r+0x46>
 8003f36:	68ac      	ldr	r4, [r5, #8]
 8003f38:	e7eb      	b.n	8003f12 <__swsetup_r+0x1e>
 8003f3a:	4b24      	ldr	r3, [pc, #144]	; (8003fcc <__swsetup_r+0xd8>)
 8003f3c:	429c      	cmp	r4, r3
 8003f3e:	bf08      	it	eq
 8003f40:	68ec      	ldreq	r4, [r5, #12]
 8003f42:	e7e6      	b.n	8003f12 <__swsetup_r+0x1e>
 8003f44:	0758      	lsls	r0, r3, #29
 8003f46:	d512      	bpl.n	8003f6e <__swsetup_r+0x7a>
 8003f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f4a:	b141      	cbz	r1, 8003f5e <__swsetup_r+0x6a>
 8003f4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f50:	4299      	cmp	r1, r3
 8003f52:	d002      	beq.n	8003f5a <__swsetup_r+0x66>
 8003f54:	4630      	mov	r0, r6
 8003f56:	f000 fa5b 	bl	8004410 <_free_r>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	6363      	str	r3, [r4, #52]	; 0x34
 8003f5e:	89a3      	ldrh	r3, [r4, #12]
 8003f60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f64:	81a3      	strh	r3, [r4, #12]
 8003f66:	2300      	movs	r3, #0
 8003f68:	6063      	str	r3, [r4, #4]
 8003f6a:	6923      	ldr	r3, [r4, #16]
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	89a3      	ldrh	r3, [r4, #12]
 8003f70:	f043 0308 	orr.w	r3, r3, #8
 8003f74:	81a3      	strh	r3, [r4, #12]
 8003f76:	6923      	ldr	r3, [r4, #16]
 8003f78:	b94b      	cbnz	r3, 8003f8e <__swsetup_r+0x9a>
 8003f7a:	89a3      	ldrh	r3, [r4, #12]
 8003f7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f84:	d003      	beq.n	8003f8e <__swsetup_r+0x9a>
 8003f86:	4621      	mov	r1, r4
 8003f88:	4630      	mov	r0, r6
 8003f8a:	f000 fa01 	bl	8004390 <__smakebuf_r>
 8003f8e:	89a0      	ldrh	r0, [r4, #12]
 8003f90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f94:	f010 0301 	ands.w	r3, r0, #1
 8003f98:	d00a      	beq.n	8003fb0 <__swsetup_r+0xbc>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60a3      	str	r3, [r4, #8]
 8003f9e:	6963      	ldr	r3, [r4, #20]
 8003fa0:	425b      	negs	r3, r3
 8003fa2:	61a3      	str	r3, [r4, #24]
 8003fa4:	6923      	ldr	r3, [r4, #16]
 8003fa6:	b943      	cbnz	r3, 8003fba <__swsetup_r+0xc6>
 8003fa8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003fac:	d1ba      	bne.n	8003f24 <__swsetup_r+0x30>
 8003fae:	bd70      	pop	{r4, r5, r6, pc}
 8003fb0:	0781      	lsls	r1, r0, #30
 8003fb2:	bf58      	it	pl
 8003fb4:	6963      	ldrpl	r3, [r4, #20]
 8003fb6:	60a3      	str	r3, [r4, #8]
 8003fb8:	e7f4      	b.n	8003fa4 <__swsetup_r+0xb0>
 8003fba:	2000      	movs	r0, #0
 8003fbc:	e7f7      	b.n	8003fae <__swsetup_r+0xba>
 8003fbe:	bf00      	nop
 8003fc0:	20000014 	.word	0x20000014
 8003fc4:	08004820 	.word	0x08004820
 8003fc8:	08004840 	.word	0x08004840
 8003fcc:	08004800 	.word	0x08004800

08003fd0 <__sflush_r>:
 8003fd0:	898a      	ldrh	r2, [r1, #12]
 8003fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd6:	4605      	mov	r5, r0
 8003fd8:	0710      	lsls	r0, r2, #28
 8003fda:	460c      	mov	r4, r1
 8003fdc:	d458      	bmi.n	8004090 <__sflush_r+0xc0>
 8003fde:	684b      	ldr	r3, [r1, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	dc05      	bgt.n	8003ff0 <__sflush_r+0x20>
 8003fe4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	dc02      	bgt.n	8003ff0 <__sflush_r+0x20>
 8003fea:	2000      	movs	r0, #0
 8003fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ff2:	2e00      	cmp	r6, #0
 8003ff4:	d0f9      	beq.n	8003fea <__sflush_r+0x1a>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ffc:	682f      	ldr	r7, [r5, #0]
 8003ffe:	602b      	str	r3, [r5, #0]
 8004000:	d032      	beq.n	8004068 <__sflush_r+0x98>
 8004002:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	075a      	lsls	r2, r3, #29
 8004008:	d505      	bpl.n	8004016 <__sflush_r+0x46>
 800400a:	6863      	ldr	r3, [r4, #4]
 800400c:	1ac0      	subs	r0, r0, r3
 800400e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004010:	b10b      	cbz	r3, 8004016 <__sflush_r+0x46>
 8004012:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004014:	1ac0      	subs	r0, r0, r3
 8004016:	2300      	movs	r3, #0
 8004018:	4602      	mov	r2, r0
 800401a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800401c:	6a21      	ldr	r1, [r4, #32]
 800401e:	4628      	mov	r0, r5
 8004020:	47b0      	blx	r6
 8004022:	1c43      	adds	r3, r0, #1
 8004024:	89a3      	ldrh	r3, [r4, #12]
 8004026:	d106      	bne.n	8004036 <__sflush_r+0x66>
 8004028:	6829      	ldr	r1, [r5, #0]
 800402a:	291d      	cmp	r1, #29
 800402c:	d82c      	bhi.n	8004088 <__sflush_r+0xb8>
 800402e:	4a2a      	ldr	r2, [pc, #168]	; (80040d8 <__sflush_r+0x108>)
 8004030:	40ca      	lsrs	r2, r1
 8004032:	07d6      	lsls	r6, r2, #31
 8004034:	d528      	bpl.n	8004088 <__sflush_r+0xb8>
 8004036:	2200      	movs	r2, #0
 8004038:	6062      	str	r2, [r4, #4]
 800403a:	04d9      	lsls	r1, r3, #19
 800403c:	6922      	ldr	r2, [r4, #16]
 800403e:	6022      	str	r2, [r4, #0]
 8004040:	d504      	bpl.n	800404c <__sflush_r+0x7c>
 8004042:	1c42      	adds	r2, r0, #1
 8004044:	d101      	bne.n	800404a <__sflush_r+0x7a>
 8004046:	682b      	ldr	r3, [r5, #0]
 8004048:	b903      	cbnz	r3, 800404c <__sflush_r+0x7c>
 800404a:	6560      	str	r0, [r4, #84]	; 0x54
 800404c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800404e:	602f      	str	r7, [r5, #0]
 8004050:	2900      	cmp	r1, #0
 8004052:	d0ca      	beq.n	8003fea <__sflush_r+0x1a>
 8004054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004058:	4299      	cmp	r1, r3
 800405a:	d002      	beq.n	8004062 <__sflush_r+0x92>
 800405c:	4628      	mov	r0, r5
 800405e:	f000 f9d7 	bl	8004410 <_free_r>
 8004062:	2000      	movs	r0, #0
 8004064:	6360      	str	r0, [r4, #52]	; 0x34
 8004066:	e7c1      	b.n	8003fec <__sflush_r+0x1c>
 8004068:	6a21      	ldr	r1, [r4, #32]
 800406a:	2301      	movs	r3, #1
 800406c:	4628      	mov	r0, r5
 800406e:	47b0      	blx	r6
 8004070:	1c41      	adds	r1, r0, #1
 8004072:	d1c7      	bne.n	8004004 <__sflush_r+0x34>
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0c4      	beq.n	8004004 <__sflush_r+0x34>
 800407a:	2b1d      	cmp	r3, #29
 800407c:	d001      	beq.n	8004082 <__sflush_r+0xb2>
 800407e:	2b16      	cmp	r3, #22
 8004080:	d101      	bne.n	8004086 <__sflush_r+0xb6>
 8004082:	602f      	str	r7, [r5, #0]
 8004084:	e7b1      	b.n	8003fea <__sflush_r+0x1a>
 8004086:	89a3      	ldrh	r3, [r4, #12]
 8004088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800408c:	81a3      	strh	r3, [r4, #12]
 800408e:	e7ad      	b.n	8003fec <__sflush_r+0x1c>
 8004090:	690f      	ldr	r7, [r1, #16]
 8004092:	2f00      	cmp	r7, #0
 8004094:	d0a9      	beq.n	8003fea <__sflush_r+0x1a>
 8004096:	0793      	lsls	r3, r2, #30
 8004098:	680e      	ldr	r6, [r1, #0]
 800409a:	bf08      	it	eq
 800409c:	694b      	ldreq	r3, [r1, #20]
 800409e:	600f      	str	r7, [r1, #0]
 80040a0:	bf18      	it	ne
 80040a2:	2300      	movne	r3, #0
 80040a4:	eba6 0807 	sub.w	r8, r6, r7
 80040a8:	608b      	str	r3, [r1, #8]
 80040aa:	f1b8 0f00 	cmp.w	r8, #0
 80040ae:	dd9c      	ble.n	8003fea <__sflush_r+0x1a>
 80040b0:	6a21      	ldr	r1, [r4, #32]
 80040b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040b4:	4643      	mov	r3, r8
 80040b6:	463a      	mov	r2, r7
 80040b8:	4628      	mov	r0, r5
 80040ba:	47b0      	blx	r6
 80040bc:	2800      	cmp	r0, #0
 80040be:	dc06      	bgt.n	80040ce <__sflush_r+0xfe>
 80040c0:	89a3      	ldrh	r3, [r4, #12]
 80040c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c6:	81a3      	strh	r3, [r4, #12]
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040cc:	e78e      	b.n	8003fec <__sflush_r+0x1c>
 80040ce:	4407      	add	r7, r0
 80040d0:	eba8 0800 	sub.w	r8, r8, r0
 80040d4:	e7e9      	b.n	80040aa <__sflush_r+0xda>
 80040d6:	bf00      	nop
 80040d8:	20400001 	.word	0x20400001

080040dc <_fflush_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	690b      	ldr	r3, [r1, #16]
 80040e0:	4605      	mov	r5, r0
 80040e2:	460c      	mov	r4, r1
 80040e4:	b913      	cbnz	r3, 80040ec <_fflush_r+0x10>
 80040e6:	2500      	movs	r5, #0
 80040e8:	4628      	mov	r0, r5
 80040ea:	bd38      	pop	{r3, r4, r5, pc}
 80040ec:	b118      	cbz	r0, 80040f6 <_fflush_r+0x1a>
 80040ee:	6983      	ldr	r3, [r0, #24]
 80040f0:	b90b      	cbnz	r3, 80040f6 <_fflush_r+0x1a>
 80040f2:	f000 f887 	bl	8004204 <__sinit>
 80040f6:	4b14      	ldr	r3, [pc, #80]	; (8004148 <_fflush_r+0x6c>)
 80040f8:	429c      	cmp	r4, r3
 80040fa:	d11b      	bne.n	8004134 <_fflush_r+0x58>
 80040fc:	686c      	ldr	r4, [r5, #4]
 80040fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0ef      	beq.n	80040e6 <_fflush_r+0xa>
 8004106:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004108:	07d0      	lsls	r0, r2, #31
 800410a:	d404      	bmi.n	8004116 <_fflush_r+0x3a>
 800410c:	0599      	lsls	r1, r3, #22
 800410e:	d402      	bmi.n	8004116 <_fflush_r+0x3a>
 8004110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004112:	f000 f915 	bl	8004340 <__retarget_lock_acquire_recursive>
 8004116:	4628      	mov	r0, r5
 8004118:	4621      	mov	r1, r4
 800411a:	f7ff ff59 	bl	8003fd0 <__sflush_r>
 800411e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004120:	07da      	lsls	r2, r3, #31
 8004122:	4605      	mov	r5, r0
 8004124:	d4e0      	bmi.n	80040e8 <_fflush_r+0xc>
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	059b      	lsls	r3, r3, #22
 800412a:	d4dd      	bmi.n	80040e8 <_fflush_r+0xc>
 800412c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800412e:	f000 f908 	bl	8004342 <__retarget_lock_release_recursive>
 8004132:	e7d9      	b.n	80040e8 <_fflush_r+0xc>
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <_fflush_r+0x70>)
 8004136:	429c      	cmp	r4, r3
 8004138:	d101      	bne.n	800413e <_fflush_r+0x62>
 800413a:	68ac      	ldr	r4, [r5, #8]
 800413c:	e7df      	b.n	80040fe <_fflush_r+0x22>
 800413e:	4b04      	ldr	r3, [pc, #16]	; (8004150 <_fflush_r+0x74>)
 8004140:	429c      	cmp	r4, r3
 8004142:	bf08      	it	eq
 8004144:	68ec      	ldreq	r4, [r5, #12]
 8004146:	e7da      	b.n	80040fe <_fflush_r+0x22>
 8004148:	08004820 	.word	0x08004820
 800414c:	08004840 	.word	0x08004840
 8004150:	08004800 	.word	0x08004800

08004154 <std>:
 8004154:	2300      	movs	r3, #0
 8004156:	b510      	push	{r4, lr}
 8004158:	4604      	mov	r4, r0
 800415a:	e9c0 3300 	strd	r3, r3, [r0]
 800415e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004162:	6083      	str	r3, [r0, #8]
 8004164:	8181      	strh	r1, [r0, #12]
 8004166:	6643      	str	r3, [r0, #100]	; 0x64
 8004168:	81c2      	strh	r2, [r0, #14]
 800416a:	6183      	str	r3, [r0, #24]
 800416c:	4619      	mov	r1, r3
 800416e:	2208      	movs	r2, #8
 8004170:	305c      	adds	r0, #92	; 0x5c
 8004172:	f7ff fb5f 	bl	8003834 <memset>
 8004176:	4b05      	ldr	r3, [pc, #20]	; (800418c <std+0x38>)
 8004178:	6263      	str	r3, [r4, #36]	; 0x24
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <std+0x3c>)
 800417c:	62a3      	str	r3, [r4, #40]	; 0x28
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <std+0x40>)
 8004180:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004182:	4b05      	ldr	r3, [pc, #20]	; (8004198 <std+0x44>)
 8004184:	6224      	str	r4, [r4, #32]
 8004186:	6323      	str	r3, [r4, #48]	; 0x30
 8004188:	bd10      	pop	{r4, pc}
 800418a:	bf00      	nop
 800418c:	080045f1 	.word	0x080045f1
 8004190:	08004613 	.word	0x08004613
 8004194:	0800464b 	.word	0x0800464b
 8004198:	0800466f 	.word	0x0800466f

0800419c <_cleanup_r>:
 800419c:	4901      	ldr	r1, [pc, #4]	; (80041a4 <_cleanup_r+0x8>)
 800419e:	f000 b8af 	b.w	8004300 <_fwalk_reent>
 80041a2:	bf00      	nop
 80041a4:	080040dd 	.word	0x080040dd

080041a8 <__sfmoreglue>:
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	2268      	movs	r2, #104	; 0x68
 80041ac:	1e4d      	subs	r5, r1, #1
 80041ae:	4355      	muls	r5, r2
 80041b0:	460e      	mov	r6, r1
 80041b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80041b6:	f000 f997 	bl	80044e8 <_malloc_r>
 80041ba:	4604      	mov	r4, r0
 80041bc:	b140      	cbz	r0, 80041d0 <__sfmoreglue+0x28>
 80041be:	2100      	movs	r1, #0
 80041c0:	e9c0 1600 	strd	r1, r6, [r0]
 80041c4:	300c      	adds	r0, #12
 80041c6:	60a0      	str	r0, [r4, #8]
 80041c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80041cc:	f7ff fb32 	bl	8003834 <memset>
 80041d0:	4620      	mov	r0, r4
 80041d2:	bd70      	pop	{r4, r5, r6, pc}

080041d4 <__sfp_lock_acquire>:
 80041d4:	4801      	ldr	r0, [pc, #4]	; (80041dc <__sfp_lock_acquire+0x8>)
 80041d6:	f000 b8b3 	b.w	8004340 <__retarget_lock_acquire_recursive>
 80041da:	bf00      	nop
 80041dc:	20000129 	.word	0x20000129

080041e0 <__sfp_lock_release>:
 80041e0:	4801      	ldr	r0, [pc, #4]	; (80041e8 <__sfp_lock_release+0x8>)
 80041e2:	f000 b8ae 	b.w	8004342 <__retarget_lock_release_recursive>
 80041e6:	bf00      	nop
 80041e8:	20000129 	.word	0x20000129

080041ec <__sinit_lock_acquire>:
 80041ec:	4801      	ldr	r0, [pc, #4]	; (80041f4 <__sinit_lock_acquire+0x8>)
 80041ee:	f000 b8a7 	b.w	8004340 <__retarget_lock_acquire_recursive>
 80041f2:	bf00      	nop
 80041f4:	2000012a 	.word	0x2000012a

080041f8 <__sinit_lock_release>:
 80041f8:	4801      	ldr	r0, [pc, #4]	; (8004200 <__sinit_lock_release+0x8>)
 80041fa:	f000 b8a2 	b.w	8004342 <__retarget_lock_release_recursive>
 80041fe:	bf00      	nop
 8004200:	2000012a 	.word	0x2000012a

08004204 <__sinit>:
 8004204:	b510      	push	{r4, lr}
 8004206:	4604      	mov	r4, r0
 8004208:	f7ff fff0 	bl	80041ec <__sinit_lock_acquire>
 800420c:	69a3      	ldr	r3, [r4, #24]
 800420e:	b11b      	cbz	r3, 8004218 <__sinit+0x14>
 8004210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004214:	f7ff bff0 	b.w	80041f8 <__sinit_lock_release>
 8004218:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800421c:	6523      	str	r3, [r4, #80]	; 0x50
 800421e:	4b13      	ldr	r3, [pc, #76]	; (800426c <__sinit+0x68>)
 8004220:	4a13      	ldr	r2, [pc, #76]	; (8004270 <__sinit+0x6c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	62a2      	str	r2, [r4, #40]	; 0x28
 8004226:	42a3      	cmp	r3, r4
 8004228:	bf04      	itt	eq
 800422a:	2301      	moveq	r3, #1
 800422c:	61a3      	streq	r3, [r4, #24]
 800422e:	4620      	mov	r0, r4
 8004230:	f000 f820 	bl	8004274 <__sfp>
 8004234:	6060      	str	r0, [r4, #4]
 8004236:	4620      	mov	r0, r4
 8004238:	f000 f81c 	bl	8004274 <__sfp>
 800423c:	60a0      	str	r0, [r4, #8]
 800423e:	4620      	mov	r0, r4
 8004240:	f000 f818 	bl	8004274 <__sfp>
 8004244:	2200      	movs	r2, #0
 8004246:	60e0      	str	r0, [r4, #12]
 8004248:	2104      	movs	r1, #4
 800424a:	6860      	ldr	r0, [r4, #4]
 800424c:	f7ff ff82 	bl	8004154 <std>
 8004250:	68a0      	ldr	r0, [r4, #8]
 8004252:	2201      	movs	r2, #1
 8004254:	2109      	movs	r1, #9
 8004256:	f7ff ff7d 	bl	8004154 <std>
 800425a:	68e0      	ldr	r0, [r4, #12]
 800425c:	2202      	movs	r2, #2
 800425e:	2112      	movs	r1, #18
 8004260:	f7ff ff78 	bl	8004154 <std>
 8004264:	2301      	movs	r3, #1
 8004266:	61a3      	str	r3, [r4, #24]
 8004268:	e7d2      	b.n	8004210 <__sinit+0xc>
 800426a:	bf00      	nop
 800426c:	080047c8 	.word	0x080047c8
 8004270:	0800419d 	.word	0x0800419d

08004274 <__sfp>:
 8004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004276:	4607      	mov	r7, r0
 8004278:	f7ff ffac 	bl	80041d4 <__sfp_lock_acquire>
 800427c:	4b1e      	ldr	r3, [pc, #120]	; (80042f8 <__sfp+0x84>)
 800427e:	681e      	ldr	r6, [r3, #0]
 8004280:	69b3      	ldr	r3, [r6, #24]
 8004282:	b913      	cbnz	r3, 800428a <__sfp+0x16>
 8004284:	4630      	mov	r0, r6
 8004286:	f7ff ffbd 	bl	8004204 <__sinit>
 800428a:	3648      	adds	r6, #72	; 0x48
 800428c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004290:	3b01      	subs	r3, #1
 8004292:	d503      	bpl.n	800429c <__sfp+0x28>
 8004294:	6833      	ldr	r3, [r6, #0]
 8004296:	b30b      	cbz	r3, 80042dc <__sfp+0x68>
 8004298:	6836      	ldr	r6, [r6, #0]
 800429a:	e7f7      	b.n	800428c <__sfp+0x18>
 800429c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80042a0:	b9d5      	cbnz	r5, 80042d8 <__sfp+0x64>
 80042a2:	4b16      	ldr	r3, [pc, #88]	; (80042fc <__sfp+0x88>)
 80042a4:	60e3      	str	r3, [r4, #12]
 80042a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042aa:	6665      	str	r5, [r4, #100]	; 0x64
 80042ac:	f000 f847 	bl	800433e <__retarget_lock_init_recursive>
 80042b0:	f7ff ff96 	bl	80041e0 <__sfp_lock_release>
 80042b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80042b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80042bc:	6025      	str	r5, [r4, #0]
 80042be:	61a5      	str	r5, [r4, #24]
 80042c0:	2208      	movs	r2, #8
 80042c2:	4629      	mov	r1, r5
 80042c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042c8:	f7ff fab4 	bl	8003834 <memset>
 80042cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80042d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80042d4:	4620      	mov	r0, r4
 80042d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042d8:	3468      	adds	r4, #104	; 0x68
 80042da:	e7d9      	b.n	8004290 <__sfp+0x1c>
 80042dc:	2104      	movs	r1, #4
 80042de:	4638      	mov	r0, r7
 80042e0:	f7ff ff62 	bl	80041a8 <__sfmoreglue>
 80042e4:	4604      	mov	r4, r0
 80042e6:	6030      	str	r0, [r6, #0]
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d1d5      	bne.n	8004298 <__sfp+0x24>
 80042ec:	f7ff ff78 	bl	80041e0 <__sfp_lock_release>
 80042f0:	230c      	movs	r3, #12
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	e7ee      	b.n	80042d4 <__sfp+0x60>
 80042f6:	bf00      	nop
 80042f8:	080047c8 	.word	0x080047c8
 80042fc:	ffff0001 	.word	0xffff0001

08004300 <_fwalk_reent>:
 8004300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004304:	4606      	mov	r6, r0
 8004306:	4688      	mov	r8, r1
 8004308:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800430c:	2700      	movs	r7, #0
 800430e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004312:	f1b9 0901 	subs.w	r9, r9, #1
 8004316:	d505      	bpl.n	8004324 <_fwalk_reent+0x24>
 8004318:	6824      	ldr	r4, [r4, #0]
 800431a:	2c00      	cmp	r4, #0
 800431c:	d1f7      	bne.n	800430e <_fwalk_reent+0xe>
 800431e:	4638      	mov	r0, r7
 8004320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004324:	89ab      	ldrh	r3, [r5, #12]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d907      	bls.n	800433a <_fwalk_reent+0x3a>
 800432a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800432e:	3301      	adds	r3, #1
 8004330:	d003      	beq.n	800433a <_fwalk_reent+0x3a>
 8004332:	4629      	mov	r1, r5
 8004334:	4630      	mov	r0, r6
 8004336:	47c0      	blx	r8
 8004338:	4307      	orrs	r7, r0
 800433a:	3568      	adds	r5, #104	; 0x68
 800433c:	e7e9      	b.n	8004312 <_fwalk_reent+0x12>

0800433e <__retarget_lock_init_recursive>:
 800433e:	4770      	bx	lr

08004340 <__retarget_lock_acquire_recursive>:
 8004340:	4770      	bx	lr

08004342 <__retarget_lock_release_recursive>:
 8004342:	4770      	bx	lr

08004344 <__swhatbuf_r>:
 8004344:	b570      	push	{r4, r5, r6, lr}
 8004346:	460e      	mov	r6, r1
 8004348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800434c:	2900      	cmp	r1, #0
 800434e:	b096      	sub	sp, #88	; 0x58
 8004350:	4614      	mov	r4, r2
 8004352:	461d      	mov	r5, r3
 8004354:	da08      	bge.n	8004368 <__swhatbuf_r+0x24>
 8004356:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	602a      	str	r2, [r5, #0]
 800435e:	061a      	lsls	r2, r3, #24
 8004360:	d410      	bmi.n	8004384 <__swhatbuf_r+0x40>
 8004362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004366:	e00e      	b.n	8004386 <__swhatbuf_r+0x42>
 8004368:	466a      	mov	r2, sp
 800436a:	f000 f9a7 	bl	80046bc <_fstat_r>
 800436e:	2800      	cmp	r0, #0
 8004370:	dbf1      	blt.n	8004356 <__swhatbuf_r+0x12>
 8004372:	9a01      	ldr	r2, [sp, #4]
 8004374:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004378:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800437c:	425a      	negs	r2, r3
 800437e:	415a      	adcs	r2, r3
 8004380:	602a      	str	r2, [r5, #0]
 8004382:	e7ee      	b.n	8004362 <__swhatbuf_r+0x1e>
 8004384:	2340      	movs	r3, #64	; 0x40
 8004386:	2000      	movs	r0, #0
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	b016      	add	sp, #88	; 0x58
 800438c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004390 <__smakebuf_r>:
 8004390:	898b      	ldrh	r3, [r1, #12]
 8004392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004394:	079d      	lsls	r5, r3, #30
 8004396:	4606      	mov	r6, r0
 8004398:	460c      	mov	r4, r1
 800439a:	d507      	bpl.n	80043ac <__smakebuf_r+0x1c>
 800439c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	6123      	str	r3, [r4, #16]
 80043a4:	2301      	movs	r3, #1
 80043a6:	6163      	str	r3, [r4, #20]
 80043a8:	b002      	add	sp, #8
 80043aa:	bd70      	pop	{r4, r5, r6, pc}
 80043ac:	ab01      	add	r3, sp, #4
 80043ae:	466a      	mov	r2, sp
 80043b0:	f7ff ffc8 	bl	8004344 <__swhatbuf_r>
 80043b4:	9900      	ldr	r1, [sp, #0]
 80043b6:	4605      	mov	r5, r0
 80043b8:	4630      	mov	r0, r6
 80043ba:	f000 f895 	bl	80044e8 <_malloc_r>
 80043be:	b948      	cbnz	r0, 80043d4 <__smakebuf_r+0x44>
 80043c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043c4:	059a      	lsls	r2, r3, #22
 80043c6:	d4ef      	bmi.n	80043a8 <__smakebuf_r+0x18>
 80043c8:	f023 0303 	bic.w	r3, r3, #3
 80043cc:	f043 0302 	orr.w	r3, r3, #2
 80043d0:	81a3      	strh	r3, [r4, #12]
 80043d2:	e7e3      	b.n	800439c <__smakebuf_r+0xc>
 80043d4:	4b0d      	ldr	r3, [pc, #52]	; (800440c <__smakebuf_r+0x7c>)
 80043d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80043d8:	89a3      	ldrh	r3, [r4, #12]
 80043da:	6020      	str	r0, [r4, #0]
 80043dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e0:	81a3      	strh	r3, [r4, #12]
 80043e2:	9b00      	ldr	r3, [sp, #0]
 80043e4:	6163      	str	r3, [r4, #20]
 80043e6:	9b01      	ldr	r3, [sp, #4]
 80043e8:	6120      	str	r0, [r4, #16]
 80043ea:	b15b      	cbz	r3, 8004404 <__smakebuf_r+0x74>
 80043ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043f0:	4630      	mov	r0, r6
 80043f2:	f000 f975 	bl	80046e0 <_isatty_r>
 80043f6:	b128      	cbz	r0, 8004404 <__smakebuf_r+0x74>
 80043f8:	89a3      	ldrh	r3, [r4, #12]
 80043fa:	f023 0303 	bic.w	r3, r3, #3
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	81a3      	strh	r3, [r4, #12]
 8004404:	89a0      	ldrh	r0, [r4, #12]
 8004406:	4305      	orrs	r5, r0
 8004408:	81a5      	strh	r5, [r4, #12]
 800440a:	e7cd      	b.n	80043a8 <__smakebuf_r+0x18>
 800440c:	0800419d 	.word	0x0800419d

08004410 <_free_r>:
 8004410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004412:	2900      	cmp	r1, #0
 8004414:	d044      	beq.n	80044a0 <_free_r+0x90>
 8004416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800441a:	9001      	str	r0, [sp, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f1a1 0404 	sub.w	r4, r1, #4
 8004422:	bfb8      	it	lt
 8004424:	18e4      	addlt	r4, r4, r3
 8004426:	f000 f97d 	bl	8004724 <__malloc_lock>
 800442a:	4a1e      	ldr	r2, [pc, #120]	; (80044a4 <_free_r+0x94>)
 800442c:	9801      	ldr	r0, [sp, #4]
 800442e:	6813      	ldr	r3, [r2, #0]
 8004430:	b933      	cbnz	r3, 8004440 <_free_r+0x30>
 8004432:	6063      	str	r3, [r4, #4]
 8004434:	6014      	str	r4, [r2, #0]
 8004436:	b003      	add	sp, #12
 8004438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800443c:	f000 b978 	b.w	8004730 <__malloc_unlock>
 8004440:	42a3      	cmp	r3, r4
 8004442:	d908      	bls.n	8004456 <_free_r+0x46>
 8004444:	6825      	ldr	r5, [r4, #0]
 8004446:	1961      	adds	r1, r4, r5
 8004448:	428b      	cmp	r3, r1
 800444a:	bf01      	itttt	eq
 800444c:	6819      	ldreq	r1, [r3, #0]
 800444e:	685b      	ldreq	r3, [r3, #4]
 8004450:	1949      	addeq	r1, r1, r5
 8004452:	6021      	streq	r1, [r4, #0]
 8004454:	e7ed      	b.n	8004432 <_free_r+0x22>
 8004456:	461a      	mov	r2, r3
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	b10b      	cbz	r3, 8004460 <_free_r+0x50>
 800445c:	42a3      	cmp	r3, r4
 800445e:	d9fa      	bls.n	8004456 <_free_r+0x46>
 8004460:	6811      	ldr	r1, [r2, #0]
 8004462:	1855      	adds	r5, r2, r1
 8004464:	42a5      	cmp	r5, r4
 8004466:	d10b      	bne.n	8004480 <_free_r+0x70>
 8004468:	6824      	ldr	r4, [r4, #0]
 800446a:	4421      	add	r1, r4
 800446c:	1854      	adds	r4, r2, r1
 800446e:	42a3      	cmp	r3, r4
 8004470:	6011      	str	r1, [r2, #0]
 8004472:	d1e0      	bne.n	8004436 <_free_r+0x26>
 8004474:	681c      	ldr	r4, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	6053      	str	r3, [r2, #4]
 800447a:	4421      	add	r1, r4
 800447c:	6011      	str	r1, [r2, #0]
 800447e:	e7da      	b.n	8004436 <_free_r+0x26>
 8004480:	d902      	bls.n	8004488 <_free_r+0x78>
 8004482:	230c      	movs	r3, #12
 8004484:	6003      	str	r3, [r0, #0]
 8004486:	e7d6      	b.n	8004436 <_free_r+0x26>
 8004488:	6825      	ldr	r5, [r4, #0]
 800448a:	1961      	adds	r1, r4, r5
 800448c:	428b      	cmp	r3, r1
 800448e:	bf04      	itt	eq
 8004490:	6819      	ldreq	r1, [r3, #0]
 8004492:	685b      	ldreq	r3, [r3, #4]
 8004494:	6063      	str	r3, [r4, #4]
 8004496:	bf04      	itt	eq
 8004498:	1949      	addeq	r1, r1, r5
 800449a:	6021      	streq	r1, [r4, #0]
 800449c:	6054      	str	r4, [r2, #4]
 800449e:	e7ca      	b.n	8004436 <_free_r+0x26>
 80044a0:	b003      	add	sp, #12
 80044a2:	bd30      	pop	{r4, r5, pc}
 80044a4:	2000012c 	.word	0x2000012c

080044a8 <sbrk_aligned>:
 80044a8:	b570      	push	{r4, r5, r6, lr}
 80044aa:	4e0e      	ldr	r6, [pc, #56]	; (80044e4 <sbrk_aligned+0x3c>)
 80044ac:	460c      	mov	r4, r1
 80044ae:	6831      	ldr	r1, [r6, #0]
 80044b0:	4605      	mov	r5, r0
 80044b2:	b911      	cbnz	r1, 80044ba <sbrk_aligned+0x12>
 80044b4:	f000 f88c 	bl	80045d0 <_sbrk_r>
 80044b8:	6030      	str	r0, [r6, #0]
 80044ba:	4621      	mov	r1, r4
 80044bc:	4628      	mov	r0, r5
 80044be:	f000 f887 	bl	80045d0 <_sbrk_r>
 80044c2:	1c43      	adds	r3, r0, #1
 80044c4:	d00a      	beq.n	80044dc <sbrk_aligned+0x34>
 80044c6:	1cc4      	adds	r4, r0, #3
 80044c8:	f024 0403 	bic.w	r4, r4, #3
 80044cc:	42a0      	cmp	r0, r4
 80044ce:	d007      	beq.n	80044e0 <sbrk_aligned+0x38>
 80044d0:	1a21      	subs	r1, r4, r0
 80044d2:	4628      	mov	r0, r5
 80044d4:	f000 f87c 	bl	80045d0 <_sbrk_r>
 80044d8:	3001      	adds	r0, #1
 80044da:	d101      	bne.n	80044e0 <sbrk_aligned+0x38>
 80044dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80044e0:	4620      	mov	r0, r4
 80044e2:	bd70      	pop	{r4, r5, r6, pc}
 80044e4:	20000130 	.word	0x20000130

080044e8 <_malloc_r>:
 80044e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ec:	1ccd      	adds	r5, r1, #3
 80044ee:	f025 0503 	bic.w	r5, r5, #3
 80044f2:	3508      	adds	r5, #8
 80044f4:	2d0c      	cmp	r5, #12
 80044f6:	bf38      	it	cc
 80044f8:	250c      	movcc	r5, #12
 80044fa:	2d00      	cmp	r5, #0
 80044fc:	4607      	mov	r7, r0
 80044fe:	db01      	blt.n	8004504 <_malloc_r+0x1c>
 8004500:	42a9      	cmp	r1, r5
 8004502:	d905      	bls.n	8004510 <_malloc_r+0x28>
 8004504:	230c      	movs	r3, #12
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	2600      	movs	r6, #0
 800450a:	4630      	mov	r0, r6
 800450c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004510:	4e2e      	ldr	r6, [pc, #184]	; (80045cc <_malloc_r+0xe4>)
 8004512:	f000 f907 	bl	8004724 <__malloc_lock>
 8004516:	6833      	ldr	r3, [r6, #0]
 8004518:	461c      	mov	r4, r3
 800451a:	bb34      	cbnz	r4, 800456a <_malloc_r+0x82>
 800451c:	4629      	mov	r1, r5
 800451e:	4638      	mov	r0, r7
 8004520:	f7ff ffc2 	bl	80044a8 <sbrk_aligned>
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	4604      	mov	r4, r0
 8004528:	d14d      	bne.n	80045c6 <_malloc_r+0xde>
 800452a:	6834      	ldr	r4, [r6, #0]
 800452c:	4626      	mov	r6, r4
 800452e:	2e00      	cmp	r6, #0
 8004530:	d140      	bne.n	80045b4 <_malloc_r+0xcc>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	4631      	mov	r1, r6
 8004536:	4638      	mov	r0, r7
 8004538:	eb04 0803 	add.w	r8, r4, r3
 800453c:	f000 f848 	bl	80045d0 <_sbrk_r>
 8004540:	4580      	cmp	r8, r0
 8004542:	d13a      	bne.n	80045ba <_malloc_r+0xd2>
 8004544:	6821      	ldr	r1, [r4, #0]
 8004546:	3503      	adds	r5, #3
 8004548:	1a6d      	subs	r5, r5, r1
 800454a:	f025 0503 	bic.w	r5, r5, #3
 800454e:	3508      	adds	r5, #8
 8004550:	2d0c      	cmp	r5, #12
 8004552:	bf38      	it	cc
 8004554:	250c      	movcc	r5, #12
 8004556:	4629      	mov	r1, r5
 8004558:	4638      	mov	r0, r7
 800455a:	f7ff ffa5 	bl	80044a8 <sbrk_aligned>
 800455e:	3001      	adds	r0, #1
 8004560:	d02b      	beq.n	80045ba <_malloc_r+0xd2>
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	442b      	add	r3, r5
 8004566:	6023      	str	r3, [r4, #0]
 8004568:	e00e      	b.n	8004588 <_malloc_r+0xa0>
 800456a:	6822      	ldr	r2, [r4, #0]
 800456c:	1b52      	subs	r2, r2, r5
 800456e:	d41e      	bmi.n	80045ae <_malloc_r+0xc6>
 8004570:	2a0b      	cmp	r2, #11
 8004572:	d916      	bls.n	80045a2 <_malloc_r+0xba>
 8004574:	1961      	adds	r1, r4, r5
 8004576:	42a3      	cmp	r3, r4
 8004578:	6025      	str	r5, [r4, #0]
 800457a:	bf18      	it	ne
 800457c:	6059      	strne	r1, [r3, #4]
 800457e:	6863      	ldr	r3, [r4, #4]
 8004580:	bf08      	it	eq
 8004582:	6031      	streq	r1, [r6, #0]
 8004584:	5162      	str	r2, [r4, r5]
 8004586:	604b      	str	r3, [r1, #4]
 8004588:	4638      	mov	r0, r7
 800458a:	f104 060b 	add.w	r6, r4, #11
 800458e:	f000 f8cf 	bl	8004730 <__malloc_unlock>
 8004592:	f026 0607 	bic.w	r6, r6, #7
 8004596:	1d23      	adds	r3, r4, #4
 8004598:	1af2      	subs	r2, r6, r3
 800459a:	d0b6      	beq.n	800450a <_malloc_r+0x22>
 800459c:	1b9b      	subs	r3, r3, r6
 800459e:	50a3      	str	r3, [r4, r2]
 80045a0:	e7b3      	b.n	800450a <_malloc_r+0x22>
 80045a2:	6862      	ldr	r2, [r4, #4]
 80045a4:	42a3      	cmp	r3, r4
 80045a6:	bf0c      	ite	eq
 80045a8:	6032      	streq	r2, [r6, #0]
 80045aa:	605a      	strne	r2, [r3, #4]
 80045ac:	e7ec      	b.n	8004588 <_malloc_r+0xa0>
 80045ae:	4623      	mov	r3, r4
 80045b0:	6864      	ldr	r4, [r4, #4]
 80045b2:	e7b2      	b.n	800451a <_malloc_r+0x32>
 80045b4:	4634      	mov	r4, r6
 80045b6:	6876      	ldr	r6, [r6, #4]
 80045b8:	e7b9      	b.n	800452e <_malloc_r+0x46>
 80045ba:	230c      	movs	r3, #12
 80045bc:	603b      	str	r3, [r7, #0]
 80045be:	4638      	mov	r0, r7
 80045c0:	f000 f8b6 	bl	8004730 <__malloc_unlock>
 80045c4:	e7a1      	b.n	800450a <_malloc_r+0x22>
 80045c6:	6025      	str	r5, [r4, #0]
 80045c8:	e7de      	b.n	8004588 <_malloc_r+0xa0>
 80045ca:	bf00      	nop
 80045cc:	2000012c 	.word	0x2000012c

080045d0 <_sbrk_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	4d06      	ldr	r5, [pc, #24]	; (80045ec <_sbrk_r+0x1c>)
 80045d4:	2300      	movs	r3, #0
 80045d6:	4604      	mov	r4, r0
 80045d8:	4608      	mov	r0, r1
 80045da:	602b      	str	r3, [r5, #0]
 80045dc:	f7fc fa08 	bl	80009f0 <_sbrk>
 80045e0:	1c43      	adds	r3, r0, #1
 80045e2:	d102      	bne.n	80045ea <_sbrk_r+0x1a>
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	b103      	cbz	r3, 80045ea <_sbrk_r+0x1a>
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	bd38      	pop	{r3, r4, r5, pc}
 80045ec:	20000134 	.word	0x20000134

080045f0 <__sread>:
 80045f0:	b510      	push	{r4, lr}
 80045f2:	460c      	mov	r4, r1
 80045f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f8:	f000 f8a0 	bl	800473c <_read_r>
 80045fc:	2800      	cmp	r0, #0
 80045fe:	bfab      	itete	ge
 8004600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004602:	89a3      	ldrhlt	r3, [r4, #12]
 8004604:	181b      	addge	r3, r3, r0
 8004606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800460a:	bfac      	ite	ge
 800460c:	6563      	strge	r3, [r4, #84]	; 0x54
 800460e:	81a3      	strhlt	r3, [r4, #12]
 8004610:	bd10      	pop	{r4, pc}

08004612 <__swrite>:
 8004612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004616:	461f      	mov	r7, r3
 8004618:	898b      	ldrh	r3, [r1, #12]
 800461a:	05db      	lsls	r3, r3, #23
 800461c:	4605      	mov	r5, r0
 800461e:	460c      	mov	r4, r1
 8004620:	4616      	mov	r6, r2
 8004622:	d505      	bpl.n	8004630 <__swrite+0x1e>
 8004624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004628:	2302      	movs	r3, #2
 800462a:	2200      	movs	r2, #0
 800462c:	f000 f868 	bl	8004700 <_lseek_r>
 8004630:	89a3      	ldrh	r3, [r4, #12]
 8004632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800463a:	81a3      	strh	r3, [r4, #12]
 800463c:	4632      	mov	r2, r6
 800463e:	463b      	mov	r3, r7
 8004640:	4628      	mov	r0, r5
 8004642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004646:	f000 b817 	b.w	8004678 <_write_r>

0800464a <__sseek>:
 800464a:	b510      	push	{r4, lr}
 800464c:	460c      	mov	r4, r1
 800464e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004652:	f000 f855 	bl	8004700 <_lseek_r>
 8004656:	1c43      	adds	r3, r0, #1
 8004658:	89a3      	ldrh	r3, [r4, #12]
 800465a:	bf15      	itete	ne
 800465c:	6560      	strne	r0, [r4, #84]	; 0x54
 800465e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004666:	81a3      	strheq	r3, [r4, #12]
 8004668:	bf18      	it	ne
 800466a:	81a3      	strhne	r3, [r4, #12]
 800466c:	bd10      	pop	{r4, pc}

0800466e <__sclose>:
 800466e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004672:	f000 b813 	b.w	800469c <_close_r>
	...

08004678 <_write_r>:
 8004678:	b538      	push	{r3, r4, r5, lr}
 800467a:	4d07      	ldr	r5, [pc, #28]	; (8004698 <_write_r+0x20>)
 800467c:	4604      	mov	r4, r0
 800467e:	4608      	mov	r0, r1
 8004680:	4611      	mov	r1, r2
 8004682:	2200      	movs	r2, #0
 8004684:	602a      	str	r2, [r5, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	f7fc f961 	bl	800094e <_write>
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	d102      	bne.n	8004696 <_write_r+0x1e>
 8004690:	682b      	ldr	r3, [r5, #0]
 8004692:	b103      	cbz	r3, 8004696 <_write_r+0x1e>
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	bd38      	pop	{r3, r4, r5, pc}
 8004698:	20000134 	.word	0x20000134

0800469c <_close_r>:
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	4d06      	ldr	r5, [pc, #24]	; (80046b8 <_close_r+0x1c>)
 80046a0:	2300      	movs	r3, #0
 80046a2:	4604      	mov	r4, r0
 80046a4:	4608      	mov	r0, r1
 80046a6:	602b      	str	r3, [r5, #0]
 80046a8:	f7fc f96d 	bl	8000986 <_close>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d102      	bne.n	80046b6 <_close_r+0x1a>
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	b103      	cbz	r3, 80046b6 <_close_r+0x1a>
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	bd38      	pop	{r3, r4, r5, pc}
 80046b8:	20000134 	.word	0x20000134

080046bc <_fstat_r>:
 80046bc:	b538      	push	{r3, r4, r5, lr}
 80046be:	4d07      	ldr	r5, [pc, #28]	; (80046dc <_fstat_r+0x20>)
 80046c0:	2300      	movs	r3, #0
 80046c2:	4604      	mov	r4, r0
 80046c4:	4608      	mov	r0, r1
 80046c6:	4611      	mov	r1, r2
 80046c8:	602b      	str	r3, [r5, #0]
 80046ca:	f7fc f968 	bl	800099e <_fstat>
 80046ce:	1c43      	adds	r3, r0, #1
 80046d0:	d102      	bne.n	80046d8 <_fstat_r+0x1c>
 80046d2:	682b      	ldr	r3, [r5, #0]
 80046d4:	b103      	cbz	r3, 80046d8 <_fstat_r+0x1c>
 80046d6:	6023      	str	r3, [r4, #0]
 80046d8:	bd38      	pop	{r3, r4, r5, pc}
 80046da:	bf00      	nop
 80046dc:	20000134 	.word	0x20000134

080046e0 <_isatty_r>:
 80046e0:	b538      	push	{r3, r4, r5, lr}
 80046e2:	4d06      	ldr	r5, [pc, #24]	; (80046fc <_isatty_r+0x1c>)
 80046e4:	2300      	movs	r3, #0
 80046e6:	4604      	mov	r4, r0
 80046e8:	4608      	mov	r0, r1
 80046ea:	602b      	str	r3, [r5, #0]
 80046ec:	f7fc f967 	bl	80009be <_isatty>
 80046f0:	1c43      	adds	r3, r0, #1
 80046f2:	d102      	bne.n	80046fa <_isatty_r+0x1a>
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	b103      	cbz	r3, 80046fa <_isatty_r+0x1a>
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	bd38      	pop	{r3, r4, r5, pc}
 80046fc:	20000134 	.word	0x20000134

08004700 <_lseek_r>:
 8004700:	b538      	push	{r3, r4, r5, lr}
 8004702:	4d07      	ldr	r5, [pc, #28]	; (8004720 <_lseek_r+0x20>)
 8004704:	4604      	mov	r4, r0
 8004706:	4608      	mov	r0, r1
 8004708:	4611      	mov	r1, r2
 800470a:	2200      	movs	r2, #0
 800470c:	602a      	str	r2, [r5, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	f7fc f960 	bl	80009d4 <_lseek>
 8004714:	1c43      	adds	r3, r0, #1
 8004716:	d102      	bne.n	800471e <_lseek_r+0x1e>
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	b103      	cbz	r3, 800471e <_lseek_r+0x1e>
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	bd38      	pop	{r3, r4, r5, pc}
 8004720:	20000134 	.word	0x20000134

08004724 <__malloc_lock>:
 8004724:	4801      	ldr	r0, [pc, #4]	; (800472c <__malloc_lock+0x8>)
 8004726:	f7ff be0b 	b.w	8004340 <__retarget_lock_acquire_recursive>
 800472a:	bf00      	nop
 800472c:	20000128 	.word	0x20000128

08004730 <__malloc_unlock>:
 8004730:	4801      	ldr	r0, [pc, #4]	; (8004738 <__malloc_unlock+0x8>)
 8004732:	f7ff be06 	b.w	8004342 <__retarget_lock_release_recursive>
 8004736:	bf00      	nop
 8004738:	20000128 	.word	0x20000128

0800473c <_read_r>:
 800473c:	b538      	push	{r3, r4, r5, lr}
 800473e:	4d07      	ldr	r5, [pc, #28]	; (800475c <_read_r+0x20>)
 8004740:	4604      	mov	r4, r0
 8004742:	4608      	mov	r0, r1
 8004744:	4611      	mov	r1, r2
 8004746:	2200      	movs	r2, #0
 8004748:	602a      	str	r2, [r5, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	f7fc f8e2 	bl	8000914 <_read>
 8004750:	1c43      	adds	r3, r0, #1
 8004752:	d102      	bne.n	800475a <_read_r+0x1e>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	b103      	cbz	r3, 800475a <_read_r+0x1e>
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	bd38      	pop	{r3, r4, r5, pc}
 800475c:	20000134 	.word	0x20000134

08004760 <_init>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	bf00      	nop
 8004764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004766:	bc08      	pop	{r3}
 8004768:	469e      	mov	lr, r3
 800476a:	4770      	bx	lr

0800476c <_fini>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr

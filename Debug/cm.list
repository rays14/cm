
cm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08007008  08007008  00017008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070f0  080070f0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080070f0  080070f0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070f0  080070f0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070f0  080070f0  000170f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070f4  080070f4  000170f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080070f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000008c  08007184  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08007184  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012211  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025de  00000000  00000000  000322cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  000348b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  00035a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f8e  00000000  00000000  00036b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126e0  00000000  00000000  00039af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104f77  00000000  00000000  0004c1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015114d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005430  00000000  00000000  001511a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ff0 	.word	0x08006ff0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08006ff0 	.word	0x08006ff0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <avg>:
		}
	}
}
#endif

float avg(uint32_t *data, uint32_t len, uint32_t newValue) {
 8000270:	b480      	push	{r7}
 8000272:	b089      	sub	sp, #36	; 0x24
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
	float    avg = 0;
 800027c:	f04f 0300 	mov.w	r3, #0
 8000280:	61bb      	str	r3, [r7, #24]
	float    sum = 0;
 8000282:	f04f 0300 	mov.w	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	61fb      	str	r3, [r7, #28]

	// Shift all values
	sum = sum - (float)data[0];
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	ee07 3a90 	vmov	s15, r3
 8000294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000298:	ed97 7a05 	vldr	s14, [r7, #20]
 800029c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80002a0:	edc7 7a05 	vstr	s15, [r7, #20]
	for (i = 1; i < len; i++) {
 80002a4:	2301      	movs	r3, #1
 80002a6:	61fb      	str	r3, [r7, #28]
 80002a8:	e00f      	b.n	80002ca <avg+0x5a>
		data[i - 1] = data[i];
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	68fa      	ldr	r2, [r7, #12]
 80002b0:	441a      	add	r2, r3
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80002b8:	3b01      	subs	r3, #1
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	68f9      	ldr	r1, [r7, #12]
 80002be:	440b      	add	r3, r1
 80002c0:	6812      	ldr	r2, [r2, #0]
 80002c2:	601a      	str	r2, [r3, #0]
	for (i = 1; i < len; i++) {
 80002c4:	69fb      	ldr	r3, [r7, #28]
 80002c6:	3301      	adds	r3, #1
 80002c8:	61fb      	str	r3, [r7, #28]
 80002ca:	69fa      	ldr	r2, [r7, #28]
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d3eb      	bcc.n	80002aa <avg+0x3a>
	}
	data[i - 1] = newValue;
 80002d2:	69fb      	ldr	r3, [r7, #28]
 80002d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80002d8:	3b01      	subs	r3, #1
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	68fa      	ldr	r2, [r7, #12]
 80002de:	4413      	add	r3, r2
 80002e0:	687a      	ldr	r2, [r7, #4]
 80002e2:	601a      	str	r2, [r3, #0]
	sum = sum + (float)newValue;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	ee07 3a90 	vmov	s15, r3
 80002ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80002f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002f6:	edc7 7a05 	vstr	s15, [r7, #20]
	avg = sum / len;
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	ee07 3a90 	vmov	s15, r3
 8000300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000304:	edd7 6a05 	vldr	s13, [r7, #20]
 8000308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800030c:	edc7 7a06 	vstr	s15, [r7, #24]

	return avg;
 8000310:	69bb      	ldr	r3, [r7, #24]
 8000312:	ee07 3a90 	vmov	s15, r3
}
 8000316:	eeb0 0a67 	vmov.f32	s0, s15
 800031a:	3724      	adds	r7, #36	; 0x24
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr

08000324 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  {                // if the interrupt source is channel1
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	7f1b      	ldrb	r3, [r3, #28]
 8000330:	2b01      	cmp	r3, #1
 8000332:	d160      	bne.n	80003f6 <HAL_TIM_IC_CaptureCallback+0xd2>
		if (isFirstCaptured == 0) {                                  // if the first value is not captured
 8000334:	4b32      	ldr	r3, [pc, #200]	; (8000400 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d10a      	bne.n	8000352 <HAL_TIM_IC_CaptureCallback+0x2e>
			icVal1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800033c:	2100      	movs	r1, #0
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f005 f8ca 	bl	80054d8 <HAL_TIM_ReadCapturedValue>
 8000344:	4603      	mov	r3, r0
 8000346:	4a2f      	ldr	r2, [pc, #188]	; (8000404 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000348:	6013      	str	r3, [r2, #0]
			isFirstCaptured = 1;                                     // set the first captured as true
 800034a:	4b2d      	ldr	r3, [pc, #180]	; (8000400 <HAL_TIM_IC_CaptureCallback+0xdc>)
 800034c:	2201      	movs	r2, #1
 800034e:	601a      	str	r2, [r3, #0]
			// ------------------------------------------------------------------

			isFirstCaptured = 0; // set it back to false
		}
	}
}
 8000350:	e051      	b.n	80003f6 <HAL_TIM_IC_CaptureCallback+0xd2>
			icVal2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8000352:	2100      	movs	r1, #0
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	f005 f8bf 	bl	80054d8 <HAL_TIM_ReadCapturedValue>
 800035a:	4603      	mov	r3, r0
 800035c:	4a2a      	ldr	r2, [pc, #168]	; (8000408 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800035e:	6013      	str	r3, [r2, #0]
			if (icVal2 > icVal1) {
 8000360:	4b29      	ldr	r3, [pc, #164]	; (8000408 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	4b27      	ldr	r3, [pc, #156]	; (8000404 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	429a      	cmp	r2, r3
 800036a:	d907      	bls.n	800037c <HAL_TIM_IC_CaptureCallback+0x58>
				difference = icVal2 - icVal1;
 800036c:	4b26      	ldr	r3, [pc, #152]	; (8000408 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	4b24      	ldr	r3, [pc, #144]	; (8000404 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	1ad3      	subs	r3, r2, r3
 8000376:	4a25      	ldr	r2, [pc, #148]	; (800040c <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000378:	6013      	str	r3, [r2, #0]
 800037a:	e00d      	b.n	8000398 <HAL_TIM_IC_CaptureCallback+0x74>
			} else if (icVal1 > icVal2) {
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	4b21      	ldr	r3, [pc, #132]	; (8000408 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	429a      	cmp	r2, r3
 8000386:	d907      	bls.n	8000398 <HAL_TIM_IC_CaptureCallback+0x74>
				difference = (0xffffffff - icVal1) + icVal2;
 8000388:	4b1f      	ldr	r3, [pc, #124]	; (8000408 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	4b1d      	ldr	r3, [pc, #116]	; (8000404 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	1ad3      	subs	r3, r2, r3
 8000392:	3b01      	subs	r3, #1
 8000394:	4a1d      	ldr	r2, [pc, #116]	; (800040c <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000396:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK / (PRESCALAR);
 8000398:	4b1d      	ldr	r3, [pc, #116]	; (8000410 <HAL_TIM_IC_CaptureCallback+0xec>)
 800039a:	60fb      	str	r3, [r7, #12]
			float mFactor  = 1000000 / refClock;
 800039c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8000414 <HAL_TIM_IC_CaptureCallback+0xf0>
 80003a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80003a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80003a8:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth  = difference * mFactor;
 80003ac:	4b17      	ldr	r3, [pc, #92]	; (800040c <HAL_TIM_IC_CaptureCallback+0xe8>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	ee07 3a90 	vmov	s15, r3
 80003b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80003b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80003bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80003c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003c4:	ee17 2a90 	vmov	r2, s15
 80003c8:	4b13      	ldr	r3, [pc, #76]	; (8000418 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80003ca:	601a      	str	r2, [r3, #0]
			if (usWidth < htim->Init.Period) {                        // Check to make sure we are not getting overflow
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	68da      	ldr	r2, [r3, #12]
 80003d0:	4b11      	ldr	r3, [pc, #68]	; (8000418 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d90b      	bls.n	80003f0 <HAL_TIM_IC_CaptureCallback+0xcc>
				avgWidth = avg(data, AVG_DATA_LEN, usWidth);
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	461a      	mov	r2, r3
 80003de:	210a      	movs	r1, #10
 80003e0:	480e      	ldr	r0, [pc, #56]	; (800041c <HAL_TIM_IC_CaptureCallback+0xf8>)
 80003e2:	f7ff ff45 	bl	8000270 <avg>
 80003e6:	eef0 7a40 	vmov.f32	s15, s0
 80003ea:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80003ec:	edc3 7a00 	vstr	s15, [r3]
			isFirstCaptured = 0; // set it back to false
 80003f0:	4b03      	ldr	r3, [pc, #12]	; (8000400 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
}
 80003f6:	bf00      	nop
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000198 	.word	0x20000198
 8000404:	2000018c 	.word	0x2000018c
 8000408:	20000190 	.word	0x20000190
 800040c:	20000194 	.word	0x20000194
 8000410:	49742400 	.word	0x49742400
 8000414:	49742400 	.word	0x49742400
 8000418:	2000019c 	.word	0x2000019c
 800041c:	200001a0 	.word	0x200001a0
 8000420:	200001c8 	.word	0x200001c8

08000424 <delay>:

void delay(uint32_t maxDelayAmount) {
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	volatile uint32_t amount = maxDelayAmount;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	60fb      	str	r3, [r7, #12]
	while (amount > 0) {
 8000430:	e002      	b.n	8000438 <delay+0x14>
		amount--;
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	3b01      	subs	r3, #1
 8000436:	60fb      	str	r3, [r7, #12]
	while (amount > 0) {
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d1f9      	bne.n	8000432 <delay+0xe>
	}
}
 800043e:	bf00      	nop
 8000440:	bf00      	nop
 8000442:	3714      	adds	r7, #20
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <channelSelect>:

void channelSelect(int channel) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000454:	f107 0308 	add.w	r3, r7, #8
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	611a      	str	r2, [r3, #16]
 8000464:	615a      	str	r2, [r3, #20]
	if (channel == 1) {
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d102      	bne.n	8000472 <channelSelect+0x26>
		sConfig.Channel = ADC_CHANNEL_4;
 800046c:	4b13      	ldr	r3, [pc, #76]	; (80004bc <channelSelect+0x70>)
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	e00a      	b.n	8000488 <channelSelect+0x3c>
	} else if (channel == 2) {
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2b02      	cmp	r3, #2
 8000476:	d102      	bne.n	800047e <channelSelect+0x32>
		sConfig.Channel = ADC_CHANNEL_13;
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <channelSelect+0x74>)
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	e004      	b.n	8000488 <channelSelect+0x3c>
	} else if (channel == 3) {
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2b03      	cmp	r3, #3
 8000482:	d101      	bne.n	8000488 <channelSelect+0x3c>
		sConfig.Channel = ADC_CHANNEL_14;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <channelSelect+0x78>)
 8000486:	60bb      	str	r3, [r7, #8]
	}
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000488:	2306      	movs	r3, #6
 800048a:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800048c:	2307      	movs	r3, #7
 800048e:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000490:	237f      	movs	r3, #127	; 0x7f
 8000492:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000494:	2304      	movs	r3, #4
 8000496:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	61fb      	str	r3, [r7, #28]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800049c:	f107 0308 	add.w	r3, r7, #8
 80004a0:	4619      	mov	r1, r3
 80004a2:	4809      	ldr	r0, [pc, #36]	; (80004c8 <channelSelect+0x7c>)
 80004a4:	f001 fcae 	bl	8001e04 <HAL_ADC_ConfigChannel>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <channelSelect+0x66>
		Error_Handler();
 80004ae:	f000 fc6f 	bl	8000d90 <Error_Handler>
	}
}
 80004b2:	bf00      	nop
 80004b4:	3720      	adds	r7, #32
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	10c00010 	.word	0x10c00010
 80004c0:	36902000 	.word	0x36902000
 80004c4:	3ac04000 	.word	0x3ac04000
 80004c8:	200000a8 	.word	0x200000a8

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fec6 	bl	8001262 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 faa9 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 fc0d 	bl	8000cf8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004de:	f000 fb8d 	bl	8000bfc <MX_TIM2_Init>
  MX_CAN1_Init();
 80004e2:	f000 fb53 	bl	8000b8c <MX_CAN1_Init>
  MX_ADC1_Init();
 80004e6:	f000 faf3 	bl	8000ad0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80004ea:	2108      	movs	r1, #8
 80004ec:	48b2      	ldr	r0, [pc, #712]	; (80007b8 <main+0x2ec>)
 80004ee:	f004 fa7b 	bl	80049e8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80004f2:	48b1      	ldr	r0, [pc, #708]	; (80007b8 <main+0x2ec>)
 80004f4:	f004 f9a6 	bl	8004844 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80004f8:	2100      	movs	r1, #0
 80004fa:	48af      	ldr	r0, [pc, #700]	; (80007b8 <main+0x2ec>)
 80004fc:	f004 fbd2 	bl	8004ca4 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  pwmOnTime = 2000;
 8000500:	4bae      	ldr	r3, [pc, #696]	; (80007bc <main+0x2f0>)
 8000502:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000506:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Decrement toggle counter.
	  counter--;
 8000508:	4bad      	ldr	r3, [pc, #692]	; (80007c0 <main+0x2f4>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	3b01      	subs	r3, #1
 800050e:	4aac      	ldr	r2, [pc, #688]	; (80007c0 <main+0x2f4>)
 8000510:	6013      	str	r3, [r2, #0]
	  if (counter == 0) {
 8000512:	4bab      	ldr	r3, [pc, #684]	; (80007c0 <main+0x2f4>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d109      	bne.n	800052e <main+0x62>
		  counter = MAX_COUNT;
 800051a:	4ba9      	ldr	r3, [pc, #676]	; (80007c0 <main+0x2f4>)
 800051c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000520:	601a      	str	r2, [r3, #0]
		  toggle = 1 - toggle;
 8000522:	4ba8      	ldr	r3, [pc, #672]	; (80007c4 <main+0x2f8>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f1c3 0301 	rsb	r3, r3, #1
 800052a:	4aa6      	ldr	r2, [pc, #664]	; (80007c4 <main+0x2f8>)
 800052c:	6013      	str	r3, [r2, #0]
	  } else {
		  pwmOnTime--;
	  }
#endif

	  printf("usWidth = %d", (int)usWidth);
 800052e:	4ba6      	ldr	r3, [pc, #664]	; (80007c8 <main+0x2fc>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4619      	mov	r1, r3
 8000534:	48a5      	ldr	r0, [pc, #660]	; (80007cc <main+0x300>)
 8000536:	f006 f8bb 	bl	80066b0 <iprintf>

	  // Toggle PB8 - CN1 pin 10.
	  if (toggle) {
 800053a:	4ba2      	ldr	r3, [pc, #648]	; (80007c4 <main+0x2f8>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d006      	beq.n	8000550 <main+0x84>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000548:	48a1      	ldr	r0, [pc, #644]	; (80007d0 <main+0x304>)
 800054a:	f002 fe7b 	bl	8003244 <HAL_GPIO_WritePin>
 800054e:	e005      	b.n	800055c <main+0x90>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000556:	489e      	ldr	r0, [pc, #632]	; (80007d0 <main+0x304>)
 8000558:	f002 fe74 	bl	8003244 <HAL_GPIO_WritePin>
	  }
	  delay(1000);
 800055c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000560:	f7ff ff60 	bl	8000424 <delay>

	  switch (cmFsm) {
 8000564:	4b9b      	ldr	r3, [pc, #620]	; (80007d4 <main+0x308>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b07      	cmp	r3, #7
 800056a:	f200 8244 	bhi.w	80009f6 <main+0x52a>
 800056e:	a201      	add	r2, pc, #4	; (adr r2, 8000574 <main+0xa8>)
 8000570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000574:	08000595 	.word	0x08000595
 8000578:	080005a3 	.word	0x080005a3
 800057c:	080008e9 	.word	0x080008e9
 8000580:	080008f1 	.word	0x080008f1
 8000584:	080008f9 	.word	0x080008f9
 8000588:	08000901 	.word	0x08000901
 800058c:	08000909 	.word	0x08000909
 8000590:	08000911 	.word	0x08000911
	  case INIT:			// Initialize
          canIdCounter = 0;
 8000594:	4b90      	ldr	r3, [pc, #576]	; (80007d8 <main+0x30c>)
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
          cmFsm = CANID;
 800059a:	4b8e      	ldr	r3, [pc, #568]	; (80007d4 <main+0x308>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
		  break;
 80005a0:	e22a      	b.n	80009f8 <main+0x52c>
	  case CANID:           // Read PWM and identify myself.
		  canIdCounter++;
 80005a2:	4b8d      	ldr	r3, [pc, #564]	; (80007d8 <main+0x30c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	3301      	adds	r3, #1
 80005a8:	4a8b      	ldr	r2, [pc, #556]	; (80007d8 <main+0x30c>)
 80005aa:	6013      	str	r3, [r2, #0]
		  if (canIdCounter > SECS(4)) {
 80005ac:	4b8a      	ldr	r3, [pc, #552]	; (80007d8 <main+0x30c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80005b4:	f240 8194 	bls.w	80008e0 <main+0x414>
			  cmFsm = CANVALVECMD;
 80005b8:	4b86      	ldr	r3, [pc, #536]	; (80007d4 <main+0x308>)
 80005ba:	2202      	movs	r2, #2
 80005bc:	701a      	strb	r2, [r3, #0]

			  float duty = avgWidth / htim2.Init.Period;
 80005be:	4b87      	ldr	r3, [pc, #540]	; (80007dc <main+0x310>)
 80005c0:	edd3 6a00 	vldr	s13, [r3]
 80005c4:	4b7c      	ldr	r3, [pc, #496]	; (80007b8 <main+0x2ec>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	ee07 3a90 	vmov	s15, r3
 80005cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005d4:	edc7 7a01 	vstr	s15, [r7, #4]

			  if (duty >= 89.0f && duty < 100.0f) {
 80005d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80005dc:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80007e0 <main+0x314>
 80005e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005e8:	db1e      	blt.n	8000628 <main+0x15c>
 80005ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80005ee:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80007e4 <main+0x318>
 80005f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005fa:	d515      	bpl.n	8000628 <main+0x15c>
				  myCANAddress = canAddresses[0];
 80005fc:	4b7a      	ldr	r3, [pc, #488]	; (80007e8 <main+0x31c>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	4b7a      	ldr	r3, [pc, #488]	; (80007ec <main+0x320>)
 8000602:	801a      	strh	r2, [r3, #0]
				  TIM2->CCR3 = (uint32_t)(0.8f * (float)htim2.Init.Period);
 8000604:	4b6c      	ldr	r3, [pc, #432]	; (80007b8 <main+0x2ec>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	ee07 3a90 	vmov	s15, r3
 800060c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000610:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80007f0 <main+0x324>
 8000614:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800061c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000620:	ee17 2a90 	vmov	r2, s15
 8000624:	63da      	str	r2, [r3, #60]	; 0x3c
 8000626:	e15b      	b.n	80008e0 <main+0x414>
			  } else if (duty > 79.0f && duty < 89.0f) {
 8000628:	edd7 7a01 	vldr	s15, [r7, #4]
 800062c:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80007f4 <main+0x328>
 8000630:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000638:	dd1e      	ble.n	8000678 <main+0x1ac>
 800063a:	edd7 7a01 	vldr	s15, [r7, #4]
 800063e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80007e0 <main+0x314>
 8000642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800064a:	d515      	bpl.n	8000678 <main+0x1ac>
				  myCANAddress = canAddresses[1];
 800064c:	4b66      	ldr	r3, [pc, #408]	; (80007e8 <main+0x31c>)
 800064e:	885a      	ldrh	r2, [r3, #2]
 8000650:	4b66      	ldr	r3, [pc, #408]	; (80007ec <main+0x320>)
 8000652:	801a      	strh	r2, [r3, #0]
				  TIM2->CCR3 = (uint32_t)(0.7f * (float)htim2.Init.Period);
 8000654:	4b58      	ldr	r3, [pc, #352]	; (80007b8 <main+0x2ec>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	ee07 3a90 	vmov	s15, r3
 800065c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000660:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80007f8 <main+0x32c>
 8000664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000668:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800066c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000670:	ee17 2a90 	vmov	r2, s15
 8000674:	63da      	str	r2, [r3, #60]	; 0x3c
 8000676:	e133      	b.n	80008e0 <main+0x414>
			  } else if (duty > 69.0f && duty < 79.0f) {
 8000678:	edd7 7a01 	vldr	s15, [r7, #4]
 800067c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80007fc <main+0x330>
 8000680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000688:	dd1e      	ble.n	80006c8 <main+0x1fc>
 800068a:	edd7 7a01 	vldr	s15, [r7, #4]
 800068e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80007f4 <main+0x328>
 8000692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800069a:	d515      	bpl.n	80006c8 <main+0x1fc>
				  myCANAddress = canAddresses[2];
 800069c:	4b52      	ldr	r3, [pc, #328]	; (80007e8 <main+0x31c>)
 800069e:	889a      	ldrh	r2, [r3, #4]
 80006a0:	4b52      	ldr	r3, [pc, #328]	; (80007ec <main+0x320>)
 80006a2:	801a      	strh	r2, [r3, #0]
				  TIM2->CCR3 = (uint32_t)(0.6f * (float)htim2.Init.Period);
 80006a4:	4b44      	ldr	r3, [pc, #272]	; (80007b8 <main+0x2ec>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	ee07 3a90 	vmov	s15, r3
 80006ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006b0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000800 <main+0x334>
 80006b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006c0:	ee17 2a90 	vmov	r2, s15
 80006c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80006c6:	e10b      	b.n	80008e0 <main+0x414>
			  } else if (duty > 59.0f && duty < 69.0f) {
 80006c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80006cc:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8000804 <main+0x338>
 80006d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d8:	dd1e      	ble.n	8000718 <main+0x24c>
 80006da:	edd7 7a01 	vldr	s15, [r7, #4]
 80006de:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80007fc <main+0x330>
 80006e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ea:	d515      	bpl.n	8000718 <main+0x24c>
				  myCANAddress = canAddresses[3];
 80006ec:	4b3e      	ldr	r3, [pc, #248]	; (80007e8 <main+0x31c>)
 80006ee:	88da      	ldrh	r2, [r3, #6]
 80006f0:	4b3e      	ldr	r3, [pc, #248]	; (80007ec <main+0x320>)
 80006f2:	801a      	strh	r2, [r3, #0]
				  TIM2->CCR3 = (uint32_t)(0.5f * (float)htim2.Init.Period);
 80006f4:	4b30      	ldr	r3, [pc, #192]	; (80007b8 <main+0x2ec>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	ee07 3a90 	vmov	s15, r3
 80006fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000700:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000708:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800070c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000710:	ee17 2a90 	vmov	r2, s15
 8000714:	63da      	str	r2, [r3, #60]	; 0x3c
 8000716:	e0e3      	b.n	80008e0 <main+0x414>
			  } else if (duty > 49.0f && duty < 59.0f) {
 8000718:	edd7 7a01 	vldr	s15, [r7, #4]
 800071c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8000808 <main+0x33c>
 8000720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000728:	dd1e      	ble.n	8000768 <main+0x29c>
 800072a:	edd7 7a01 	vldr	s15, [r7, #4]
 800072e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000804 <main+0x338>
 8000732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073a:	d515      	bpl.n	8000768 <main+0x29c>
				  myCANAddress = canAddresses[4];
 800073c:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <main+0x31c>)
 800073e:	891a      	ldrh	r2, [r3, #8]
 8000740:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <main+0x320>)
 8000742:	801a      	strh	r2, [r3, #0]
				  TIM2->CCR3 = (uint32_t)(0.4f * (float)htim2.Init.Period);
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <main+0x2ec>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	ee07 3a90 	vmov	s15, r3
 800074c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000750:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800080c <main+0x340>
 8000754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800075c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000760:	ee17 2a90 	vmov	r2, s15
 8000764:	63da      	str	r2, [r3, #60]	; 0x3c
 8000766:	e0bb      	b.n	80008e0 <main+0x414>
			  } else if (duty > 39.0f && duty < 49.0f) {
 8000768:	edd7 7a01 	vldr	s15, [r7, #4]
 800076c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000814 <main+0x348>
 8000770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000778:	dd4e      	ble.n	8000818 <main+0x34c>
 800077a:	edd7 7a01 	vldr	s15, [r7, #4]
 800077e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000808 <main+0x33c>
 8000782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078a:	d545      	bpl.n	8000818 <main+0x34c>
				  myCANAddress = canAddresses[5];
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <main+0x31c>)
 800078e:	895a      	ldrh	r2, [r3, #10]
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <main+0x320>)
 8000792:	801a      	strh	r2, [r3, #0]
				  TIM2->CCR3 = (uint32_t)(0.3f * (float)htim2.Init.Period);
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <main+0x2ec>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	ee07 3a90 	vmov	s15, r3
 800079c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007a0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000810 <main+0x344>
 80007a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007b0:	ee17 2a90 	vmov	r2, s15
 80007b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80007b6:	e093      	b.n	80008e0 <main+0x414>
 80007b8:	20000134 	.word	0x20000134
 80007bc:	20000184 	.word	0x20000184
 80007c0:	20000014 	.word	0x20000014
 80007c4:	20000018 	.word	0x20000018
 80007c8:	2000019c 	.word	0x2000019c
 80007cc:	08007008 	.word	0x08007008
 80007d0:	48000400 	.word	0x48000400
 80007d4:	20000180 	.word	0x20000180
 80007d8:	20000188 	.word	0x20000188
 80007dc:	200001c8 	.word	0x200001c8
 80007e0:	42b20000 	.word	0x42b20000
 80007e4:	42c80000 	.word	0x42c80000
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000010 	.word	0x20000010
 80007f0:	3f4ccccd 	.word	0x3f4ccccd
 80007f4:	429e0000 	.word	0x429e0000
 80007f8:	3f333333 	.word	0x3f333333
 80007fc:	428a0000 	.word	0x428a0000
 8000800:	3f19999a 	.word	0x3f19999a
 8000804:	426c0000 	.word	0x426c0000
 8000808:	42440000 	.word	0x42440000
 800080c:	3ecccccd 	.word	0x3ecccccd
 8000810:	3e99999a 	.word	0x3e99999a
 8000814:	421c0000 	.word	0x421c0000
			  } else if (duty > 29.0f && duty < 39.0f) {
 8000818:	edd7 7a01 	vldr	s15, [r7, #4]
 800081c:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000828:	dd1e      	ble.n	8000868 <main+0x39c>
 800082a:	edd7 7a01 	vldr	s15, [r7, #4]
 800082e:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8000814 <main+0x348>
 8000832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083a:	d515      	bpl.n	8000868 <main+0x39c>
				  myCANAddress = canAddresses[6];
 800083c:	4b6f      	ldr	r3, [pc, #444]	; (80009fc <main+0x530>)
 800083e:	899a      	ldrh	r2, [r3, #12]
 8000840:	4b6f      	ldr	r3, [pc, #444]	; (8000a00 <main+0x534>)
 8000842:	801a      	strh	r2, [r3, #0]
				  TIM2->CCR3 = (uint32_t)(0.2f * (float)htim2.Init.Period);
 8000844:	4b6f      	ldr	r3, [pc, #444]	; (8000a04 <main+0x538>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	ee07 3a90 	vmov	s15, r3
 800084c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000850:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8000a08 <main+0x53c>
 8000854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800085c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000860:	ee17 2a90 	vmov	r2, s15
 8000864:	63da      	str	r2, [r3, #60]	; 0x3c
 8000866:	e03b      	b.n	80008e0 <main+0x414>
			  } else if (duty > 19.0f && duty < 29.0f) {
 8000868:	edd7 7a01 	vldr	s15, [r7, #4]
 800086c:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8000870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000878:	dd1e      	ble.n	80008b8 <main+0x3ec>
 800087a:	edd7 7a01 	vldr	s15, [r7, #4]
 800087e:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8000882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800088a:	d515      	bpl.n	80008b8 <main+0x3ec>
				  myCANAddress = canAddresses[7];
 800088c:	4b5b      	ldr	r3, [pc, #364]	; (80009fc <main+0x530>)
 800088e:	89da      	ldrh	r2, [r3, #14]
 8000890:	4b5b      	ldr	r3, [pc, #364]	; (8000a00 <main+0x534>)
 8000892:	801a      	strh	r2, [r3, #0]
				  TIM2->CCR3 = (uint32_t)(0.1f * (float)htim2.Init.Period);
 8000894:	4b5b      	ldr	r3, [pc, #364]	; (8000a04 <main+0x538>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	ee07 3a90 	vmov	s15, r3
 800089c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008a0:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8000a0c <main+0x540>
 80008a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008b0:	ee17 2a90 	vmov	r2, s15
 80008b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80008b6:	e013      	b.n	80008e0 <main+0x414>
			  } else {
				  cmFsm = INIT;
 80008b8:	4b55      	ldr	r3, [pc, #340]	; (8000a10 <main+0x544>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
				  TIM2->CCR3 = (uint32_t)(0.95f * (float)htim2.Init.Period);
 80008be:	4b51      	ldr	r3, [pc, #324]	; (8000a04 <main+0x538>)
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	ee07 3a90 	vmov	s15, r3
 80008c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ca:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8000a14 <main+0x548>
 80008ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008da:	ee17 2a90 	vmov	r2, s15
 80008de:	63da      	str	r2, [r3, #60]	; 0x3c
			  }
		  }

		  // IMPORTANT : Jump state for testing only
		  cmFsm = CANVALVECMD;
 80008e0:	4b4b      	ldr	r3, [pc, #300]	; (8000a10 <main+0x544>)
 80008e2:	2202      	movs	r2, #2
 80008e4:	701a      	strb	r2, [r3, #0]
		  break;
 80008e6:	e087      	b.n	80009f8 <main+0x52c>
	  case CANVALVECMD:     // Read CAN bus valve commands and act upon then.
          cmFsm = CANPRESSUREREAD;
 80008e8:	4b49      	ldr	r3, [pc, #292]	; (8000a10 <main+0x544>)
 80008ea:	2203      	movs	r2, #3
 80008ec:	701a      	strb	r2, [r3, #0]
		  break;
 80008ee:	e083      	b.n	80009f8 <main+0x52c>
	  case CANPRESSUREREAD: // Read pressure.
          cmFsm = CANHEIGHTREAD;
 80008f0:	4b47      	ldr	r3, [pc, #284]	; (8000a10 <main+0x544>)
 80008f2:	2204      	movs	r2, #4
 80008f4:	701a      	strb	r2, [r3, #0]
		  break;
 80008f6:	e07f      	b.n	80009f8 <main+0x52c>
	  case CANHEIGHTREAD:   // Read height.
          cmFsm = TEMPREAD;
 80008f8:	4b45      	ldr	r3, [pc, #276]	; (8000a10 <main+0x544>)
 80008fa:	2205      	movs	r2, #5
 80008fc:	701a      	strb	r2, [r3, #0]
		  break;
 80008fe:	e07b      	b.n	80009f8 <main+0x52c>
	  case TEMPREAD:        // Read temperature.
          cmFsm = READADC;
 8000900:	4b43      	ldr	r3, [pc, #268]	; (8000a10 <main+0x544>)
 8000902:	2206      	movs	r2, #6
 8000904:	701a      	strb	r2, [r3, #0]
		  break;
 8000906:	e077      	b.n	80009f8 <main+0x52c>
	  case READADC:         // Read ADC.
          cmFsm = CANSTATUSREPORT;
 8000908:	4b41      	ldr	r3, [pc, #260]	; (8000a10 <main+0x544>)
 800090a:	2207      	movs	r2, #7
 800090c:	701a      	strb	r2, [r3, #0]
		  break;
 800090e:	e073      	b.n	80009f8 <main+0x52c>
	  case CANSTATUSREPORT:  // Report status.
		  channelSelect(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff fd9b 	bl	800044c <channelSelect>
		  HAL_ADC_Start(&hadc1);
 8000916:	4840      	ldr	r0, [pc, #256]	; (8000a18 <main+0x54c>)
 8000918:	f001 f8a0 	bl	8001a5c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 800091c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000920:	483d      	ldr	r0, [pc, #244]	; (8000a18 <main+0x54c>)
 8000922:	f001 f989 	bl	8001c38 <HAL_ADC_PollForConversion>
		  adcVal[0] = HAL_ADC_GetValue(&hadc1);
 8000926:	483c      	ldr	r0, [pc, #240]	; (8000a18 <main+0x54c>)
 8000928:	f001 fa5e 	bl	8001de8 <HAL_ADC_GetValue>
 800092c:	4603      	mov	r3, r0
 800092e:	4a3b      	ldr	r2, [pc, #236]	; (8000a1c <main+0x550>)
 8000930:	6013      	str	r3, [r2, #0]
		  HAL_ADC_Stop(&hadc1);
 8000932:	4839      	ldr	r0, [pc, #228]	; (8000a18 <main+0x54c>)
 8000934:	f001 f94c 	bl	8001bd0 <HAL_ADC_Stop>

		  channelSelect(2);
 8000938:	2002      	movs	r0, #2
 800093a:	f7ff fd87 	bl	800044c <channelSelect>
		  HAL_ADC_Start(&hadc1);
 800093e:	4836      	ldr	r0, [pc, #216]	; (8000a18 <main+0x54c>)
 8000940:	f001 f88c 	bl	8001a5c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000944:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000948:	4833      	ldr	r0, [pc, #204]	; (8000a18 <main+0x54c>)
 800094a:	f001 f975 	bl	8001c38 <HAL_ADC_PollForConversion>
		  adcVal[1] = HAL_ADC_GetValue(&hadc1);
 800094e:	4832      	ldr	r0, [pc, #200]	; (8000a18 <main+0x54c>)
 8000950:	f001 fa4a 	bl	8001de8 <HAL_ADC_GetValue>
 8000954:	4603      	mov	r3, r0
 8000956:	4a31      	ldr	r2, [pc, #196]	; (8000a1c <main+0x550>)
 8000958:	6053      	str	r3, [r2, #4]
		  HAL_ADC_Stop(&hadc1);
 800095a:	482f      	ldr	r0, [pc, #188]	; (8000a18 <main+0x54c>)
 800095c:	f001 f938 	bl	8001bd0 <HAL_ADC_Stop>

		  channelSelect(3);
 8000960:	2003      	movs	r0, #3
 8000962:	f7ff fd73 	bl	800044c <channelSelect>
		  HAL_ADC_Start(&hadc1);
 8000966:	482c      	ldr	r0, [pc, #176]	; (8000a18 <main+0x54c>)
 8000968:	f001 f878 	bl	8001a5c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 800096c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000970:	4829      	ldr	r0, [pc, #164]	; (8000a18 <main+0x54c>)
 8000972:	f001 f961 	bl	8001c38 <HAL_ADC_PollForConversion>
		  adcVal[2] = HAL_ADC_GetValue(&hadc1);
 8000976:	4828      	ldr	r0, [pc, #160]	; (8000a18 <main+0x54c>)
 8000978:	f001 fa36 	bl	8001de8 <HAL_ADC_GetValue>
 800097c:	4603      	mov	r3, r0
 800097e:	4a27      	ldr	r2, [pc, #156]	; (8000a1c <main+0x550>)
 8000980:	6093      	str	r3, [r2, #8]
		  HAL_ADC_Stop(&hadc1);
 8000982:	4825      	ldr	r0, [pc, #148]	; (8000a18 <main+0x54c>)
 8000984:	f001 f924 	bl	8001bd0 <HAL_ADC_Stop>

		  adcVoltage[0] = 3.3f * ((float)adcVal[0] / 4095.0f);
 8000988:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <main+0x550>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	ee07 3a90 	vmov	s15, r3
 8000990:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000994:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000a20 <main+0x554>
 8000998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800099c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000a24 <main+0x558>
 80009a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <main+0x55c>)
 80009a6:	edc3 7a00 	vstr	s15, [r3]
		  adcVoltage[1] = 3.3f * ((float)adcVal[1] / 4095.0f);
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <main+0x550>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	ee07 3a90 	vmov	s15, r3
 80009b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009b6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000a20 <main+0x554>
 80009ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009be:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000a24 <main+0x558>
 80009c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <main+0x55c>)
 80009c8:	edc3 7a01 	vstr	s15, [r3, #4]
		  adcVoltage[2] = 3.3f * ((float)adcVal[2] / 4095.0f);
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <main+0x550>)
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	ee07 3a90 	vmov	s15, r3
 80009d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009d8:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000a20 <main+0x554>
 80009dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009e0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000a24 <main+0x558>
 80009e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <main+0x55c>)
 80009ea:	edc3 7a02 	vstr	s15, [r3, #8]

		  cmFsm = CANVALVECMD;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <main+0x544>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	701a      	strb	r2, [r3, #0]
		  break;
 80009f4:	e000      	b.n	80009f8 <main+0x52c>
	  default:
		  break;
 80009f6:	bf00      	nop
	  counter--;
 80009f8:	e586      	b.n	8000508 <main+0x3c>
 80009fa:	bf00      	nop
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000010 	.word	0x20000010
 8000a04:	20000134 	.word	0x20000134
 8000a08:	3e4ccccd 	.word	0x3e4ccccd
 8000a0c:	3dcccccd 	.word	0x3dcccccd
 8000a10:	20000180 	.word	0x20000180
 8000a14:	3f733333 	.word	0x3f733333
 8000a18:	200000a8 	.word	0x200000a8
 8000a1c:	200001cc 	.word	0x200001cc
 8000a20:	457ff000 	.word	0x457ff000
 8000a24:	40533333 	.word	0x40533333
 8000a28:	200001d8 	.word	0x200001d8

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b096      	sub	sp, #88	; 0x58
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	2244      	movs	r2, #68	; 0x44
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f005 fb42 	bl	80060c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	463b      	mov	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a52:	f002 fc1d 	bl	8003290 <HAL_PWREx_ControlVoltageScaling>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a5c:	f000 f998 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a60:	2302      	movs	r3, #2
 8000a62:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6a:	2310      	movs	r3, #16
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a72:	2302      	movs	r3, #2
 8000a74:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a7a:	230a      	movs	r3, #10
 8000a7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 fc54 	bl	800333c <HAL_RCC_OscConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a9a:	f000 f979 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f003 f81c 	bl	8003af4 <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ac2:	f000 f965 	bl	8000d90 <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3758      	adds	r7, #88	; 0x58
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  // Manually copy this from the IOC generated code!!

  // Common config
  hadc1.Instance = ADC1;
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000af4:	4a24      	ldr	r2, [pc, #144]	; (8000b88 <MX_ADC1_Init+0xb8>)
 8000af6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b12:	2204      	movs	r2, #4
 8000b14:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b52:	480c      	ldr	r0, [pc, #48]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b54:	f000 fe2c 	bl	80017b0 <HAL_ADC_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b5e:	f000 f917 	bl	8000d90 <Error_Handler>
  }
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_ADC1_Init+0xb4>)
 8000b6e:	f001 ff01 	bl	8002974 <HAL_ADCEx_MultiModeConfigChannel>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b78:	f000 f90a 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
#endif
  /* USER CODE END ADC1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000a8 	.word	0x200000a8
 8000b88:	50040000 	.word	0x50040000

08000b8c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_CAN1_Init+0x68>)
 8000b92:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <MX_CAN1_Init+0x6c>)
 8000b94:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_CAN1_Init+0x68>)
 8000b98:	2228      	movs	r2, #40	; 0x28
 8000b9a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_CAN1_Init+0x68>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_3TQ;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_CAN1_Init+0x68>)
 8000ba4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ba8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_CAN1_Init+0x68>)
 8000bac:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bb0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <MX_CAN1_Init+0x68>)
 8000bb4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000bb8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_CAN1_Init+0x68>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_CAN1_Init+0x68>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_CAN1_Init+0x68>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_CAN1_Init+0x68>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_CAN1_Init+0x68>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_CAN1_Init+0x68>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_CAN1_Init+0x68>)
 8000be0:	f001 ff78 	bl	8002ad4 <HAL_CAN_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000bea:	f000 f8d1 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000010c 	.word	0x2000010c
 8000bf8:	40006400 	.word	0x40006400

08000bfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08e      	sub	sp, #56	; 0x38
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]
 8000c2a:	615a      	str	r2, [r3, #20]
 8000c2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c2e:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <MX_TIM2_Init+0xf8>)
 8000c30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000c36:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <MX_TIM2_Init+0xf8>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <MX_TIM2_Init+0xf8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000c42:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <MX_TIM2_Init+0xf8>)
 8000c44:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <MX_TIM2_Init+0xf8>)
 8000c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c52:	4b28      	ldr	r3, [pc, #160]	; (8000cf4 <MX_TIM2_Init+0xf8>)
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c58:	4826      	ldr	r0, [pc, #152]	; (8000cf4 <MX_TIM2_Init+0xf8>)
 8000c5a:	f003 ffcb 	bl	8004bf4 <HAL_TIM_IC_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000c64:	f000 f894 	bl	8000d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c68:	4822      	ldr	r0, [pc, #136]	; (8000cf4 <MX_TIM2_Init+0xf8>)
 8000c6a:	f003 fe5b 	bl	8004924 <HAL_TIM_PWM_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000c74:	f000 f88c 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c84:	4619      	mov	r1, r3
 8000c86:	481b      	ldr	r0, [pc, #108]	; (8000cf4 <MX_TIM2_Init+0xf8>)
 8000c88:	f005 f94c 	bl	8005f24 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000c92:	f000 f87d 	bl	8000d90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000c96:	230a      	movs	r3, #10
 8000c98:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	2200      	movs	r2, #0
 8000cac:	4619      	mov	r1, r3
 8000cae:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <MX_TIM2_Init+0xf8>)
 8000cb0:	f004 fa61 	bl	8005176 <HAL_TIM_IC_ConfigChannel>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8000cba:	f000 f869 	bl	8000d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cbe:	2360      	movs	r3, #96	; 0x60
 8000cc0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <MX_TIM2_Init+0xf8>)
 8000cd6:	f004 faeb 	bl	80052b0 <HAL_TIM_PWM_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000ce0:	f000 f856 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <MX_TIM2_Init+0xf8>)
 8000ce6:	f000 f975 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 8000cea:	bf00      	nop
 8000cec:	3738      	adds	r7, #56	; 0x38
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000134 	.word	0x20000134

08000cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <MX_GPIO_Init+0x90>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a1d      	ldr	r2, [pc, #116]	; (8000d88 <MX_GPIO_Init+0x90>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_GPIO_Init+0x90>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <MX_GPIO_Init+0x90>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	4a17      	ldr	r2, [pc, #92]	; (8000d88 <MX_GPIO_Init+0x90>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <MX_GPIO_Init+0x90>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <MX_GPIO_Init+0x90>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a11      	ldr	r2, [pc, #68]	; (8000d88 <MX_GPIO_Init+0x90>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_GPIO_Init+0x90>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5c:	480b      	ldr	r0, [pc, #44]	; (8000d8c <MX_GPIO_Init+0x94>)
 8000d5e:	f002 fa71 	bl	8003244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_GPIO_Init+0x94>)
 8000d7c:	f002 f8b8 	bl	8002ef0 <HAL_GPIO_Init>

}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	48000400 	.word	0x48000400

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <Error_Handler+0x8>
	...

08000d9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_MspInit+0x44>)
 8000da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da6:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <HAL_MspInit+0x44>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6613      	str	r3, [r2, #96]	; 0x60
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <HAL_MspInit+0x44>)
 8000db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_MspInit+0x44>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_MspInit+0x44>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_MspInit+0x44>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40021000 	.word	0x40021000

08000de4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0ac      	sub	sp, #176	; 0xb0
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2288      	movs	r2, #136	; 0x88
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f005 f95d 	bl	80060c4 <memset>
  if(hadc->Instance==ADC1)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a27      	ldr	r2, [pc, #156]	; (8000eac <HAL_ADC_MspInit+0xc8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d146      	bne.n	8000ea2 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e18:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e26:	2301      	movs	r3, #1
 8000e28:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e2a:	2308      	movs	r3, #8
 8000e2c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e2e:	2307      	movs	r3, #7
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4618      	mov	r0, r3
 8000e46:	f003 f841 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000e50:	f7ff ff9e 	bl	8000d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_ADC_MspInit+0xcc>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e58:	4a15      	ldr	r2, [pc, #84]	; (8000eb0 <HAL_ADC_MspInit+0xcc>)
 8000e5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_ADC_MspInit+0xcc>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_ADC_MspInit+0xcc>)
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e70:	4a0f      	ldr	r2, [pc, #60]	; (8000eb0 <HAL_ADC_MspInit+0xcc>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HAL_ADC_MspInit+0xcc>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000e84:	2338      	movs	r3, #56	; 0x38
 8000e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e8a:	230b      	movs	r3, #11
 8000e8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <HAL_ADC_MspInit+0xd0>)
 8000e9e:	f002 f827 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	37b0      	adds	r7, #176	; 0xb0
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	50040000 	.word	0x50040000
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	48000800 	.word	0x48000800

08000eb8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <HAL_CAN_MspInit+0x80>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d129      	bne.n	8000f2e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_CAN_MspInit+0x84>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <HAL_CAN_MspInit+0x84>)
 8000ee0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_CAN_MspInit+0x84>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_CAN_MspInit+0x84>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a11      	ldr	r2, [pc, #68]	; (8000f3c <HAL_CAN_MspInit+0x84>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_CAN_MspInit+0x84>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f1c:	2309      	movs	r3, #9
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2a:	f001 ffe1 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40006400 	.word	0x40006400
 8000f3c:	40021000 	.word	0x40021000

08000f40 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f60:	d131      	bne.n	8000fc6 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <HAL_TIM_IC_MspInit+0x90>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	4a1a      	ldr	r2, [pc, #104]	; (8000fd0 <HAL_TIM_IC_MspInit+0x90>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <HAL_TIM_IC_MspInit+0x90>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_TIM_IC_MspInit+0x90>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <HAL_TIM_IC_MspInit+0x90>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_TIM_IC_MspInit+0x90>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb2:	f001 ff9d 	bl	8002ef0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2101      	movs	r1, #1
 8000fba:	201c      	movs	r0, #28
 8000fbc:	f001 ff61 	bl	8002e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fc0:	201c      	movs	r0, #28
 8000fc2:	f001 ff7a 	bl	8002eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fc6:	bf00      	nop
 8000fc8:	3728      	adds	r7, #40	; 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff4:	d11c      	bne.n	8001030 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_TIM_MspPostInit+0x64>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <HAL_TIM_MspPostInit+0x64>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <HAL_TIM_MspPostInit+0x64>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800100e:	2304      	movs	r3, #4
 8001010:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800101e:	2301      	movs	r3, #1
 8001020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4619      	mov	r1, r3
 8001028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102c:	f001 ff60 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <NMI_Handler+0x4>

08001042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <HardFault_Handler+0x4>

08001048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <MemManage_Handler+0x4>

0800104e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001052:	e7fe      	b.n	8001052 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <UsageFault_Handler+0x4>

0800105a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001088:	f000 f940 	bl	800130c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <TIM2_IRQHandler+0x10>)
 8001096:	f003 ff4f 	bl	8004f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000134 	.word	0x20000134

080010a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	e00a      	b.n	80010cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010b6:	f3af 8000 	nop.w
 80010ba:	4601      	mov	r1, r0
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	60ba      	str	r2, [r7, #8]
 80010c2:	b2ca      	uxtb	r2, r1
 80010c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	3301      	adds	r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dbf0      	blt.n	80010b6 <_read+0x12>
	}

return len;
 80010d4:	687b      	ldr	r3, [r7, #4]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	e009      	b.n	8001104 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	60ba      	str	r2, [r7, #8]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3301      	adds	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	429a      	cmp	r2, r3
 800110a:	dbf1      	blt.n	80010f0 <_write+0x12>
	}
	return len;
 800110c:	687b      	ldr	r3, [r7, #4]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <_close>:

int _close(int file)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
	return -1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113e:	605a      	str	r2, [r3, #4]
	return 0;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <_isatty>:

int _isatty(int file)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
	return 1;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
	return 0;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001188:	4a14      	ldr	r2, [pc, #80]	; (80011dc <_sbrk+0x5c>)
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <_sbrk+0x60>)
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <_sbrk+0x64>)
 800119e:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <_sbrk+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d207      	bcs.n	80011c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b0:	f004 ff5e 	bl	8006070 <__errno>
 80011b4:	4603      	mov	r3, r0
 80011b6:	220c      	movs	r2, #12
 80011b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011be:	e009      	b.n	80011d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <_sbrk+0x64>)
 80011d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d2:	68fb      	ldr	r3, [r7, #12]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20018000 	.word	0x20018000
 80011e0:	00000400 	.word	0x00000400
 80011e4:	200001e4 	.word	0x200001e4
 80011e8:	20000200 	.word	0x20000200

080011ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <SystemInit+0x20>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <SystemInit+0x20>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001248 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001214:	f7ff ffea 	bl	80011ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <LoopForever+0x6>)
  ldr r1, =_edata
 800121a:	490d      	ldr	r1, [pc, #52]	; (8001250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800121c:	4a0d      	ldr	r2, [pc, #52]	; (8001254 <LoopForever+0xe>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001220:	e002      	b.n	8001228 <LoopCopyDataInit>

08001222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001226:	3304      	adds	r3, #4

08001228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800122c:	d3f9      	bcc.n	8001222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001230:	4c0a      	ldr	r4, [pc, #40]	; (800125c <LoopForever+0x16>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001234:	e001      	b.n	800123a <LoopFillZerobss>

08001236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001238:	3204      	adds	r2, #4

0800123a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800123c:	d3fb      	bcc.n	8001236 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123e:	f004 ff1d 	bl	800607c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001242:	f7ff f943 	bl	80004cc <main>

08001246 <LoopForever>:

LoopForever:
    b LoopForever
 8001246:	e7fe      	b.n	8001246 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001248:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800124c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001250:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001254:	080070f8 	.word	0x080070f8
  ldr r2, =_sbss
 8001258:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800125c:	200001fc 	.word	0x200001fc

08001260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC1_2_IRQHandler>

08001262 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126c:	2003      	movs	r0, #3
 800126e:	f001 fdfd 	bl	8002e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001272:	200f      	movs	r0, #15
 8001274:	f000 f80e 	bl	8001294 <HAL_InitTick>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	71fb      	strb	r3, [r7, #7]
 8001282:	e001      	b.n	8001288 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001284:	f7ff fd8a 	bl	8000d9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001288:	79fb      	ldrb	r3, [r7, #7]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_InitTick+0x6c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d023      	beq.n	80012f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_InitTick+0x70>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <HAL_InitTick+0x6c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 fe09 	bl	8002ed6 <HAL_SYSTICK_Config>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10f      	bne.n	80012ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d809      	bhi.n	80012e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012d8:	f001 fdd3 	bl	8002e82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012dc:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_InitTick+0x74>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e007      	b.n	80012f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e004      	b.n	80012f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	e001      	b.n	80012f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000024 	.word	0x20000024
 8001304:	2000001c 	.word	0x2000001c
 8001308:	20000020 	.word	0x20000020

0800130c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_IncTick+0x20>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x24>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_IncTick+0x24>)
 800131e:	6013      	str	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000024 	.word	0x20000024
 8001330:	200001e8 	.word	0x200001e8

08001334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_GetTick+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	200001e8 	.word	0x200001e8

0800134c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	609a      	str	r2, [r3, #8]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	609a      	str	r2, [r3, #8]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3360      	adds	r3, #96	; 0x60
 80013c6:	461a      	mov	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <LL_ADC_SetOffset+0x44>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	4313      	orrs	r3, r2
 80013e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013ec:	bf00      	nop
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	03fff000 	.word	0x03fff000

080013fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3360      	adds	r3, #96	; 0x60
 800140a:	461a      	mov	r2, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800141c:	4618      	mov	r0, r3
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3360      	adds	r3, #96	; 0x60
 8001438:	461a      	mov	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	431a      	orrs	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001452:	bf00      	nop
 8001454:	371c      	adds	r7, #28
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001484:	b480      	push	{r7}
 8001486:	b087      	sub	sp, #28
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3330      	adds	r3, #48	; 0x30
 8001494:	461a      	mov	r2, r3
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	4413      	add	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	f003 031f 	and.w	r3, r3, #31
 80014ae:	211f      	movs	r1, #31
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	401a      	ands	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	0e9b      	lsrs	r3, r3, #26
 80014bc:	f003 011f 	and.w	r1, r3, #31
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	f003 031f 	and.w	r3, r3, #31
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	431a      	orrs	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014d0:	bf00      	nop
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014dc:	b480      	push	{r7}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3314      	adds	r3, #20
 80014ec:	461a      	mov	r2, r3
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	0e5b      	lsrs	r3, r3, #25
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	4413      	add	r3, r2
 80014fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	0d1b      	lsrs	r3, r3, #20
 8001504:	f003 031f 	and.w	r3, r3, #31
 8001508:	2107      	movs	r1, #7
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	401a      	ands	r2, r3
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	0d1b      	lsrs	r3, r3, #20
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	431a      	orrs	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001526:	bf00      	nop
 8001528:	371c      	adds	r7, #28
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800154c:	43db      	mvns	r3, r3
 800154e:	401a      	ands	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f003 0318 	and.w	r3, r3, #24
 8001556:	4908      	ldr	r1, [pc, #32]	; (8001578 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001558:	40d9      	lsrs	r1, r3
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	400b      	ands	r3, r1
 800155e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001562:	431a      	orrs	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	0007ffff 	.word	0x0007ffff

0800157c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 031f 	and.w	r3, r3, #31
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80015c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6093      	str	r3, [r2, #8]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015ec:	d101      	bne.n	80015f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001610:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001614:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001638:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800163c:	d101      	bne.n	8001642 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001660:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001664:	f043 0201 	orr.w	r2, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001688:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800168c:	f043 0202 	orr.w	r2, r3, #2
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <LL_ADC_IsEnabled+0x18>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <LL_ADC_IsEnabled+0x1a>
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d101      	bne.n	80016de <LL_ADC_IsDisableOngoing+0x18>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <LL_ADC_IsDisableOngoing+0x1a>
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001700:	f043 0204 	orr.w	r2, r3, #4
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001724:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001728:	f043 0210 	orr.w	r2, r3, #16
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b04      	cmp	r3, #4
 800174e:	d101      	bne.n	8001754 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001772:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001776:	f043 0220 	orr.w	r2, r3, #32
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b08      	cmp	r3, #8
 800179c:	d101      	bne.n	80017a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e136      	b.n	8001a38 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d109      	bne.n	80017ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff fb03 	bl	8000de4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fef1 	bl	80015d8 <LL_ADC_IsDeepPowerDownEnabled>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d004      	beq.n	8001806 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fed7 	bl	80015b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff ff0c 	bl	8001628 <LL_ADC_IsInternalRegulatorEnabled>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d115      	bne.n	8001842 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fef0 	bl	8001600 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001820:	4b87      	ldr	r3, [pc, #540]	; (8001a40 <HAL_ADC_Init+0x290>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	099b      	lsrs	r3, r3, #6
 8001826:	4a87      	ldr	r2, [pc, #540]	; (8001a44 <HAL_ADC_Init+0x294>)
 8001828:	fba2 2303 	umull	r2, r3, r2, r3
 800182c:	099b      	lsrs	r3, r3, #6
 800182e:	3301      	adds	r3, #1
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001834:	e002      	b.n	800183c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	3b01      	subs	r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f9      	bne.n	8001836 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff feee 	bl	8001628 <LL_ADC_IsInternalRegulatorEnabled>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10d      	bne.n	800186e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001856:	f043 0210 	orr.w	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	f043 0201 	orr.w	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ff62 	bl	800173c <LL_ADC_REG_IsConversionOngoing>
 8001878:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	2b00      	cmp	r3, #0
 8001884:	f040 80cf 	bne.w	8001a26 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f040 80cb 	bne.w	8001a26 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001894:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001898:	f043 0202 	orr.w	r2, r3, #2
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fefb 	bl	80016a0 <LL_ADC_IsEnabled>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d115      	bne.n	80018dc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018b0:	4865      	ldr	r0, [pc, #404]	; (8001a48 <HAL_ADC_Init+0x298>)
 80018b2:	f7ff fef5 	bl	80016a0 <LL_ADC_IsEnabled>
 80018b6:	4604      	mov	r4, r0
 80018b8:	4864      	ldr	r0, [pc, #400]	; (8001a4c <HAL_ADC_Init+0x29c>)
 80018ba:	f7ff fef1 	bl	80016a0 <LL_ADC_IsEnabled>
 80018be:	4603      	mov	r3, r0
 80018c0:	431c      	orrs	r4, r3
 80018c2:	4863      	ldr	r0, [pc, #396]	; (8001a50 <HAL_ADC_Init+0x2a0>)
 80018c4:	f7ff feec 	bl	80016a0 <LL_ADC_IsEnabled>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4323      	orrs	r3, r4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d105      	bne.n	80018dc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4619      	mov	r1, r3
 80018d6:	485f      	ldr	r0, [pc, #380]	; (8001a54 <HAL_ADC_Init+0x2a4>)
 80018d8:	f7ff fd38 	bl	800134c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7e5b      	ldrb	r3, [r3, #25]
 80018e0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018e6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80018ec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80018f2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018fa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d106      	bne.n	8001918 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	3b01      	subs	r3, #1
 8001910:	045b      	lsls	r3, r3, #17
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	2b00      	cmp	r3, #0
 800191e:	d009      	beq.n	8001934 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001924:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_ADC_Init+0x2a8>)
 800193c:	4013      	ands	r3, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	69b9      	ldr	r1, [r7, #24]
 8001944:	430b      	orrs	r3, r1
 8001946:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fef5 	bl	800173c <LL_ADC_REG_IsConversionOngoing>
 8001952:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff16 	bl	800178a <LL_ADC_INJ_IsConversionOngoing>
 800195e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d13d      	bne.n	80019e2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d13a      	bne.n	80019e2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001970:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001978:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001988:	f023 0302 	bic.w	r3, r3, #2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	69b9      	ldr	r1, [r7, #24]
 8001992:	430b      	orrs	r3, r1
 8001994:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800199c:	2b01      	cmp	r3, #1
 800199e:	d118      	bne.n	80019d2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80019aa:	f023 0304 	bic.w	r3, r3, #4
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019b6:	4311      	orrs	r1, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019bc:	4311      	orrs	r1, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019c2:	430a      	orrs	r2, r1
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0201 	orr.w	r2, r2, #1
 80019ce:	611a      	str	r2, [r3, #16]
 80019d0:	e007      	b.n	80019e2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0201 	bic.w	r2, r2, #1
 80019e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d10c      	bne.n	8001a04 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	f023 010f 	bic.w	r1, r3, #15
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	1e5a      	subs	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
 8001a02:	e007      	b.n	8001a14 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 020f 	bic.w	r2, r2, #15
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a18:	f023 0303 	bic.w	r3, r3, #3
 8001a1c:	f043 0201 	orr.w	r2, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	655a      	str	r2, [r3, #84]	; 0x54
 8001a24:	e007      	b.n	8001a36 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2a:	f043 0210 	orr.w	r2, r3, #16
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a36:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3724      	adds	r7, #36	; 0x24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd90      	pop	{r4, r7, pc}
 8001a40:	2000001c 	.word	0x2000001c
 8001a44:	053e2d63 	.word	0x053e2d63
 8001a48:	50040000 	.word	0x50040000
 8001a4c:	50040100 	.word	0x50040100
 8001a50:	50040200 	.word	0x50040200
 8001a54:	50040300 	.word	0x50040300
 8001a58:	fff0c007 	.word	0xfff0c007

08001a5c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a64:	4857      	ldr	r0, [pc, #348]	; (8001bc4 <HAL_ADC_Start+0x168>)
 8001a66:	f7ff fd89 	bl	800157c <LL_ADC_GetMultimode>
 8001a6a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fe63 	bl	800173c <LL_ADC_REG_IsConversionOngoing>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f040 809c 	bne.w	8001bb6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_ADC_Start+0x30>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e097      	b.n	8001bbc <HAL_ADC_Start+0x160>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fe61 	bl	800275c <ADC_Enable>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 8083 	bne.w	8001bac <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aaa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aae:	f023 0301 	bic.w	r3, r3, #1
 8001ab2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a42      	ldr	r2, [pc, #264]	; (8001bc8 <HAL_ADC_Start+0x16c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d002      	beq.n	8001aca <HAL_ADC_Start+0x6e>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	e000      	b.n	8001acc <HAL_ADC_Start+0x70>
 8001aca:	4b40      	ldr	r3, [pc, #256]	; (8001bcc <HAL_ADC_Start+0x170>)
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d002      	beq.n	8001ada <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d105      	bne.n	8001ae6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ade:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af2:	d106      	bne.n	8001b02 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	f023 0206 	bic.w	r2, r3, #6
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	659a      	str	r2, [r3, #88]	; 0x58
 8001b00:	e002      	b.n	8001b08 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	221c      	movs	r2, #28
 8001b0e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a2a      	ldr	r2, [pc, #168]	; (8001bc8 <HAL_ADC_Start+0x16c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d002      	beq.n	8001b28 <HAL_ADC_Start+0xcc>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	e000      	b.n	8001b2a <HAL_ADC_Start+0xce>
 8001b28:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <HAL_ADC_Start+0x170>)
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d008      	beq.n	8001b44 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	2b05      	cmp	r3, #5
 8001b3c:	d002      	beq.n	8001b44 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2b09      	cmp	r3, #9
 8001b42:	d114      	bne.n	8001b6e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fdc0 	bl	80016ec <LL_ADC_REG_StartConversion>
 8001b6c:	e025      	b.n	8001bba <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <HAL_ADC_Start+0x16c>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d002      	beq.n	8001b8a <HAL_ADC_Start+0x12e>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	e000      	b.n	8001b8c <HAL_ADC_Start+0x130>
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_ADC_Start+0x170>)
 8001b8c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00f      	beq.n	8001bba <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ba2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	655a      	str	r2, [r3, #84]	; 0x54
 8001baa:	e006      	b.n	8001bba <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001bb4:	e001      	b.n	8001bba <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	50040300 	.word	0x50040300
 8001bc8:	50040100 	.word	0x50040100
 8001bcc:	50040000 	.word	0x50040000

08001bd0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_ADC_Stop+0x16>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e023      	b.n	8001c2e <HAL_ADC_Stop+0x5e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001bee:	2103      	movs	r1, #3
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fcf7 	bl	80025e4 <ADC_ConversionStop>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d111      	bne.n	8001c24 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 fe31 	bl	8002868 <ADC_Disable>
 8001c06:	4603      	mov	r3, r0
 8001c08:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d109      	bne.n	8001c24 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c42:	4866      	ldr	r0, [pc, #408]	; (8001ddc <HAL_ADC_PollForConversion+0x1a4>)
 8001c44:	f7ff fc9a 	bl	800157c <LL_ADC_GetMultimode>
 8001c48:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d102      	bne.n	8001c58 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001c52:	2308      	movs	r3, #8
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	e02a      	b.n	8001cae <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d002      	beq.n	8001c6a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b09      	cmp	r3, #9
 8001c68:	d111      	bne.n	8001c8e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d007      	beq.n	8001c88 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	f043 0220 	orr.w	r2, r3, #32
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0a4      	b.n	8001dd2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c88:	2304      	movs	r3, #4
 8001c8a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001c8c:	e00f      	b.n	8001cae <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001c8e:	4853      	ldr	r0, [pc, #332]	; (8001ddc <HAL_ADC_PollForConversion+0x1a4>)
 8001c90:	f7ff fc82 	bl	8001598 <LL_ADC_GetMultiDMATransfer>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d007      	beq.n	8001caa <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9e:	f043 0220 	orr.w	r2, r3, #32
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e093      	b.n	8001dd2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001caa:	2304      	movs	r3, #4
 8001cac:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001cae:	f7ff fb41 	bl	8001334 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001cb4:	e021      	b.n	8001cfa <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cbc:	d01d      	beq.n	8001cfa <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001cbe:	f7ff fb39 	bl	8001334 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d302      	bcc.n	8001cd4 <HAL_ADC_PollForConversion+0x9c>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d112      	bne.n	8001cfa <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10b      	bne.n	8001cfa <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce6:	f043 0204 	orr.w	r2, r3, #4
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e06b      	b.n	8001dd2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0d6      	beq.n	8001cb6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fba0 	bl	800145e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01c      	beq.n	8001d5e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7e5b      	ldrb	r3, [r3, #25]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d118      	bne.n	8001d5e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d111      	bne.n	8001d5e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <HAL_ADC_PollForConversion+0x1a8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d002      	beq.n	8001d6e <HAL_ADC_PollForConversion+0x136>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	e000      	b.n	8001d70 <HAL_ADC_PollForConversion+0x138>
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <HAL_ADC_PollForConversion+0x1ac>)
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d008      	beq.n	8001d8a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d005      	beq.n	8001d8a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d002      	beq.n	8001d8a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2b09      	cmp	r3, #9
 8001d88:	d104      	bne.n	8001d94 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	e00c      	b.n	8001dae <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a11      	ldr	r2, [pc, #68]	; (8001de0 <HAL_ADC_PollForConversion+0x1a8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d002      	beq.n	8001da4 <HAL_ADC_PollForConversion+0x16c>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	e000      	b.n	8001da6 <HAL_ADC_PollForConversion+0x16e>
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <HAL_ADC_PollForConversion+0x1ac>)
 8001da6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d104      	bne.n	8001dbe <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2208      	movs	r2, #8
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	e008      	b.n	8001dd0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d103      	bne.n	8001dd0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	220c      	movs	r2, #12
 8001dce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3720      	adds	r7, #32
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	50040300 	.word	0x50040300
 8001de0:	50040100 	.word	0x50040100
 8001de4:	50040000 	.word	0x50040000

08001de8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b0b6      	sub	sp, #216	; 0xd8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x22>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e3c7      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x7b2>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fc82 	bl	800173c <LL_ADC_REG_IsConversionOngoing>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f040 83a8 	bne.w	8002590 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d824      	bhi.n	8001e92 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	3b02      	subs	r3, #2
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d81b      	bhi.n	8001e8a <HAL_ADC_ConfigChannel+0x86>
 8001e52:	a201      	add	r2, pc, #4	; (adr r2, 8001e58 <HAL_ADC_ConfigChannel+0x54>)
 8001e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e58:	08001e69 	.word	0x08001e69
 8001e5c:	08001e71 	.word	0x08001e71
 8001e60:	08001e79 	.word	0x08001e79
 8001e64:	08001e81 	.word	0x08001e81
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	605a      	str	r2, [r3, #4]
          break;
 8001e6e:	e011      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	2212      	movs	r2, #18
 8001e74:	605a      	str	r2, [r3, #4]
          break;
 8001e76:	e00d      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2218      	movs	r2, #24
 8001e7c:	605a      	str	r2, [r3, #4]
          break;
 8001e7e:	e009      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e86:	605a      	str	r2, [r3, #4]
          break;
 8001e88:	e004      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2206      	movs	r2, #6
 8001e8e:	605a      	str	r2, [r3, #4]
          break;
 8001e90:	e000      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001e92:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f7ff faef 	bl	8001484 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fc46 	bl	800173c <LL_ADC_REG_IsConversionOngoing>
 8001eb0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fc66 	bl	800178a <LL_ADC_INJ_IsConversionOngoing>
 8001ebe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ec2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f040 81a6 	bne.w	8002218 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ecc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f040 81a1 	bne.w	8002218 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f7ff fafa 	bl	80014dc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	08db      	lsrs	r3, r3, #3
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d00a      	beq.n	8001f20 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6919      	ldr	r1, [r3, #16]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f1a:	f7ff fa4b 	bl	80013b4 <LL_ADC_SetOffset>
 8001f1e:	e17b      	b.n	8002218 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fa68 	bl	80013fc <LL_ADC_GetOffsetChannel>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10a      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x148>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fa5d 	bl	80013fc <LL_ADC_GetOffsetChannel>
 8001f42:	4603      	mov	r3, r0
 8001f44:	0e9b      	lsrs	r3, r3, #26
 8001f46:	f003 021f 	and.w	r2, r3, #31
 8001f4a:	e01e      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x186>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fa52 	bl	80013fc <LL_ADC_GetOffsetChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	e004      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001f7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x19e>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	0e9b      	lsrs	r3, r3, #26
 8001f9c:	f003 031f 	and.w	r3, r3, #31
 8001fa0:	e018      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x1d0>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	e004      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001fca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d106      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fa21 	bl	8001428 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2101      	movs	r1, #1
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fa05 	bl	80013fc <LL_ADC_GetOffsetChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10a      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x20e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2101      	movs	r1, #1
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff f9fa 	bl	80013fc <LL_ADC_GetOffsetChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	0e9b      	lsrs	r3, r3, #26
 800200c:	f003 021f 	and.w	r2, r3, #31
 8002010:	e01e      	b.n	8002050 <HAL_ADC_ConfigChannel+0x24c>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2101      	movs	r1, #1
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff f9ef 	bl	80013fc <LL_ADC_GetOffsetChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002030:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002034:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002038:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002040:	2320      	movs	r3, #32
 8002042:	e004      	b.n	800204e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002044:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002058:	2b00      	cmp	r3, #0
 800205a:	d105      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x264>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	0e9b      	lsrs	r3, r3, #26
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	e018      	b.n	800209a <HAL_ADC_ConfigChannel+0x296>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800207c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002080:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002084:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800208c:	2320      	movs	r3, #32
 800208e:	e004      	b.n	800209a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002090:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800209a:	429a      	cmp	r2, r3
 800209c:	d106      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	2101      	movs	r1, #1
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff f9be 	bl	8001428 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2102      	movs	r1, #2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff f9a2 	bl	80013fc <LL_ADC_GetOffsetChannel>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10a      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x2d4>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2102      	movs	r1, #2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff f997 	bl	80013fc <LL_ADC_GetOffsetChannel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	0e9b      	lsrs	r3, r3, #26
 80020d2:	f003 021f 	and.w	r2, r3, #31
 80020d6:	e01e      	b.n	8002116 <HAL_ADC_ConfigChannel+0x312>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2102      	movs	r1, #2
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff f98c 	bl	80013fc <LL_ADC_GetOffsetChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80020f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80020fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002106:	2320      	movs	r3, #32
 8002108:	e004      	b.n	8002114 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800210a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211e:	2b00      	cmp	r3, #0
 8002120:	d105      	bne.n	800212e <HAL_ADC_ConfigChannel+0x32a>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	0e9b      	lsrs	r3, r3, #26
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	e016      	b.n	800215c <HAL_ADC_ConfigChannel+0x358>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002140:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002142:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002146:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800214e:	2320      	movs	r3, #32
 8002150:	e004      	b.n	800215c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800215c:	429a      	cmp	r2, r3
 800215e:	d106      	bne.n	800216e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	2102      	movs	r1, #2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff f95d 	bl	8001428 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2103      	movs	r1, #3
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff f941 	bl	80013fc <LL_ADC_GetOffsetChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10a      	bne.n	800219a <HAL_ADC_ConfigChannel+0x396>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2103      	movs	r1, #3
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff f936 	bl	80013fc <LL_ADC_GetOffsetChannel>
 8002190:	4603      	mov	r3, r0
 8002192:	0e9b      	lsrs	r3, r3, #26
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	e017      	b.n	80021ca <HAL_ADC_ConfigChannel+0x3c6>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2103      	movs	r1, #3
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff f92b 	bl	80013fc <LL_ADC_GetOffsetChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80021b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021b4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80021b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80021bc:	2320      	movs	r3, #32
 80021be:	e003      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80021c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d105      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x3de>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	0e9b      	lsrs	r3, r3, #26
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	e011      	b.n	8002206 <HAL_ADC_ConfigChannel+0x402>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80021f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80021f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80021fa:	2320      	movs	r3, #32
 80021fc:	e003      	b.n	8002206 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80021fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002206:	429a      	cmp	r2, r3
 8002208:	d106      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2200      	movs	r2, #0
 8002210:	2103      	movs	r1, #3
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff f908 	bl	8001428 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff fa3f 	bl	80016a0 <LL_ADC_IsEnabled>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	f040 813f 	bne.w	80024a8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6819      	ldr	r1, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	461a      	mov	r2, r3
 8002238:	f7ff f97c 	bl	8001534 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a8e      	ldr	r2, [pc, #568]	; (800247c <HAL_ADC_ConfigChannel+0x678>)
 8002242:	4293      	cmp	r3, r2
 8002244:	f040 8130 	bne.w	80024a8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10b      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x46c>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	0e9b      	lsrs	r3, r3, #26
 800225e:	3301      	adds	r3, #1
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	2b09      	cmp	r3, #9
 8002266:	bf94      	ite	ls
 8002268:	2301      	movls	r3, #1
 800226a:	2300      	movhi	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	e019      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x4a0>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800227e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002280:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002288:	2320      	movs	r3, #32
 800228a:	e003      	b.n	8002294 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800228c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	3301      	adds	r3, #1
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	2b09      	cmp	r3, #9
 800229c:	bf94      	ite	ls
 800229e:	2301      	movls	r3, #1
 80022a0:	2300      	movhi	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d079      	beq.n	800239c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d107      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x4c0>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0e9b      	lsrs	r3, r3, #26
 80022ba:	3301      	adds	r3, #1
 80022bc:	069b      	lsls	r3, r3, #26
 80022be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022c2:	e015      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x4ec>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022cc:	fa93 f3a3 	rbit	r3, r3
 80022d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80022d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80022dc:	2320      	movs	r3, #32
 80022de:	e003      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80022e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	3301      	adds	r3, #1
 80022ea:	069b      	lsls	r3, r3, #26
 80022ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x50c>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	0e9b      	lsrs	r3, r3, #26
 8002302:	3301      	adds	r3, #1
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	2101      	movs	r1, #1
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	e017      	b.n	8002340 <HAL_ADC_ConfigChannel+0x53c>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800231e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002320:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002328:	2320      	movs	r3, #32
 800232a:	e003      	b.n	8002334 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800232c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	3301      	adds	r3, #1
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	2101      	movs	r1, #1
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	ea42 0103 	orr.w	r1, r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10a      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x562>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0e9b      	lsrs	r3, r3, #26
 8002356:	3301      	adds	r3, #1
 8002358:	f003 021f 	and.w	r2, r3, #31
 800235c:	4613      	mov	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4413      	add	r3, r2
 8002362:	051b      	lsls	r3, r3, #20
 8002364:	e018      	b.n	8002398 <HAL_ADC_ConfigChannel+0x594>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002376:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800237e:	2320      	movs	r3, #32
 8002380:	e003      	b.n	800238a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f003 021f 	and.w	r2, r3, #31
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002398:	430b      	orrs	r3, r1
 800239a:	e080      	b.n	800249e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d107      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x5b4>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	0e9b      	lsrs	r3, r3, #26
 80023ae:	3301      	adds	r3, #1
 80023b0:	069b      	lsls	r3, r3, #26
 80023b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023b6:	e015      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x5e0>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c0:	fa93 f3a3 	rbit	r3, r3
 80023c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80023d0:	2320      	movs	r3, #32
 80023d2:	e003      	b.n	80023dc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80023d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	3301      	adds	r3, #1
 80023de:	069b      	lsls	r3, r3, #26
 80023e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d109      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x600>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0e9b      	lsrs	r3, r3, #26
 80023f6:	3301      	adds	r3, #1
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	2101      	movs	r1, #1
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	e017      	b.n	8002434 <HAL_ADC_ConfigChannel+0x630>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	61fb      	str	r3, [r7, #28]
  return result;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800241c:	2320      	movs	r3, #32
 800241e:	e003      	b.n	8002428 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	3301      	adds	r3, #1
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	2101      	movs	r1, #1
 8002430:	fa01 f303 	lsl.w	r3, r1, r3
 8002434:	ea42 0103 	orr.w	r1, r2, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10d      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x65c>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0e9b      	lsrs	r3, r3, #26
 800244a:	3301      	adds	r3, #1
 800244c:	f003 021f 	and.w	r2, r3, #31
 8002450:	4613      	mov	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	4413      	add	r3, r2
 8002456:	3b1e      	subs	r3, #30
 8002458:	051b      	lsls	r3, r3, #20
 800245a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800245e:	e01d      	b.n	800249c <HAL_ADC_ConfigChannel+0x698>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	613b      	str	r3, [r7, #16]
  return result;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d103      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002478:	2320      	movs	r3, #32
 800247a:	e005      	b.n	8002488 <HAL_ADC_ConfigChannel+0x684>
 800247c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	3301      	adds	r3, #1
 800248a:	f003 021f 	and.w	r2, r3, #31
 800248e:	4613      	mov	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	3b1e      	subs	r3, #30
 8002496:	051b      	lsls	r3, r3, #20
 8002498:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800249c:	430b      	orrs	r3, r1
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	6892      	ldr	r2, [r2, #8]
 80024a2:	4619      	mov	r1, r3
 80024a4:	f7ff f81a 	bl	80014dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b44      	ldr	r3, [pc, #272]	; (80025c0 <HAL_ADC_ConfigChannel+0x7bc>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d07a      	beq.n	80025aa <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024b4:	4843      	ldr	r0, [pc, #268]	; (80025c4 <HAL_ADC_ConfigChannel+0x7c0>)
 80024b6:	f7fe ff6f 	bl	8001398 <LL_ADC_GetCommonPathInternalCh>
 80024ba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a41      	ldr	r2, [pc, #260]	; (80025c8 <HAL_ADC_ConfigChannel+0x7c4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d12c      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d126      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a3c      	ldr	r2, [pc, #240]	; (80025cc <HAL_ADC_ConfigChannel+0x7c8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d004      	beq.n	80024e8 <HAL_ADC_ConfigChannel+0x6e4>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a3b      	ldr	r2, [pc, #236]	; (80025d0 <HAL_ADC_ConfigChannel+0x7cc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d15d      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024f0:	4619      	mov	r1, r3
 80024f2:	4834      	ldr	r0, [pc, #208]	; (80025c4 <HAL_ADC_ConfigChannel+0x7c0>)
 80024f4:	f7fe ff3d 	bl	8001372 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024f8:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <HAL_ADC_ConfigChannel+0x7d0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	099b      	lsrs	r3, r3, #6
 80024fe:	4a36      	ldr	r2, [pc, #216]	; (80025d8 <HAL_ADC_ConfigChannel+0x7d4>)
 8002500:	fba2 2303 	umull	r2, r3, r2, r3
 8002504:	099b      	lsrs	r3, r3, #6
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002512:	e002      	b.n	800251a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	3b01      	subs	r3, #1
 8002518:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f9      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002520:	e040      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a2d      	ldr	r2, [pc, #180]	; (80025dc <HAL_ADC_ConfigChannel+0x7d8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d118      	bne.n	800255e <HAL_ADC_ConfigChannel+0x75a>
 800252c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d112      	bne.n	800255e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a23      	ldr	r2, [pc, #140]	; (80025cc <HAL_ADC_ConfigChannel+0x7c8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d004      	beq.n	800254c <HAL_ADC_ConfigChannel+0x748>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a22      	ldr	r2, [pc, #136]	; (80025d0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d12d      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800254c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002550:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002554:	4619      	mov	r1, r3
 8002556:	481b      	ldr	r0, [pc, #108]	; (80025c4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002558:	f7fe ff0b 	bl	8001372 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800255c:	e024      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1f      	ldr	r2, [pc, #124]	; (80025e0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d120      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002568:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800256c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d11a      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a14      	ldr	r2, [pc, #80]	; (80025cc <HAL_ADC_ConfigChannel+0x7c8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d115      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800257e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002582:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002586:	4619      	mov	r1, r3
 8002588:	480e      	ldr	r0, [pc, #56]	; (80025c4 <HAL_ADC_ConfigChannel+0x7c0>)
 800258a:	f7fe fef2 	bl	8001372 <LL_ADC_SetCommonPathInternalCh>
 800258e:	e00c      	b.n	80025aa <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002594:	f043 0220 	orr.w	r2, r3, #32
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80025a2:	e002      	b.n	80025aa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025a4:	bf00      	nop
 80025a6:	e000      	b.n	80025aa <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	37d8      	adds	r7, #216	; 0xd8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	80080000 	.word	0x80080000
 80025c4:	50040300 	.word	0x50040300
 80025c8:	c7520000 	.word	0xc7520000
 80025cc:	50040000 	.word	0x50040000
 80025d0:	50040200 	.word	0x50040200
 80025d4:	2000001c 	.word	0x2000001c
 80025d8:	053e2d63 	.word	0x053e2d63
 80025dc:	cb840000 	.word	0xcb840000
 80025e0:	80000001 	.word	0x80000001

080025e4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f89e 	bl	800173c <LL_ADC_REG_IsConversionOngoing>
 8002600:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff f8bf 	bl	800178a <LL_ADC_INJ_IsConversionOngoing>
 800260c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d103      	bne.n	800261c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8098 	beq.w	800274c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d02a      	beq.n	8002680 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7e5b      	ldrb	r3, [r3, #25]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d126      	bne.n	8002680 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	7e1b      	ldrb	r3, [r3, #24]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d122      	bne.n	8002680 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800263a:	2301      	movs	r3, #1
 800263c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800263e:	e014      	b.n	800266a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	4a45      	ldr	r2, [pc, #276]	; (8002758 <ADC_ConversionStop+0x174>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d90d      	bls.n	8002664 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264c:	f043 0210 	orr.w	r2, r3, #16
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	f043 0201 	orr.w	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e074      	b.n	800274e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	3301      	adds	r3, #1
 8002668:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002674:	2b40      	cmp	r3, #64	; 0x40
 8002676:	d1e3      	bne.n	8002640 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2240      	movs	r2, #64	; 0x40
 800267e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d014      	beq.n	80026b0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff f856 	bl	800173c <LL_ADC_REG_IsConversionOngoing>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00c      	beq.n	80026b0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff f813 	bl	80016c6 <LL_ADC_IsDisableOngoing>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d104      	bne.n	80026b0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff f832 	bl	8001714 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d014      	beq.n	80026e0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff f865 	bl	800178a <LL_ADC_INJ_IsConversionOngoing>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00c      	beq.n	80026e0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fffb 	bl	80016c6 <LL_ADC_IsDisableOngoing>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d104      	bne.n	80026e0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff f841 	bl	8001762 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d005      	beq.n	80026f2 <ADC_ConversionStop+0x10e>
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d105      	bne.n	80026f8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80026ec:	230c      	movs	r3, #12
 80026ee:	617b      	str	r3, [r7, #20]
        break;
 80026f0:	e005      	b.n	80026fe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80026f2:	2308      	movs	r3, #8
 80026f4:	617b      	str	r3, [r7, #20]
        break;
 80026f6:	e002      	b.n	80026fe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80026f8:	2304      	movs	r3, #4
 80026fa:	617b      	str	r3, [r7, #20]
        break;
 80026fc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80026fe:	f7fe fe19 	bl	8001334 <HAL_GetTick>
 8002702:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002704:	e01b      	b.n	800273e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002706:	f7fe fe15 	bl	8001334 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b05      	cmp	r3, #5
 8002712:	d914      	bls.n	800273e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00d      	beq.n	800273e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	f043 0210 	orr.w	r2, r3, #16
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e007      	b.n	800274e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	4013      	ands	r3, r2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1dc      	bne.n	8002706 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	a33fffff 	.word	0xa33fffff

0800275c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002764:	2300      	movs	r3, #0
 8002766:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe ff97 	bl	80016a0 <LL_ADC_IsEnabled>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d169      	bne.n	800284c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	4b36      	ldr	r3, [pc, #216]	; (8002858 <ADC_Enable+0xfc>)
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00d      	beq.n	80027a2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	f043 0210 	orr.w	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	f043 0201 	orr.w	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e055      	b.n	800284e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe ff52 	bl	8001650 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80027ac:	482b      	ldr	r0, [pc, #172]	; (800285c <ADC_Enable+0x100>)
 80027ae:	f7fe fdf3 	bl	8001398 <LL_ADC_GetCommonPathInternalCh>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027bc:	4b28      	ldr	r3, [pc, #160]	; (8002860 <ADC_Enable+0x104>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	099b      	lsrs	r3, r3, #6
 80027c2:	4a28      	ldr	r2, [pc, #160]	; (8002864 <ADC_Enable+0x108>)
 80027c4:	fba2 2303 	umull	r2, r3, r2, r3
 80027c8:	099b      	lsrs	r3, r3, #6
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80027d6:	e002      	b.n	80027de <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	3b01      	subs	r3, #1
 80027dc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f9      	bne.n	80027d8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027e4:	f7fe fda6 	bl	8001334 <HAL_GetTick>
 80027e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027ea:	e028      	b.n	800283e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe ff55 	bl	80016a0 <LL_ADC_IsEnabled>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d104      	bne.n	8002806 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe ff25 	bl	8001650 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002806:	f7fe fd95 	bl	8001334 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d914      	bls.n	800283e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b01      	cmp	r3, #1
 8002820:	d00d      	beq.n	800283e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002826:	f043 0210 	orr.w	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e007      	b.n	800284e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d1cf      	bne.n	80027ec <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	8000003f 	.word	0x8000003f
 800285c:	50040300 	.word	0x50040300
 8002860:	2000001c 	.word	0x2000001c
 8002864:	053e2d63 	.word	0x053e2d63

08002868 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe ff26 	bl	80016c6 <LL_ADC_IsDisableOngoing>
 800287a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe ff0d 	bl	80016a0 <LL_ADC_IsEnabled>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d047      	beq.n	800291c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d144      	bne.n	800291c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030d 	and.w	r3, r3, #13
 800289c:	2b01      	cmp	r3, #1
 800289e:	d10c      	bne.n	80028ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe fee7 	bl	8001678 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2203      	movs	r2, #3
 80028b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028b2:	f7fe fd3f 	bl	8001334 <HAL_GetTick>
 80028b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028b8:	e029      	b.n	800290e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028be:	f043 0210 	orr.w	r2, r3, #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	f043 0201 	orr.w	r2, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e023      	b.n	800291e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028d6:	f7fe fd2d 	bl	8001334 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d914      	bls.n	800290e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00d      	beq.n	800290e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	f043 0210 	orr.w	r2, r3, #16
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	f043 0201 	orr.w	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e007      	b.n	800291e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1dc      	bne.n	80028d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <LL_ADC_IsEnabled>:
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <LL_ADC_IsEnabled+0x18>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <LL_ADC_IsEnabled+0x1a>
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_REG_IsConversionOngoing>:
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b04      	cmp	r3, #4
 800295e:	d101      	bne.n	8002964 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b09f      	sub	sp, #124	; 0x7c
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800298e:	2302      	movs	r3, #2
 8002990:	e093      	b.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800299a:	2300      	movs	r3, #0
 800299c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800299e:	2300      	movs	r3, #0
 80029a0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a47      	ldr	r2, [pc, #284]	; (8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d102      	bne.n	80029b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029ac:	4b46      	ldr	r3, [pc, #280]	; (8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	e001      	b.n	80029b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10b      	bne.n	80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c0:	f043 0220 	orr.w	r2, r3, #32
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e072      	b.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff ffb8 	bl	800294c <LL_ADC_REG_IsConversionOngoing>
 80029dc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ffb2 	bl	800294c <LL_ADC_REG_IsConversionOngoing>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d154      	bne.n	8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80029ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d151      	bne.n	8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029f4:	4b35      	ldr	r3, [pc, #212]	; (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80029f6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d02c      	beq.n	8002a5a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a12:	035b      	lsls	r3, r3, #13
 8002a14:	430b      	orrs	r3, r1
 8002a16:	431a      	orrs	r2, r3
 8002a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a1c:	4829      	ldr	r0, [pc, #164]	; (8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a1e:	f7ff ff82 	bl	8002926 <LL_ADC_IsEnabled>
 8002a22:	4604      	mov	r4, r0
 8002a24:	4828      	ldr	r0, [pc, #160]	; (8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a26:	f7ff ff7e 	bl	8002926 <LL_ADC_IsEnabled>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	431c      	orrs	r4, r3
 8002a2e:	4828      	ldr	r0, [pc, #160]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002a30:	f7ff ff79 	bl	8002926 <LL_ADC_IsEnabled>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4323      	orrs	r3, r4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d137      	bne.n	8002aac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a44:	f023 030f 	bic.w	r3, r3, #15
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	6811      	ldr	r1, [r2, #0]
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	6892      	ldr	r2, [r2, #8]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	431a      	orrs	r2, r3
 8002a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a56:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a58:	e028      	b.n	8002aac <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a64:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a66:	4817      	ldr	r0, [pc, #92]	; (8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a68:	f7ff ff5d 	bl	8002926 <LL_ADC_IsEnabled>
 8002a6c:	4604      	mov	r4, r0
 8002a6e:	4816      	ldr	r0, [pc, #88]	; (8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a70:	f7ff ff59 	bl	8002926 <LL_ADC_IsEnabled>
 8002a74:	4603      	mov	r3, r0
 8002a76:	431c      	orrs	r4, r3
 8002a78:	4815      	ldr	r0, [pc, #84]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002a7a:	f7ff ff54 	bl	8002926 <LL_ADC_IsEnabled>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4323      	orrs	r3, r4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d112      	bne.n	8002aac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a8e:	f023 030f 	bic.w	r3, r3, #15
 8002a92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a94:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a96:	e009      	b.n	8002aac <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9c:	f043 0220 	orr.w	r2, r3, #32
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002aaa:	e000      	b.n	8002aae <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ab6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	377c      	adds	r7, #124	; 0x7c
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd90      	pop	{r4, r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	50040000 	.word	0x50040000
 8002ac8:	50040100 	.word	0x50040100
 8002acc:	50040300 	.word	0x50040300
 8002ad0:	50040200 	.word	0x50040200

08002ad4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0ed      	b.n	8002cc2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d102      	bne.n	8002af8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe f9e0 	bl	8000eb8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b08:	f7fe fc14 	bl	8001334 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b0e:	e012      	b.n	8002b36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b10:	f7fe fc10 	bl	8001334 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b0a      	cmp	r3, #10
 8002b1c:	d90b      	bls.n	8002b36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2205      	movs	r2, #5
 8002b2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e0c5      	b.n	8002cc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0e5      	beq.n	8002b10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0202 	bic.w	r2, r2, #2
 8002b52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b54:	f7fe fbee 	bl	8001334 <HAL_GetTick>
 8002b58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b5a:	e012      	b.n	8002b82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b5c:	f7fe fbea 	bl	8001334 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b0a      	cmp	r3, #10
 8002b68:	d90b      	bls.n	8002b82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2205      	movs	r2, #5
 8002b7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e09f      	b.n	8002cc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1e5      	bne.n	8002b5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	7e1b      	ldrb	r3, [r3, #24]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d108      	bne.n	8002baa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	e007      	b.n	8002bba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	7e5b      	ldrb	r3, [r3, #25]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d108      	bne.n	8002bd4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e007      	b.n	8002be4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	7e9b      	ldrb	r3, [r3, #26]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d108      	bne.n	8002bfe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0220 	orr.w	r2, r2, #32
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e007      	b.n	8002c0e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0220 	bic.w	r2, r2, #32
 8002c0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	7edb      	ldrb	r3, [r3, #27]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d108      	bne.n	8002c28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0210 	bic.w	r2, r2, #16
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	e007      	b.n	8002c38 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0210 	orr.w	r2, r2, #16
 8002c36:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	7f1b      	ldrb	r3, [r3, #28]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d108      	bne.n	8002c52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0208 	orr.w	r2, r2, #8
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	e007      	b.n	8002c62 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0208 	bic.w	r2, r2, #8
 8002c60:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	7f5b      	ldrb	r3, [r3, #29]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d108      	bne.n	8002c7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0204 	orr.w	r2, r2, #4
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e007      	b.n	8002c8c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0204 	bic.w	r2, r2, #4
 8002c8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	ea42 0103 	orr.w	r1, r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	1e5a      	subs	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfe:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	60d3      	str	r3, [r2, #12]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d18:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <__NVIC_GetPriorityGrouping+0x18>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	f003 0307 	and.w	r3, r3, #7
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	db0b      	blt.n	8002d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	4907      	ldr	r1, [pc, #28]	; (8002d68 <__NVIC_EnableIRQ+0x38>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2001      	movs	r0, #1
 8002d52:	fa00 f202 	lsl.w	r2, r0, r2
 8002d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	e000e100 	.word	0xe000e100

08002d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	6039      	str	r1, [r7, #0]
 8002d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	db0a      	blt.n	8002d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	490c      	ldr	r1, [pc, #48]	; (8002db8 <__NVIC_SetPriority+0x4c>)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	0112      	lsls	r2, r2, #4
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	440b      	add	r3, r1
 8002d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d94:	e00a      	b.n	8002dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	4908      	ldr	r1, [pc, #32]	; (8002dbc <__NVIC_SetPriority+0x50>)
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	3b04      	subs	r3, #4
 8002da4:	0112      	lsls	r2, r2, #4
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	440b      	add	r3, r1
 8002daa:	761a      	strb	r2, [r3, #24]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000e100 	.word	0xe000e100
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b089      	sub	sp, #36	; 0x24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f1c3 0307 	rsb	r3, r3, #7
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	bf28      	it	cs
 8002dde:	2304      	movcs	r3, #4
 8002de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3304      	adds	r3, #4
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	d902      	bls.n	8002df0 <NVIC_EncodePriority+0x30>
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3b03      	subs	r3, #3
 8002dee:	e000      	b.n	8002df2 <NVIC_EncodePriority+0x32>
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	401a      	ands	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e12:	43d9      	mvns	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e18:	4313      	orrs	r3, r2
         );
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3724      	adds	r7, #36	; 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e38:	d301      	bcc.n	8002e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e00f      	b.n	8002e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <SysTick_Config+0x40>)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e46:	210f      	movs	r1, #15
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e4c:	f7ff ff8e 	bl	8002d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <SysTick_Config+0x40>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e56:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <SysTick_Config+0x40>)
 8002e58:	2207      	movs	r2, #7
 8002e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	e000e010 	.word	0xe000e010

08002e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff ff29 	bl	8002ccc <__NVIC_SetPriorityGrouping>
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b086      	sub	sp, #24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	4603      	mov	r3, r0
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e94:	f7ff ff3e 	bl	8002d14 <__NVIC_GetPriorityGrouping>
 8002e98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	6978      	ldr	r0, [r7, #20]
 8002ea0:	f7ff ff8e 	bl	8002dc0 <NVIC_EncodePriority>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff5d 	bl	8002d6c <__NVIC_SetPriority>
}
 8002eb2:	bf00      	nop
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff31 	bl	8002d30 <__NVIC_EnableIRQ>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff ffa2 	bl	8002e28 <SysTick_Config>
 8002ee4:	4603      	mov	r3, r0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002efe:	e17f      	b.n	8003200 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2101      	movs	r1, #1
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8171 	beq.w	80031fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d005      	beq.n	8002f30 <HAL_GPIO_Init+0x40>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d130      	bne.n	8002f92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f66:	2201      	movs	r2, #1
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4013      	ands	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	f003 0201 	and.w	r2, r3, #1
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d118      	bne.n	8002fd0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	08db      	lsrs	r3, r3, #3
 8002fba:	f003 0201 	and.w	r2, r3, #1
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d017      	beq.n	800300c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d123      	bne.n	8003060 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	08da      	lsrs	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3208      	adds	r2, #8
 8003020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003024:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	220f      	movs	r2, #15
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	08da      	lsrs	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3208      	adds	r2, #8
 800305a:	6939      	ldr	r1, [r7, #16]
 800305c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4013      	ands	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0203 	and.w	r2, r3, #3
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80ac 	beq.w	80031fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a2:	4b5f      	ldr	r3, [pc, #380]	; (8003220 <HAL_GPIO_Init+0x330>)
 80030a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a6:	4a5e      	ldr	r2, [pc, #376]	; (8003220 <HAL_GPIO_Init+0x330>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6613      	str	r3, [r2, #96]	; 0x60
 80030ae:	4b5c      	ldr	r3, [pc, #368]	; (8003220 <HAL_GPIO_Init+0x330>)
 80030b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030ba:	4a5a      	ldr	r2, [pc, #360]	; (8003224 <HAL_GPIO_Init+0x334>)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	3302      	adds	r3, #2
 80030c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	220f      	movs	r2, #15
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4013      	ands	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030e4:	d025      	beq.n	8003132 <HAL_GPIO_Init+0x242>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a4f      	ldr	r2, [pc, #316]	; (8003228 <HAL_GPIO_Init+0x338>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01f      	beq.n	800312e <HAL_GPIO_Init+0x23e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4e      	ldr	r2, [pc, #312]	; (800322c <HAL_GPIO_Init+0x33c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d019      	beq.n	800312a <HAL_GPIO_Init+0x23a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a4d      	ldr	r2, [pc, #308]	; (8003230 <HAL_GPIO_Init+0x340>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <HAL_GPIO_Init+0x236>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a4c      	ldr	r2, [pc, #304]	; (8003234 <HAL_GPIO_Init+0x344>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00d      	beq.n	8003122 <HAL_GPIO_Init+0x232>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a4b      	ldr	r2, [pc, #300]	; (8003238 <HAL_GPIO_Init+0x348>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d007      	beq.n	800311e <HAL_GPIO_Init+0x22e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a4a      	ldr	r2, [pc, #296]	; (800323c <HAL_GPIO_Init+0x34c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d101      	bne.n	800311a <HAL_GPIO_Init+0x22a>
 8003116:	2306      	movs	r3, #6
 8003118:	e00c      	b.n	8003134 <HAL_GPIO_Init+0x244>
 800311a:	2307      	movs	r3, #7
 800311c:	e00a      	b.n	8003134 <HAL_GPIO_Init+0x244>
 800311e:	2305      	movs	r3, #5
 8003120:	e008      	b.n	8003134 <HAL_GPIO_Init+0x244>
 8003122:	2304      	movs	r3, #4
 8003124:	e006      	b.n	8003134 <HAL_GPIO_Init+0x244>
 8003126:	2303      	movs	r3, #3
 8003128:	e004      	b.n	8003134 <HAL_GPIO_Init+0x244>
 800312a:	2302      	movs	r3, #2
 800312c:	e002      	b.n	8003134 <HAL_GPIO_Init+0x244>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <HAL_GPIO_Init+0x244>
 8003132:	2300      	movs	r3, #0
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	f002 0203 	and.w	r2, r2, #3
 800313a:	0092      	lsls	r2, r2, #2
 800313c:	4093      	lsls	r3, r2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003144:	4937      	ldr	r1, [pc, #220]	; (8003224 <HAL_GPIO_Init+0x334>)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	089b      	lsrs	r3, r3, #2
 800314a:	3302      	adds	r3, #2
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003152:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <HAL_GPIO_Init+0x350>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	43db      	mvns	r3, r3
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4013      	ands	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003176:	4a32      	ldr	r2, [pc, #200]	; (8003240 <HAL_GPIO_Init+0x350>)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800317c:	4b30      	ldr	r3, [pc, #192]	; (8003240 <HAL_GPIO_Init+0x350>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	43db      	mvns	r3, r3
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031a0:	4a27      	ldr	r2, [pc, #156]	; (8003240 <HAL_GPIO_Init+0x350>)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031a6:	4b26      	ldr	r3, [pc, #152]	; (8003240 <HAL_GPIO_Init+0x350>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031ca:	4a1d      	ldr	r2, [pc, #116]	; (8003240 <HAL_GPIO_Init+0x350>)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <HAL_GPIO_Init+0x350>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	43db      	mvns	r3, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031f4:	4a12      	ldr	r2, [pc, #72]	; (8003240 <HAL_GPIO_Init+0x350>)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	3301      	adds	r3, #1
 80031fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fa22 f303 	lsr.w	r3, r2, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	f47f ae78 	bne.w	8002f00 <HAL_GPIO_Init+0x10>
  }
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000
 8003224:	40010000 	.word	0x40010000
 8003228:	48000400 	.word	0x48000400
 800322c:	48000800 	.word	0x48000800
 8003230:	48000c00 	.word	0x48000c00
 8003234:	48001000 	.word	0x48001000
 8003238:	48001400 	.word	0x48001400
 800323c:	48001800 	.word	0x48001800
 8003240:	40010400 	.word	0x40010400

08003244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	807b      	strh	r3, [r7, #2]
 8003250:	4613      	mov	r3, r2
 8003252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003254:	787b      	ldrb	r3, [r7, #1]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003260:	e002      	b.n	8003268 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003262:	887a      	ldrh	r2, [r7, #2]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003278:	4b04      	ldr	r3, [pc, #16]	; (800328c <HAL_PWREx_GetVoltageRange+0x18>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003280:	4618      	mov	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40007000 	.word	0x40007000

08003290 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800329e:	d130      	bne.n	8003302 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032a0:	4b23      	ldr	r3, [pc, #140]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ac:	d038      	beq.n	8003320 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032ae:	4b20      	ldr	r3, [pc, #128]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032b6:	4a1e      	ldr	r2, [pc, #120]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032be:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2232      	movs	r2, #50	; 0x32
 80032c4:	fb02 f303 	mul.w	r3, r2, r3
 80032c8:	4a1b      	ldr	r2, [pc, #108]	; (8003338 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	0c9b      	lsrs	r3, r3, #18
 80032d0:	3301      	adds	r3, #1
 80032d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d4:	e002      	b.n	80032dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3b01      	subs	r3, #1
 80032da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e8:	d102      	bne.n	80032f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f2      	bne.n	80032d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032f0:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fc:	d110      	bne.n	8003320 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e00f      	b.n	8003322 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003302:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800330a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330e:	d007      	beq.n	8003320 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003310:	4b07      	ldr	r3, [pc, #28]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003318:	4a05      	ldr	r2, [pc, #20]	; (8003330 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800331a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800331e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40007000 	.word	0x40007000
 8003334:	2000001c 	.word	0x2000001c
 8003338:	431bde83 	.word	0x431bde83

0800333c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e3ca      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800334e:	4b97      	ldr	r3, [pc, #604]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003358:	4b94      	ldr	r3, [pc, #592]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 80e4 	beq.w	8003538 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <HAL_RCC_OscConfig+0x4a>
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2b0c      	cmp	r3, #12
 800337a:	f040 808b 	bne.w	8003494 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b01      	cmp	r3, #1
 8003382:	f040 8087 	bne.w	8003494 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003386:	4b89      	ldr	r3, [pc, #548]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <HAL_RCC_OscConfig+0x62>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e3a2      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1a      	ldr	r2, [r3, #32]
 80033a2:	4b82      	ldr	r3, [pc, #520]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d004      	beq.n	80033b8 <HAL_RCC_OscConfig+0x7c>
 80033ae:	4b7f      	ldr	r3, [pc, #508]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033b6:	e005      	b.n	80033c4 <HAL_RCC_OscConfig+0x88>
 80033b8:	4b7c      	ldr	r3, [pc, #496]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80033ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d223      	bcs.n	8003410 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fd1d 	bl	8003e0c <RCC_SetFlashLatencyFromMSIRange>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e383      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033dc:	4b73      	ldr	r3, [pc, #460]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a72      	ldr	r2, [pc, #456]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80033e2:	f043 0308 	orr.w	r3, r3, #8
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b70      	ldr	r3, [pc, #448]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	496d      	ldr	r1, [pc, #436]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033fa:	4b6c      	ldr	r3, [pc, #432]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	4968      	ldr	r1, [pc, #416]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 800340a:	4313      	orrs	r3, r2
 800340c:	604b      	str	r3, [r1, #4]
 800340e:	e025      	b.n	800345c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003410:	4b66      	ldr	r3, [pc, #408]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a65      	ldr	r2, [pc, #404]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 8003416:	f043 0308 	orr.w	r3, r3, #8
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4b63      	ldr	r3, [pc, #396]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	4960      	ldr	r1, [pc, #384]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800342e:	4b5f      	ldr	r3, [pc, #380]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	495b      	ldr	r1, [pc, #364]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 800343e:	4313      	orrs	r3, r2
 8003440:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d109      	bne.n	800345c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fcdd 	bl	8003e0c <RCC_SetFlashLatencyFromMSIRange>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e343      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800345c:	f000 fc4a 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8003460:	4602      	mov	r2, r0
 8003462:	4b52      	ldr	r3, [pc, #328]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	091b      	lsrs	r3, r3, #4
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	4950      	ldr	r1, [pc, #320]	; (80035b0 <HAL_RCC_OscConfig+0x274>)
 800346e:	5ccb      	ldrb	r3, [r1, r3]
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
 8003478:	4a4e      	ldr	r2, [pc, #312]	; (80035b4 <HAL_RCC_OscConfig+0x278>)
 800347a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800347c:	4b4e      	ldr	r3, [pc, #312]	; (80035b8 <HAL_RCC_OscConfig+0x27c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7fd ff07 	bl	8001294 <HAL_InitTick>
 8003486:	4603      	mov	r3, r0
 8003488:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d052      	beq.n	8003536 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	e327      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d032      	beq.n	8003502 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800349c:	4b43      	ldr	r3, [pc, #268]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a42      	ldr	r2, [pc, #264]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034a8:	f7fd ff44 	bl	8001334 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034b0:	f7fd ff40 	bl	8001334 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e310      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034c2:	4b3a      	ldr	r3, [pc, #232]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ce:	4b37      	ldr	r3, [pc, #220]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a36      	ldr	r2, [pc, #216]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80034d4:	f043 0308 	orr.w	r3, r3, #8
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	4b34      	ldr	r3, [pc, #208]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	4931      	ldr	r1, [pc, #196]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ec:	4b2f      	ldr	r3, [pc, #188]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	492c      	ldr	r1, [pc, #176]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
 8003500:	e01a      	b.n	8003538 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003502:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a29      	ldr	r2, [pc, #164]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800350e:	f7fd ff11 	bl	8001334 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003516:	f7fd ff0d 	bl	8001334 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e2dd      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003528:	4b20      	ldr	r3, [pc, #128]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x1da>
 8003534:	e000      	b.n	8003538 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003536:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d074      	beq.n	800362e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	2b08      	cmp	r3, #8
 8003548:	d005      	beq.n	8003556 <HAL_RCC_OscConfig+0x21a>
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	2b0c      	cmp	r3, #12
 800354e:	d10e      	bne.n	800356e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b03      	cmp	r3, #3
 8003554:	d10b      	bne.n	800356e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003556:	4b15      	ldr	r3, [pc, #84]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d064      	beq.n	800362c <HAL_RCC_OscConfig+0x2f0>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d160      	bne.n	800362c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e2ba      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003576:	d106      	bne.n	8003586 <HAL_RCC_OscConfig+0x24a>
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a0b      	ldr	r2, [pc, #44]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 800357e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	e026      	b.n	80035d4 <HAL_RCC_OscConfig+0x298>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800358e:	d115      	bne.n	80035bc <HAL_RCC_OscConfig+0x280>
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a05      	ldr	r2, [pc, #20]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 8003596:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a02      	ldr	r2, [pc, #8]	; (80035ac <HAL_RCC_OscConfig+0x270>)
 80035a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	e014      	b.n	80035d4 <HAL_RCC_OscConfig+0x298>
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000
 80035b0:	08007018 	.word	0x08007018
 80035b4:	2000001c 	.word	0x2000001c
 80035b8:	20000020 	.word	0x20000020
 80035bc:	4ba0      	ldr	r3, [pc, #640]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a9f      	ldr	r2, [pc, #636]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 80035c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	4b9d      	ldr	r3, [pc, #628]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a9c      	ldr	r2, [pc, #624]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 80035ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d013      	beq.n	8003604 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fd feaa 	bl	8001334 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e4:	f7fd fea6 	bl	8001334 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	; 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e276      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f6:	4b92      	ldr	r3, [pc, #584]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x2a8>
 8003602:	e014      	b.n	800362e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fd fe96 	bl	8001334 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800360c:	f7fd fe92 	bl	8001334 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	; 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e262      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800361e:	4b88      	ldr	r3, [pc, #544]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x2d0>
 800362a:	e000      	b.n	800362e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d060      	beq.n	80036fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b04      	cmp	r3, #4
 800363e:	d005      	beq.n	800364c <HAL_RCC_OscConfig+0x310>
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2b0c      	cmp	r3, #12
 8003644:	d119      	bne.n	800367a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d116      	bne.n	800367a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800364c:	4b7c      	ldr	r3, [pc, #496]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_OscConfig+0x328>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e23f      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003664:	4b76      	ldr	r3, [pc, #472]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	061b      	lsls	r3, r3, #24
 8003672:	4973      	ldr	r1, [pc, #460]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 8003674:	4313      	orrs	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003678:	e040      	b.n	80036fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d023      	beq.n	80036ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003682:	4b6f      	ldr	r3, [pc, #444]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a6e      	ldr	r2, [pc, #440]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 8003688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368e:	f7fd fe51 	bl	8001334 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003696:	f7fd fe4d 	bl	8001334 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e21d      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a8:	4b65      	ldr	r3, [pc, #404]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b4:	4b62      	ldr	r3, [pc, #392]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	061b      	lsls	r3, r3, #24
 80036c2:	495f      	ldr	r1, [pc, #380]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
 80036c8:	e018      	b.n	80036fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ca:	4b5d      	ldr	r3, [pc, #372]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a5c      	ldr	r2, [pc, #368]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 80036d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7fd fe2d 	bl	8001334 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036de:	f7fd fe29 	bl	8001334 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e1f9      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036f0:	4b53      	ldr	r3, [pc, #332]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f0      	bne.n	80036de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d03c      	beq.n	8003782 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01c      	beq.n	800374a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003710:	4b4b      	ldr	r3, [pc, #300]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 8003712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003716:	4a4a      	ldr	r2, [pc, #296]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fd fe08 	bl	8001334 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003728:	f7fd fe04 	bl	8001334 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e1d4      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800373a:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 800373c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0ef      	beq.n	8003728 <HAL_RCC_OscConfig+0x3ec>
 8003748:	e01b      	b.n	8003782 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800374a:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 800374c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003750:	4a3b      	ldr	r2, [pc, #236]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 8003752:	f023 0301 	bic.w	r3, r3, #1
 8003756:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375a:	f7fd fdeb 	bl	8001334 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003762:	f7fd fde7 	bl	8001334 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e1b7      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003774:	4b32      	ldr	r3, [pc, #200]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 8003776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1ef      	bne.n	8003762 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80a6 	beq.w	80038dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003790:	2300      	movs	r3, #0
 8003792:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003794:	4b2a      	ldr	r3, [pc, #168]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10d      	bne.n	80037bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a0:	4b27      	ldr	r3, [pc, #156]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 80037a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a4:	4a26      	ldr	r2, [pc, #152]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 80037a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037aa:	6593      	str	r3, [r2, #88]	; 0x58
 80037ac:	4b24      	ldr	r3, [pc, #144]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 80037ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b8:	2301      	movs	r3, #1
 80037ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037bc:	4b21      	ldr	r3, [pc, #132]	; (8003844 <HAL_RCC_OscConfig+0x508>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d118      	bne.n	80037fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037c8:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <HAL_RCC_OscConfig+0x508>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a1d      	ldr	r2, [pc, #116]	; (8003844 <HAL_RCC_OscConfig+0x508>)
 80037ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d4:	f7fd fdae 	bl	8001334 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037dc:	f7fd fdaa 	bl	8001334 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e17a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ee:	4b15      	ldr	r3, [pc, #84]	; (8003844 <HAL_RCC_OscConfig+0x508>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d108      	bne.n	8003814 <HAL_RCC_OscConfig+0x4d8>
 8003802:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 8003804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003808:	4a0d      	ldr	r2, [pc, #52]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 800380a:	f043 0301 	orr.w	r3, r3, #1
 800380e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003812:	e029      	b.n	8003868 <HAL_RCC_OscConfig+0x52c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b05      	cmp	r3, #5
 800381a:	d115      	bne.n	8003848 <HAL_RCC_OscConfig+0x50c>
 800381c:	4b08      	ldr	r3, [pc, #32]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	4a07      	ldr	r2, [pc, #28]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 8003824:	f043 0304 	orr.w	r3, r3, #4
 8003828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800382c:	4b04      	ldr	r3, [pc, #16]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	4a03      	ldr	r2, [pc, #12]	; (8003840 <HAL_RCC_OscConfig+0x504>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800383c:	e014      	b.n	8003868 <HAL_RCC_OscConfig+0x52c>
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
 8003844:	40007000 	.word	0x40007000
 8003848:	4b9c      	ldr	r3, [pc, #624]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	4a9b      	ldr	r2, [pc, #620]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003858:	4b98      	ldr	r3, [pc, #608]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385e:	4a97      	ldr	r2, [pc, #604]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 8003860:	f023 0304 	bic.w	r3, r3, #4
 8003864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d016      	beq.n	800389e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003870:	f7fd fd60 	bl	8001334 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003876:	e00a      	b.n	800388e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003878:	f7fd fd5c 	bl	8001334 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	; 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e12a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800388e:	4b8b      	ldr	r3, [pc, #556]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0ed      	beq.n	8003878 <HAL_RCC_OscConfig+0x53c>
 800389c:	e015      	b.n	80038ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389e:	f7fd fd49 	bl	8001334 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038a4:	e00a      	b.n	80038bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fd fd45 	bl	8001334 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e113      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038bc:	4b7f      	ldr	r3, [pc, #508]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1ed      	bne.n	80038a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ca:	7ffb      	ldrb	r3, [r7, #31]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d105      	bne.n	80038dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d0:	4b7a      	ldr	r3, [pc, #488]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	4a79      	ldr	r2, [pc, #484]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 80038d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80fe 	beq.w	8003ae2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	f040 80d0 	bne.w	8003a90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038f0:	4b72      	ldr	r3, [pc, #456]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f003 0203 	and.w	r2, r3, #3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	429a      	cmp	r2, r3
 8003902:	d130      	bne.n	8003966 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	3b01      	subs	r3, #1
 8003910:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003912:	429a      	cmp	r2, r3
 8003914:	d127      	bne.n	8003966 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003920:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003922:	429a      	cmp	r2, r3
 8003924:	d11f      	bne.n	8003966 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003930:	2a07      	cmp	r2, #7
 8003932:	bf14      	ite	ne
 8003934:	2201      	movne	r2, #1
 8003936:	2200      	moveq	r2, #0
 8003938:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800393a:	4293      	cmp	r3, r2
 800393c:	d113      	bne.n	8003966 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	085b      	lsrs	r3, r3, #1
 800394a:	3b01      	subs	r3, #1
 800394c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800394e:	429a      	cmp	r2, r3
 8003950:	d109      	bne.n	8003966 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	085b      	lsrs	r3, r3, #1
 800395e:	3b01      	subs	r3, #1
 8003960:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d06e      	beq.n	8003a44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2b0c      	cmp	r3, #12
 800396a:	d069      	beq.n	8003a40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800396c:	4b53      	ldr	r3, [pc, #332]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003978:	4b50      	ldr	r3, [pc, #320]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0ad      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003988:	4b4c      	ldr	r3, [pc, #304]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a4b      	ldr	r2, [pc, #300]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 800398e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003992:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003994:	f7fd fcce 	bl	8001334 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399c:	f7fd fcca 	bl	8001334 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e09a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ae:	4b43      	ldr	r3, [pc, #268]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039ba:	4b40      	ldr	r3, [pc, #256]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	4b40      	ldr	r3, [pc, #256]	; (8003ac0 <HAL_RCC_OscConfig+0x784>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039ca:	3a01      	subs	r2, #1
 80039cc:	0112      	lsls	r2, r2, #4
 80039ce:	4311      	orrs	r1, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039d4:	0212      	lsls	r2, r2, #8
 80039d6:	4311      	orrs	r1, r2
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039dc:	0852      	lsrs	r2, r2, #1
 80039de:	3a01      	subs	r2, #1
 80039e0:	0552      	lsls	r2, r2, #21
 80039e2:	4311      	orrs	r1, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039e8:	0852      	lsrs	r2, r2, #1
 80039ea:	3a01      	subs	r2, #1
 80039ec:	0652      	lsls	r2, r2, #25
 80039ee:	4311      	orrs	r1, r2
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039f4:	0912      	lsrs	r2, r2, #4
 80039f6:	0452      	lsls	r2, r2, #17
 80039f8:	430a      	orrs	r2, r1
 80039fa:	4930      	ldr	r1, [pc, #192]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a00:	4b2e      	ldr	r3, [pc, #184]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a2d      	ldr	r2, [pc, #180]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 8003a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a0c:	4b2b      	ldr	r3, [pc, #172]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	4a2a      	ldr	r2, [pc, #168]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 8003a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a18:	f7fd fc8c 	bl	8001334 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a20:	f7fd fc88 	bl	8001334 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e058      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a32:	4b22      	ldr	r3, [pc, #136]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a3e:	e050      	b.n	8003ae2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e04f      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a44:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d148      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a19      	ldr	r2, [pc, #100]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 8003a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a5c:	4b17      	ldr	r3, [pc, #92]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4a16      	ldr	r2, [pc, #88]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 8003a62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a68:	f7fd fc64 	bl	8001334 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fd fc60 	bl	8001334 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e030      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a82:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0x734>
 8003a8e:	e028      	b.n	8003ae2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b0c      	cmp	r3, #12
 8003a94:	d023      	beq.n	8003ade <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a08      	ldr	r2, [pc, #32]	; (8003abc <HAL_RCC_OscConfig+0x780>)
 8003a9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa2:	f7fd fc47 	bl	8001334 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa8:	e00c      	b.n	8003ac4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aaa:	f7fd fc43 	bl	8001334 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d905      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e013      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac4:	4b09      	ldr	r3, [pc, #36]	; (8003aec <HAL_RCC_OscConfig+0x7b0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ec      	bne.n	8003aaa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_RCC_OscConfig+0x7b0>)
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	4905      	ldr	r1, [pc, #20]	; (8003aec <HAL_RCC_OscConfig+0x7b0>)
 8003ad6:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <HAL_RCC_OscConfig+0x7b4>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	60cb      	str	r3, [r1, #12]
 8003adc:	e001      	b.n	8003ae2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3720      	adds	r7, #32
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40021000 	.word	0x40021000
 8003af0:	feeefffc 	.word	0xfeeefffc

08003af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0e7      	b.n	8003cd8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b08:	4b75      	ldr	r3, [pc, #468]	; (8003ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d910      	bls.n	8003b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b72      	ldr	r3, [pc, #456]	; (8003ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 0207 	bic.w	r2, r3, #7
 8003b1e:	4970      	ldr	r1, [pc, #448]	; (8003ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b26:	4b6e      	ldr	r3, [pc, #440]	; (8003ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0cf      	b.n	8003cd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d010      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	4b66      	ldr	r3, [pc, #408]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d908      	bls.n	8003b66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b54:	4b63      	ldr	r3, [pc, #396]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	4960      	ldr	r1, [pc, #384]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d04c      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d107      	bne.n	8003b8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b7a:	4b5a      	ldr	r3, [pc, #360]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d121      	bne.n	8003bca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e0a6      	b.n	8003cd8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b92:	4b54      	ldr	r3, [pc, #336]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d115      	bne.n	8003bca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e09a      	b.n	8003cd8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003baa:	4b4e      	ldr	r3, [pc, #312]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e08e      	b.n	8003cd8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bba:	4b4a      	ldr	r3, [pc, #296]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e086      	b.n	8003cd8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bca:	4b46      	ldr	r3, [pc, #280]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f023 0203 	bic.w	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	4943      	ldr	r1, [pc, #268]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bdc:	f7fd fbaa 	bl	8001334 <HAL_GetTick>
 8003be0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be2:	e00a      	b.n	8003bfa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be4:	f7fd fba6 	bl	8001334 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e06e      	b.n	8003cd8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	4b3a      	ldr	r3, [pc, #232]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 020c 	and.w	r2, r3, #12
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d1eb      	bne.n	8003be4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d010      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	4b31      	ldr	r3, [pc, #196]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d208      	bcs.n	8003c3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c28:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	492b      	ldr	r1, [pc, #172]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c3a:	4b29      	ldr	r3, [pc, #164]	; (8003ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d210      	bcs.n	8003c6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c48:	4b25      	ldr	r3, [pc, #148]	; (8003ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f023 0207 	bic.w	r2, r3, #7
 8003c50:	4923      	ldr	r1, [pc, #140]	; (8003ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c58:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d001      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e036      	b.n	8003cd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c76:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	4918      	ldr	r1, [pc, #96]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d009      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4910      	ldr	r1, [pc, #64]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ca8:	f000 f824 	bl	8003cf4 <HAL_RCC_GetSysClockFreq>
 8003cac:	4602      	mov	r2, r0
 8003cae:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	091b      	lsrs	r3, r3, #4
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	490b      	ldr	r1, [pc, #44]	; (8003ce8 <HAL_RCC_ClockConfig+0x1f4>)
 8003cba:	5ccb      	ldrb	r3, [r1, r3]
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc4:	4a09      	ldr	r2, [pc, #36]	; (8003cec <HAL_RCC_ClockConfig+0x1f8>)
 8003cc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cc8:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <HAL_RCC_ClockConfig+0x1fc>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fd fae1 	bl	8001294 <HAL_InitTick>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003cd6:	7afb      	ldrb	r3, [r7, #11]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40022000 	.word	0x40022000
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	08007018 	.word	0x08007018
 8003cec:	2000001c 	.word	0x2000001c
 8003cf0:	20000020 	.word	0x20000020

08003cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b089      	sub	sp, #36	; 0x24
 8003cf8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d02:	4b3e      	ldr	r3, [pc, #248]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d0c:	4b3b      	ldr	r3, [pc, #236]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x34>
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b0c      	cmp	r3, #12
 8003d20:	d121      	bne.n	8003d66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d11e      	bne.n	8003d66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d28:	4b34      	ldr	r3, [pc, #208]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d34:	4b31      	ldr	r3, [pc, #196]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3a:	0a1b      	lsrs	r3, r3, #8
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	61fb      	str	r3, [r7, #28]
 8003d42:	e005      	b.n	8003d50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d44:	4b2d      	ldr	r3, [pc, #180]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d50:	4a2b      	ldr	r2, [pc, #172]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10d      	bne.n	8003d7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d64:	e00a      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d102      	bne.n	8003d72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d6c:	4b25      	ldr	r3, [pc, #148]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	e004      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d101      	bne.n	8003d7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d78:	4b23      	ldr	r3, [pc, #140]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	2b0c      	cmp	r3, #12
 8003d80:	d134      	bne.n	8003dec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d82:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d003      	beq.n	8003d9a <HAL_RCC_GetSysClockFreq+0xa6>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d003      	beq.n	8003da0 <HAL_RCC_GetSysClockFreq+0xac>
 8003d98:	e005      	b.n	8003da6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d9a:	4b1a      	ldr	r3, [pc, #104]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d9c:	617b      	str	r3, [r7, #20]
      break;
 8003d9e:	e005      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003da0:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x114>)
 8003da2:	617b      	str	r3, [r7, #20]
      break;
 8003da4:	e002      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	617b      	str	r3, [r7, #20]
      break;
 8003daa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dac:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	091b      	lsrs	r3, r3, #4
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	3301      	adds	r3, #1
 8003db8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dba:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	0a1b      	lsrs	r3, r3, #8
 8003dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	fb03 f202 	mul.w	r2, r3, r2
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	0e5b      	lsrs	r3, r3, #25
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	3301      	adds	r3, #1
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dec:	69bb      	ldr	r3, [r7, #24]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3724      	adds	r7, #36	; 0x24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	08007028 	.word	0x08007028
 8003e04:	00f42400 	.word	0x00f42400
 8003e08:	007a1200 	.word	0x007a1200

08003e0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e18:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e24:	f7ff fa26 	bl	8003274 <HAL_PWREx_GetVoltageRange>
 8003e28:	6178      	str	r0, [r7, #20]
 8003e2a:	e014      	b.n	8003e56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e2c:	4b25      	ldr	r3, [pc, #148]	; (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e30:	4a24      	ldr	r2, [pc, #144]	; (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e36:	6593      	str	r3, [r2, #88]	; 0x58
 8003e38:	4b22      	ldr	r3, [pc, #136]	; (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e44:	f7ff fa16 	bl	8003274 <HAL_PWREx_GetVoltageRange>
 8003e48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	4a1d      	ldr	r2, [pc, #116]	; (8003ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e5c:	d10b      	bne.n	8003e76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b80      	cmp	r3, #128	; 0x80
 8003e62:	d919      	bls.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2ba0      	cmp	r3, #160	; 0xa0
 8003e68:	d902      	bls.n	8003e70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	e013      	b.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e70:	2301      	movs	r3, #1
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	e010      	b.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b80      	cmp	r3, #128	; 0x80
 8003e7a:	d902      	bls.n	8003e82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	e00a      	b.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b80      	cmp	r3, #128	; 0x80
 8003e86:	d102      	bne.n	8003e8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e88:	2302      	movs	r3, #2
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	e004      	b.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b70      	cmp	r3, #112	; 0x70
 8003e92:	d101      	bne.n	8003e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e94:	2301      	movs	r3, #1
 8003e96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e98:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f023 0207 	bic.w	r2, r3, #7
 8003ea0:	4909      	ldr	r1, [pc, #36]	; (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ea8:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d001      	beq.n	8003eba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40022000 	.word	0x40022000

08003ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ed8:	2300      	movs	r3, #0
 8003eda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d041      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ef0:	d02a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ef2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ef6:	d824      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ef8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003efc:	d008      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003efe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f02:	d81e      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f0c:	d010      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f0e:	e018      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f10:	4b86      	ldr	r3, [pc, #536]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4a85      	ldr	r2, [pc, #532]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f1c:	e015      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3304      	adds	r3, #4
 8003f22:	2100      	movs	r1, #0
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fabb 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f2e:	e00c      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3320      	adds	r3, #32
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fba6 	bl	8004688 <RCCEx_PLLSAI2_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f40:	e003      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	74fb      	strb	r3, [r7, #19]
      break;
 8003f46:	e000      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4a:	7cfb      	ldrb	r3, [r7, #19]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f50:	4b76      	ldr	r3, [pc, #472]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f5e:	4973      	ldr	r1, [pc, #460]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f66:	e001      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f68:	7cfb      	ldrb	r3, [r7, #19]
 8003f6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d041      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f80:	d02a      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f86:	d824      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f8c:	d008      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f92:	d81e      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f9c:	d010      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f9e:	e018      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fa0:	4b62      	ldr	r3, [pc, #392]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4a61      	ldr	r2, [pc, #388]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003faa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fac:	e015      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fa73 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fbe:	e00c      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3320      	adds	r3, #32
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fb5e 	bl	8004688 <RCCEx_PLLSAI2_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fd0:	e003      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	74fb      	strb	r3, [r7, #19]
      break;
 8003fd6:	e000      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fe0:	4b52      	ldr	r3, [pc, #328]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fee:	494f      	ldr	r1, [pc, #316]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ff6:	e001      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80a0 	beq.w	800414a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800400e:	4b47      	ldr	r3, [pc, #284]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800401e:	2300      	movs	r3, #0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00d      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004024:	4b41      	ldr	r3, [pc, #260]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004028:	4a40      	ldr	r2, [pc, #256]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800402e:	6593      	str	r3, [r2, #88]	; 0x58
 8004030:	4b3e      	ldr	r3, [pc, #248]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800403c:	2301      	movs	r3, #1
 800403e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004040:	4b3b      	ldr	r3, [pc, #236]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a3a      	ldr	r2, [pc, #232]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800404c:	f7fd f972 	bl	8001334 <HAL_GetTick>
 8004050:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004052:	e009      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004054:	f7fd f96e 	bl	8001334 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d902      	bls.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	74fb      	strb	r3, [r7, #19]
        break;
 8004066:	e005      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004068:	4b31      	ldr	r3, [pc, #196]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0ef      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d15c      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800407a:	4b2c      	ldr	r3, [pc, #176]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004084:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01f      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	429a      	cmp	r2, r3
 8004096:	d019      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004098:	4b24      	ldr	r3, [pc, #144]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040a4:	4b21      	ldr	r3, [pc, #132]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	4a20      	ldr	r2, [pc, #128]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040b4:	4b1d      	ldr	r3, [pc, #116]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ba:	4a1c      	ldr	r2, [pc, #112]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040c4:	4a19      	ldr	r2, [pc, #100]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d016      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d6:	f7fd f92d 	bl	8001334 <HAL_GetTick>
 80040da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040dc:	e00b      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7fd f929 	bl	8001334 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d902      	bls.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	74fb      	strb	r3, [r7, #19]
            break;
 80040f4:	e006      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ec      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004104:	7cfb      	ldrb	r3, [r7, #19]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10c      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800411a:	4904      	ldr	r1, [pc, #16]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004122:	e009      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004124:	7cfb      	ldrb	r3, [r7, #19]
 8004126:	74bb      	strb	r3, [r7, #18]
 8004128:	e006      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004138:	7c7b      	ldrb	r3, [r7, #17]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d105      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413e:	4b9e      	ldr	r3, [pc, #632]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	4a9d      	ldr	r2, [pc, #628]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004148:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004156:	4b98      	ldr	r3, [pc, #608]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415c:	f023 0203 	bic.w	r2, r3, #3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	4994      	ldr	r1, [pc, #592]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004178:	4b8f      	ldr	r3, [pc, #572]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f023 020c 	bic.w	r2, r3, #12
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	498c      	ldr	r1, [pc, #560]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800419a:	4b87      	ldr	r3, [pc, #540]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	4983      	ldr	r1, [pc, #524]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041bc:	4b7e      	ldr	r3, [pc, #504]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	497b      	ldr	r1, [pc, #492]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041de:	4b76      	ldr	r3, [pc, #472]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ec:	4972      	ldr	r1, [pc, #456]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004200:	4b6d      	ldr	r3, [pc, #436]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420e:	496a      	ldr	r1, [pc, #424]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004222:	4b65      	ldr	r3, [pc, #404]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004230:	4961      	ldr	r1, [pc, #388]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004244:	4b5c      	ldr	r3, [pc, #368]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004252:	4959      	ldr	r1, [pc, #356]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004266:	4b54      	ldr	r3, [pc, #336]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004274:	4950      	ldr	r1, [pc, #320]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004288:	4b4b      	ldr	r3, [pc, #300]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004296:	4948      	ldr	r1, [pc, #288]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042aa:	4b43      	ldr	r3, [pc, #268]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b8:	493f      	ldr	r1, [pc, #252]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d028      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042cc:	4b3a      	ldr	r3, [pc, #232]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042da:	4937      	ldr	r1, [pc, #220]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ea:	d106      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ec:	4b32      	ldr	r3, [pc, #200]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4a31      	ldr	r2, [pc, #196]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042f6:	60d3      	str	r3, [r2, #12]
 80042f8:	e011      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004302:	d10c      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3304      	adds	r3, #4
 8004308:	2101      	movs	r1, #1
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f8c8 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004314:	7cfb      	ldrb	r3, [r7, #19]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800431a:	7cfb      	ldrb	r3, [r7, #19]
 800431c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d028      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800432a:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004330:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	491f      	ldr	r1, [pc, #124]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004348:	d106      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800434a:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	4a1a      	ldr	r2, [pc, #104]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004354:	60d3      	str	r3, [r2, #12]
 8004356:	e011      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004360:	d10c      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3304      	adds	r3, #4
 8004366:	2101      	movs	r1, #1
 8004368:	4618      	mov	r0, r3
 800436a:	f000 f899 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 800436e:	4603      	mov	r3, r0
 8004370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004372:	7cfb      	ldrb	r3, [r7, #19]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004378:	7cfb      	ldrb	r3, [r7, #19]
 800437a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d02b      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004388:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004396:	4908      	ldr	r1, [pc, #32]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043a6:	d109      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043a8:	4b03      	ldr	r3, [pc, #12]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4a02      	ldr	r2, [pc, #8]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043b2:	60d3      	str	r3, [r2, #12]
 80043b4:	e014      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043c4:	d10c      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3304      	adds	r3, #4
 80043ca:	2101      	movs	r1, #1
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 f867 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 80043d2:	4603      	mov	r3, r0
 80043d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043d6:	7cfb      	ldrb	r3, [r7, #19]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80043dc:	7cfb      	ldrb	r3, [r7, #19]
 80043de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d02f      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043ec:	4b2b      	ldr	r3, [pc, #172]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043fa:	4928      	ldr	r1, [pc, #160]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800440a:	d10d      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	2102      	movs	r1, #2
 8004412:	4618      	mov	r0, r3
 8004414:	f000 f844 	bl	80044a0 <RCCEx_PLLSAI1_Config>
 8004418:	4603      	mov	r3, r0
 800441a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800441c:	7cfb      	ldrb	r3, [r7, #19]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d014      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004422:	7cfb      	ldrb	r3, [r7, #19]
 8004424:	74bb      	strb	r3, [r7, #18]
 8004426:	e011      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800442c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004430:	d10c      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3320      	adds	r3, #32
 8004436:	2102      	movs	r1, #2
 8004438:	4618      	mov	r0, r3
 800443a:	f000 f925 	bl	8004688 <RCCEx_PLLSAI2_Config>
 800443e:	4603      	mov	r3, r0
 8004440:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004442:	7cfb      	ldrb	r3, [r7, #19]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004448:	7cfb      	ldrb	r3, [r7, #19]
 800444a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004458:	4b10      	ldr	r3, [pc, #64]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004466:	490d      	ldr	r1, [pc, #52]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00b      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004480:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800448a:	4904      	ldr	r1, [pc, #16]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004492:	7cbb      	ldrb	r3, [r7, #18]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000

080044a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ae:	4b75      	ldr	r3, [pc, #468]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d018      	beq.n	80044ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044ba:	4b72      	ldr	r3, [pc, #456]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f003 0203 	and.w	r2, r3, #3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d10d      	bne.n	80044e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
       ||
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044d2:	4b6c      	ldr	r3, [pc, #432]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	091b      	lsrs	r3, r3, #4
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
       ||
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d047      	beq.n	8004576 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	73fb      	strb	r3, [r7, #15]
 80044ea:	e044      	b.n	8004576 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d018      	beq.n	8004526 <RCCEx_PLLSAI1_Config+0x86>
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d825      	bhi.n	8004544 <RCCEx_PLLSAI1_Config+0xa4>
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d002      	beq.n	8004502 <RCCEx_PLLSAI1_Config+0x62>
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d009      	beq.n	8004514 <RCCEx_PLLSAI1_Config+0x74>
 8004500:	e020      	b.n	8004544 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004502:	4b60      	ldr	r3, [pc, #384]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d11d      	bne.n	800454a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004512:	e01a      	b.n	800454a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004514:	4b5b      	ldr	r3, [pc, #364]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451c:	2b00      	cmp	r3, #0
 800451e:	d116      	bne.n	800454e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004524:	e013      	b.n	800454e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004526:	4b57      	ldr	r3, [pc, #348]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10f      	bne.n	8004552 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004532:	4b54      	ldr	r3, [pc, #336]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004542:	e006      	b.n	8004552 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
      break;
 8004548:	e004      	b.n	8004554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800454a:	bf00      	nop
 800454c:	e002      	b.n	8004554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800454e:	bf00      	nop
 8004550:	e000      	b.n	8004554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004552:	bf00      	nop
    }

    if(status == HAL_OK)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10d      	bne.n	8004576 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800455a:	4b4a      	ldr	r3, [pc, #296]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6819      	ldr	r1, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	3b01      	subs	r3, #1
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	430b      	orrs	r3, r1
 8004570:	4944      	ldr	r1, [pc, #272]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d17d      	bne.n	8004678 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800457c:	4b41      	ldr	r3, [pc, #260]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a40      	ldr	r2, [pc, #256]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004582:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004588:	f7fc fed4 	bl	8001334 <HAL_GetTick>
 800458c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800458e:	e009      	b.n	80045a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004590:	f7fc fed0 	bl	8001334 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d902      	bls.n	80045a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	73fb      	strb	r3, [r7, #15]
        break;
 80045a2:	e005      	b.n	80045b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045a4:	4b37      	ldr	r3, [pc, #220]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1ef      	bne.n	8004590 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d160      	bne.n	8004678 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d111      	bne.n	80045e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045bc:	4b31      	ldr	r3, [pc, #196]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6892      	ldr	r2, [r2, #8]
 80045cc:	0211      	lsls	r1, r2, #8
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	68d2      	ldr	r2, [r2, #12]
 80045d2:	0912      	lsrs	r2, r2, #4
 80045d4:	0452      	lsls	r2, r2, #17
 80045d6:	430a      	orrs	r2, r1
 80045d8:	492a      	ldr	r1, [pc, #168]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	610b      	str	r3, [r1, #16]
 80045de:	e027      	b.n	8004630 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d112      	bne.n	800460c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045e6:	4b27      	ldr	r3, [pc, #156]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6892      	ldr	r2, [r2, #8]
 80045f6:	0211      	lsls	r1, r2, #8
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6912      	ldr	r2, [r2, #16]
 80045fc:	0852      	lsrs	r2, r2, #1
 80045fe:	3a01      	subs	r2, #1
 8004600:	0552      	lsls	r2, r2, #21
 8004602:	430a      	orrs	r2, r1
 8004604:	491f      	ldr	r1, [pc, #124]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004606:	4313      	orrs	r3, r2
 8004608:	610b      	str	r3, [r1, #16]
 800460a:	e011      	b.n	8004630 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800460c:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004614:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6892      	ldr	r2, [r2, #8]
 800461c:	0211      	lsls	r1, r2, #8
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6952      	ldr	r2, [r2, #20]
 8004622:	0852      	lsrs	r2, r2, #1
 8004624:	3a01      	subs	r2, #1
 8004626:	0652      	lsls	r2, r2, #25
 8004628:	430a      	orrs	r2, r1
 800462a:	4916      	ldr	r1, [pc, #88]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a13      	ldr	r2, [pc, #76]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004636:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800463a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463c:	f7fc fe7a 	bl	8001334 <HAL_GetTick>
 8004640:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004642:	e009      	b.n	8004658 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004644:	f7fc fe76 	bl	8001334 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d902      	bls.n	8004658 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	73fb      	strb	r3, [r7, #15]
          break;
 8004656:	e005      	b.n	8004664 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ef      	beq.n	8004644 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	4904      	ldr	r1, [pc, #16]	; (8004684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004674:	4313      	orrs	r3, r2
 8004676:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000

08004688 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004696:	4b6a      	ldr	r3, [pc, #424]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d018      	beq.n	80046d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046a2:	4b67      	ldr	r3, [pc, #412]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 0203 	and.w	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d10d      	bne.n	80046ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
       ||
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046ba:	4b61      	ldr	r3, [pc, #388]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	091b      	lsrs	r3, r3, #4
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
       ||
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d047      	beq.n	800475e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	73fb      	strb	r3, [r7, #15]
 80046d2:	e044      	b.n	800475e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d018      	beq.n	800470e <RCCEx_PLLSAI2_Config+0x86>
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d825      	bhi.n	800472c <RCCEx_PLLSAI2_Config+0xa4>
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d002      	beq.n	80046ea <RCCEx_PLLSAI2_Config+0x62>
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d009      	beq.n	80046fc <RCCEx_PLLSAI2_Config+0x74>
 80046e8:	e020      	b.n	800472c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046ea:	4b55      	ldr	r3, [pc, #340]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d11d      	bne.n	8004732 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046fa:	e01a      	b.n	8004732 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046fc:	4b50      	ldr	r3, [pc, #320]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004704:	2b00      	cmp	r3, #0
 8004706:	d116      	bne.n	8004736 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800470c:	e013      	b.n	8004736 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800470e:	4b4c      	ldr	r3, [pc, #304]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10f      	bne.n	800473a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800471a:	4b49      	ldr	r3, [pc, #292]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d109      	bne.n	800473a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800472a:	e006      	b.n	800473a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
      break;
 8004730:	e004      	b.n	800473c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004732:	bf00      	nop
 8004734:	e002      	b.n	800473c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004736:	bf00      	nop
 8004738:	e000      	b.n	800473c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800473a:	bf00      	nop
    }

    if(status == HAL_OK)
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10d      	bne.n	800475e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004742:	4b3f      	ldr	r3, [pc, #252]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6819      	ldr	r1, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	3b01      	subs	r3, #1
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	430b      	orrs	r3, r1
 8004758:	4939      	ldr	r1, [pc, #228]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800475a:	4313      	orrs	r3, r2
 800475c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d167      	bne.n	8004834 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004764:	4b36      	ldr	r3, [pc, #216]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a35      	ldr	r2, [pc, #212]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800476a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800476e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004770:	f7fc fde0 	bl	8001334 <HAL_GetTick>
 8004774:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004776:	e009      	b.n	800478c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004778:	f7fc fddc 	bl	8001334 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d902      	bls.n	800478c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	73fb      	strb	r3, [r7, #15]
        break;
 800478a:	e005      	b.n	8004798 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800478c:	4b2c      	ldr	r3, [pc, #176]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1ef      	bne.n	8004778 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d14a      	bne.n	8004834 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d111      	bne.n	80047c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047a4:	4b26      	ldr	r3, [pc, #152]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6892      	ldr	r2, [r2, #8]
 80047b4:	0211      	lsls	r1, r2, #8
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68d2      	ldr	r2, [r2, #12]
 80047ba:	0912      	lsrs	r2, r2, #4
 80047bc:	0452      	lsls	r2, r2, #17
 80047be:	430a      	orrs	r2, r1
 80047c0:	491f      	ldr	r1, [pc, #124]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	614b      	str	r3, [r1, #20]
 80047c6:	e011      	b.n	80047ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047c8:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6892      	ldr	r2, [r2, #8]
 80047d8:	0211      	lsls	r1, r2, #8
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6912      	ldr	r2, [r2, #16]
 80047de:	0852      	lsrs	r2, r2, #1
 80047e0:	3a01      	subs	r2, #1
 80047e2:	0652      	lsls	r2, r2, #25
 80047e4:	430a      	orrs	r2, r1
 80047e6:	4916      	ldr	r1, [pc, #88]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047ec:	4b14      	ldr	r3, [pc, #80]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a13      	ldr	r2, [pc, #76]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f8:	f7fc fd9c 	bl	8001334 <HAL_GetTick>
 80047fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047fe:	e009      	b.n	8004814 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004800:	f7fc fd98 	bl	8001334 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d902      	bls.n	8004814 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	73fb      	strb	r3, [r7, #15]
          break;
 8004812:	e005      	b.n	8004820 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004814:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0ef      	beq.n	8004800 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004826:	4b06      	ldr	r3, [pc, #24]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	4904      	ldr	r1, [pc, #16]	; (8004840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004830:	4313      	orrs	r3, r2
 8004832:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004834:	7bfb      	ldrb	r3, [r7, #15]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000

08004844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b01      	cmp	r3, #1
 8004856:	d001      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e04f      	b.n	80048fc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a23      	ldr	r2, [pc, #140]	; (8004908 <HAL_TIM_Base_Start_IT+0xc4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d01d      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x76>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004886:	d018      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x76>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a1f      	ldr	r2, [pc, #124]	; (800490c <HAL_TIM_Base_Start_IT+0xc8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x76>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1e      	ldr	r2, [pc, #120]	; (8004910 <HAL_TIM_Base_Start_IT+0xcc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00e      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x76>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1c      	ldr	r2, [pc, #112]	; (8004914 <HAL_TIM_Base_Start_IT+0xd0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d009      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x76>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1b      	ldr	r2, [pc, #108]	; (8004918 <HAL_TIM_Base_Start_IT+0xd4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d004      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0x76>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a19      	ldr	r2, [pc, #100]	; (800491c <HAL_TIM_Base_Start_IT+0xd8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d115      	bne.n	80048e6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	4b17      	ldr	r3, [pc, #92]	; (8004920 <HAL_TIM_Base_Start_IT+0xdc>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b06      	cmp	r3, #6
 80048ca:	d015      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xb4>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d2:	d011      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e4:	e008      	b.n	80048f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0201 	orr.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	e000      	b.n	80048fa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40000400 	.word	0x40000400
 8004910:	40000800 	.word	0x40000800
 8004914:	40000c00 	.word	0x40000c00
 8004918:	40013400 	.word	0x40013400
 800491c:	40014000 	.word	0x40014000
 8004920:	00010007 	.word	0x00010007

08004924 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e049      	b.n	80049ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f841 	bl	80049d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3304      	adds	r3, #4
 8004960:	4619      	mov	r1, r3
 8004962:	4610      	mov	r0, r2
 8004964:	f000 fe24 	bl	80055b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d109      	bne.n	8004a0c <HAL_TIM_PWM_Start+0x24>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	bf14      	ite	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	2300      	moveq	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	e03c      	b.n	8004a86 <HAL_TIM_PWM_Start+0x9e>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d109      	bne.n	8004a26 <HAL_TIM_PWM_Start+0x3e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	bf14      	ite	ne
 8004a1e:	2301      	movne	r3, #1
 8004a20:	2300      	moveq	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	e02f      	b.n	8004a86 <HAL_TIM_PWM_Start+0x9e>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d109      	bne.n	8004a40 <HAL_TIM_PWM_Start+0x58>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	bf14      	ite	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	2300      	moveq	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	e022      	b.n	8004a86 <HAL_TIM_PWM_Start+0x9e>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b0c      	cmp	r3, #12
 8004a44:	d109      	bne.n	8004a5a <HAL_TIM_PWM_Start+0x72>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	bf14      	ite	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	2300      	moveq	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	e015      	b.n	8004a86 <HAL_TIM_PWM_Start+0x9e>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d109      	bne.n	8004a74 <HAL_TIM_PWM_Start+0x8c>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	bf14      	ite	ne
 8004a6c:	2301      	movne	r3, #1
 8004a6e:	2300      	moveq	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	e008      	b.n	8004a86 <HAL_TIM_PWM_Start+0x9e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	bf14      	ite	ne
 8004a80:	2301      	movne	r3, #1
 8004a82:	2300      	moveq	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e09c      	b.n	8004bc8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <HAL_TIM_PWM_Start+0xb6>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a9c:	e023      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xfe>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d104      	bne.n	8004aae <HAL_TIM_PWM_Start+0xc6>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aac:	e01b      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xfe>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d104      	bne.n	8004abe <HAL_TIM_PWM_Start+0xd6>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004abc:	e013      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xfe>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b0c      	cmp	r3, #12
 8004ac2:	d104      	bne.n	8004ace <HAL_TIM_PWM_Start+0xe6>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004acc:	e00b      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xfe>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	d104      	bne.n	8004ade <HAL_TIM_PWM_Start+0xf6>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004adc:	e003      	b.n	8004ae6 <HAL_TIM_PWM_Start+0xfe>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2201      	movs	r2, #1
 8004aec:	6839      	ldr	r1, [r7, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f001 f9f2 	bl	8005ed8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a35      	ldr	r2, [pc, #212]	; (8004bd0 <HAL_TIM_PWM_Start+0x1e8>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x13e>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a34      	ldr	r2, [pc, #208]	; (8004bd4 <HAL_TIM_PWM_Start+0x1ec>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00e      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x13e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a32      	ldr	r2, [pc, #200]	; (8004bd8 <HAL_TIM_PWM_Start+0x1f0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d009      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x13e>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a31      	ldr	r2, [pc, #196]	; (8004bdc <HAL_TIM_PWM_Start+0x1f4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d004      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x13e>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a2f      	ldr	r2, [pc, #188]	; (8004be0 <HAL_TIM_PWM_Start+0x1f8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d101      	bne.n	8004b2a <HAL_TIM_PWM_Start+0x142>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <HAL_TIM_PWM_Start+0x144>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b3e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a22      	ldr	r2, [pc, #136]	; (8004bd0 <HAL_TIM_PWM_Start+0x1e8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01d      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x19e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b52:	d018      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x19e>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a22      	ldr	r2, [pc, #136]	; (8004be4 <HAL_TIM_PWM_Start+0x1fc>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x19e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a21      	ldr	r2, [pc, #132]	; (8004be8 <HAL_TIM_PWM_Start+0x200>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00e      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x19e>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1f      	ldr	r2, [pc, #124]	; (8004bec <HAL_TIM_PWM_Start+0x204>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d009      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x19e>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a17      	ldr	r2, [pc, #92]	; (8004bd4 <HAL_TIM_PWM_Start+0x1ec>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d004      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x19e>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a15      	ldr	r2, [pc, #84]	; (8004bd8 <HAL_TIM_PWM_Start+0x1f0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d115      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	4b18      	ldr	r3, [pc, #96]	; (8004bf0 <HAL_TIM_PWM_Start+0x208>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b06      	cmp	r3, #6
 8004b96:	d015      	beq.n	8004bc4 <HAL_TIM_PWM_Start+0x1dc>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9e:	d011      	beq.n	8004bc4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb0:	e008      	b.n	8004bc4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0201 	orr.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	e000      	b.n	8004bc6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40012c00 	.word	0x40012c00
 8004bd4:	40013400 	.word	0x40013400
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	40014400 	.word	0x40014400
 8004be0:	40014800 	.word	0x40014800
 8004be4:	40000400 	.word	0x40000400
 8004be8:	40000800 	.word	0x40000800
 8004bec:	40000c00 	.word	0x40000c00
 8004bf0:	00010007 	.word	0x00010007

08004bf4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e049      	b.n	8004c9a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc f990 	bl	8000f40 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f000 fcbc 	bl	80055b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d104      	bne.n	8004cc2 <HAL_TIM_IC_Start_IT+0x1e>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	e023      	b.n	8004d0a <HAL_TIM_IC_Start_IT+0x66>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d104      	bne.n	8004cd2 <HAL_TIM_IC_Start_IT+0x2e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	e01b      	b.n	8004d0a <HAL_TIM_IC_Start_IT+0x66>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d104      	bne.n	8004ce2 <HAL_TIM_IC_Start_IT+0x3e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	e013      	b.n	8004d0a <HAL_TIM_IC_Start_IT+0x66>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b0c      	cmp	r3, #12
 8004ce6:	d104      	bne.n	8004cf2 <HAL_TIM_IC_Start_IT+0x4e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	e00b      	b.n	8004d0a <HAL_TIM_IC_Start_IT+0x66>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d104      	bne.n	8004d02 <HAL_TIM_IC_Start_IT+0x5e>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	e003      	b.n	8004d0a <HAL_TIM_IC_Start_IT+0x66>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d104      	bne.n	8004d1c <HAL_TIM_IC_Start_IT+0x78>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	e013      	b.n	8004d44 <HAL_TIM_IC_Start_IT+0xa0>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d104      	bne.n	8004d2c <HAL_TIM_IC_Start_IT+0x88>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	e00b      	b.n	8004d44 <HAL_TIM_IC_Start_IT+0xa0>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d104      	bne.n	8004d3c <HAL_TIM_IC_Start_IT+0x98>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	e003      	b.n	8004d44 <HAL_TIM_IC_Start_IT+0xa0>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d46:	7bbb      	ldrb	r3, [r7, #14]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d102      	bne.n	8004d52 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d4c:	7b7b      	ldrb	r3, [r7, #13]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d001      	beq.n	8004d56 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e0dd      	b.n	8004f12 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d104      	bne.n	8004d66 <HAL_TIM_IC_Start_IT+0xc2>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d64:	e023      	b.n	8004dae <HAL_TIM_IC_Start_IT+0x10a>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d104      	bne.n	8004d76 <HAL_TIM_IC_Start_IT+0xd2>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d74:	e01b      	b.n	8004dae <HAL_TIM_IC_Start_IT+0x10a>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d104      	bne.n	8004d86 <HAL_TIM_IC_Start_IT+0xe2>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d84:	e013      	b.n	8004dae <HAL_TIM_IC_Start_IT+0x10a>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b0c      	cmp	r3, #12
 8004d8a:	d104      	bne.n	8004d96 <HAL_TIM_IC_Start_IT+0xf2>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d94:	e00b      	b.n	8004dae <HAL_TIM_IC_Start_IT+0x10a>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d104      	bne.n	8004da6 <HAL_TIM_IC_Start_IT+0x102>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da4:	e003      	b.n	8004dae <HAL_TIM_IC_Start_IT+0x10a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2202      	movs	r2, #2
 8004daa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d104      	bne.n	8004dbe <HAL_TIM_IC_Start_IT+0x11a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dbc:	e013      	b.n	8004de6 <HAL_TIM_IC_Start_IT+0x142>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_IC_Start_IT+0x12a>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dcc:	e00b      	b.n	8004de6 <HAL_TIM_IC_Start_IT+0x142>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_IC_Start_IT+0x13a>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ddc:	e003      	b.n	8004de6 <HAL_TIM_IC_Start_IT+0x142>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b0c      	cmp	r3, #12
 8004dea:	d841      	bhi.n	8004e70 <HAL_TIM_IC_Start_IT+0x1cc>
 8004dec:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <HAL_TIM_IC_Start_IT+0x150>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e29 	.word	0x08004e29
 8004df8:	08004e71 	.word	0x08004e71
 8004dfc:	08004e71 	.word	0x08004e71
 8004e00:	08004e71 	.word	0x08004e71
 8004e04:	08004e3b 	.word	0x08004e3b
 8004e08:	08004e71 	.word	0x08004e71
 8004e0c:	08004e71 	.word	0x08004e71
 8004e10:	08004e71 	.word	0x08004e71
 8004e14:	08004e4d 	.word	0x08004e4d
 8004e18:	08004e71 	.word	0x08004e71
 8004e1c:	08004e71 	.word	0x08004e71
 8004e20:	08004e71 	.word	0x08004e71
 8004e24:	08004e5f 	.word	0x08004e5f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0202 	orr.w	r2, r2, #2
 8004e36:	60da      	str	r2, [r3, #12]
      break;
 8004e38:	e01d      	b.n	8004e76 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0204 	orr.w	r2, r2, #4
 8004e48:	60da      	str	r2, [r3, #12]
      break;
 8004e4a:	e014      	b.n	8004e76 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0208 	orr.w	r2, r2, #8
 8004e5a:	60da      	str	r2, [r3, #12]
      break;
 8004e5c:	e00b      	b.n	8004e76 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f042 0210 	orr.w	r2, r2, #16
 8004e6c:	60da      	str	r2, [r3, #12]
      break;
 8004e6e:	e002      	b.n	8004e76 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
      break;
 8004e74:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d149      	bne.n	8004f10 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2201      	movs	r2, #1
 8004e82:	6839      	ldr	r1, [r7, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f001 f827 	bl	8005ed8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a23      	ldr	r2, [pc, #140]	; (8004f1c <HAL_TIM_IC_Start_IT+0x278>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d01d      	beq.n	8004ed0 <HAL_TIM_IC_Start_IT+0x22c>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9c:	d018      	beq.n	8004ed0 <HAL_TIM_IC_Start_IT+0x22c>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1f      	ldr	r2, [pc, #124]	; (8004f20 <HAL_TIM_IC_Start_IT+0x27c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d013      	beq.n	8004ed0 <HAL_TIM_IC_Start_IT+0x22c>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1d      	ldr	r2, [pc, #116]	; (8004f24 <HAL_TIM_IC_Start_IT+0x280>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00e      	beq.n	8004ed0 <HAL_TIM_IC_Start_IT+0x22c>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1c      	ldr	r2, [pc, #112]	; (8004f28 <HAL_TIM_IC_Start_IT+0x284>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d009      	beq.n	8004ed0 <HAL_TIM_IC_Start_IT+0x22c>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1a      	ldr	r2, [pc, #104]	; (8004f2c <HAL_TIM_IC_Start_IT+0x288>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d004      	beq.n	8004ed0 <HAL_TIM_IC_Start_IT+0x22c>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a19      	ldr	r2, [pc, #100]	; (8004f30 <HAL_TIM_IC_Start_IT+0x28c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d115      	bne.n	8004efc <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	4b17      	ldr	r3, [pc, #92]	; (8004f34 <HAL_TIM_IC_Start_IT+0x290>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b06      	cmp	r3, #6
 8004ee0:	d015      	beq.n	8004f0e <HAL_TIM_IC_Start_IT+0x26a>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee8:	d011      	beq.n	8004f0e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 0201 	orr.w	r2, r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efa:	e008      	b.n	8004f0e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0201 	orr.w	r2, r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	e000      	b.n	8004f10 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40012c00 	.word	0x40012c00
 8004f20:	40000400 	.word	0x40000400
 8004f24:	40000800 	.word	0x40000800
 8004f28:	40000c00 	.word	0x40000c00
 8004f2c:	40013400 	.word	0x40013400
 8004f30:	40014000 	.word	0x40014000
 8004f34:	00010007 	.word	0x00010007

08004f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d122      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d11b      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0202 	mvn.w	r2, #2
 8004f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fb f9d2 	bl	8000324 <HAL_TIM_IC_CaptureCallback>
 8004f80:	e005      	b.n	8004f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 faf6 	bl	8005574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fafd 	bl	8005588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0304 	and.w	r3, r3, #4
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d122      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	d11b      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0204 	mvn.w	r2, #4
 8004fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7fb f9a8 	bl	8000324 <HAL_TIM_IC_CaptureCallback>
 8004fd4:	e005      	b.n	8004fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 facc 	bl	8005574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 fad3 	bl	8005588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b08      	cmp	r3, #8
 8004ff4:	d122      	bne.n	800503c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b08      	cmp	r3, #8
 8005002:	d11b      	bne.n	800503c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0208 	mvn.w	r2, #8
 800500c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2204      	movs	r2, #4
 8005012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7fb f97e 	bl	8000324 <HAL_TIM_IC_CaptureCallback>
 8005028:	e005      	b.n	8005036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 faa2 	bl	8005574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 faa9 	bl	8005588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0310 	and.w	r3, r3, #16
 8005046:	2b10      	cmp	r3, #16
 8005048:	d122      	bne.n	8005090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 0310 	and.w	r3, r3, #16
 8005054:	2b10      	cmp	r3, #16
 8005056:	d11b      	bne.n	8005090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0210 	mvn.w	r2, #16
 8005060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2208      	movs	r2, #8
 8005066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7fb f954 	bl	8000324 <HAL_TIM_IC_CaptureCallback>
 800507c:	e005      	b.n	800508a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fa78 	bl	8005574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fa7f 	bl	8005588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b01      	cmp	r3, #1
 800509c:	d10e      	bne.n	80050bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d107      	bne.n	80050bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0201 	mvn.w	r2, #1
 80050b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fa52 	bl	8005560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c6:	2b80      	cmp	r3, #128	; 0x80
 80050c8:	d10e      	bne.n	80050e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d4:	2b80      	cmp	r3, #128	; 0x80
 80050d6:	d107      	bne.n	80050e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 ffb0 	bl	8006048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f6:	d10e      	bne.n	8005116 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b80      	cmp	r3, #128	; 0x80
 8005104:	d107      	bne.n	8005116 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800510e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 ffa3 	bl	800605c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005120:	2b40      	cmp	r3, #64	; 0x40
 8005122:	d10e      	bne.n	8005142 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512e:	2b40      	cmp	r3, #64	; 0x40
 8005130:	d107      	bne.n	8005142 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800513a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fa2d 	bl	800559c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f003 0320 	and.w	r3, r3, #32
 800514c:	2b20      	cmp	r3, #32
 800514e:	d10e      	bne.n	800516e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b20      	cmp	r3, #32
 800515c:	d107      	bne.n	800516e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f06f 0220 	mvn.w	r2, #32
 8005166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 ff63 	bl	8006034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800516e:	bf00      	nop
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b086      	sub	sp, #24
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005190:	2302      	movs	r3, #2
 8005192:	e088      	b.n	80052a6 <HAL_TIM_IC_ConfigChannel+0x130>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d11b      	bne.n	80051da <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	6819      	ldr	r1, [r3, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f000 fd6d 	bl	8005c90 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699a      	ldr	r2, [r3, #24]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 020c 	bic.w	r2, r2, #12
 80051c4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6999      	ldr	r1, [r3, #24]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	619a      	str	r2, [r3, #24]
 80051d8:	e060      	b.n	800529c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d11c      	bne.n	800521a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6819      	ldr	r1, [r3, #0]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f000 fdbc 	bl	8005d6c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005202:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6999      	ldr	r1, [r3, #24]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	021a      	lsls	r2, r3, #8
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	619a      	str	r2, [r3, #24]
 8005218:	e040      	b.n	800529c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b08      	cmp	r3, #8
 800521e:	d11b      	bne.n	8005258 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6818      	ldr	r0, [r3, #0]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	6819      	ldr	r1, [r3, #0]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f000 fdd9 	bl	8005de6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69da      	ldr	r2, [r3, #28]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 020c 	bic.w	r2, r2, #12
 8005242:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69d9      	ldr	r1, [r3, #28]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	61da      	str	r2, [r3, #28]
 8005256:	e021      	b.n	800529c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b0c      	cmp	r3, #12
 800525c:	d11c      	bne.n	8005298 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	6819      	ldr	r1, [r3, #0]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f000 fdf6 	bl	8005e5e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005280:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69d9      	ldr	r1, [r3, #28]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	021a      	lsls	r2, r3, #8
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	61da      	str	r2, [r3, #28]
 8005296:	e001      	b.n	800529c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e0ff      	b.n	80054ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b14      	cmp	r3, #20
 80052da:	f200 80f0 	bhi.w	80054be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80052de:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	08005339 	.word	0x08005339
 80052e8:	080054bf 	.word	0x080054bf
 80052ec:	080054bf 	.word	0x080054bf
 80052f0:	080054bf 	.word	0x080054bf
 80052f4:	08005379 	.word	0x08005379
 80052f8:	080054bf 	.word	0x080054bf
 80052fc:	080054bf 	.word	0x080054bf
 8005300:	080054bf 	.word	0x080054bf
 8005304:	080053bb 	.word	0x080053bb
 8005308:	080054bf 	.word	0x080054bf
 800530c:	080054bf 	.word	0x080054bf
 8005310:	080054bf 	.word	0x080054bf
 8005314:	080053fb 	.word	0x080053fb
 8005318:	080054bf 	.word	0x080054bf
 800531c:	080054bf 	.word	0x080054bf
 8005320:	080054bf 	.word	0x080054bf
 8005324:	0800543d 	.word	0x0800543d
 8005328:	080054bf 	.word	0x080054bf
 800532c:	080054bf 	.word	0x080054bf
 8005330:	080054bf 	.word	0x080054bf
 8005334:	0800547d 	.word	0x0800547d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68b9      	ldr	r1, [r7, #8]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 f9d0 	bl	80056e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699a      	ldr	r2, [r3, #24]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0208 	orr.w	r2, r2, #8
 8005352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699a      	ldr	r2, [r3, #24]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0204 	bic.w	r2, r2, #4
 8005362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6999      	ldr	r1, [r3, #24]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	619a      	str	r2, [r3, #24]
      break;
 8005376:	e0a5      	b.n	80054c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fa40 	bl	8005804 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6999      	ldr	r1, [r3, #24]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	021a      	lsls	r2, r3, #8
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	619a      	str	r2, [r3, #24]
      break;
 80053b8:	e084      	b.n	80054c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 faa9 	bl	8005918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69da      	ldr	r2, [r3, #28]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0208 	orr.w	r2, r2, #8
 80053d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69da      	ldr	r2, [r3, #28]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0204 	bic.w	r2, r2, #4
 80053e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69d9      	ldr	r1, [r3, #28]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	61da      	str	r2, [r3, #28]
      break;
 80053f8:	e064      	b.n	80054c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fb11 	bl	8005a28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69da      	ldr	r2, [r3, #28]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69d9      	ldr	r1, [r3, #28]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	021a      	lsls	r2, r3, #8
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	61da      	str	r2, [r3, #28]
      break;
 800543a:	e043      	b.n	80054c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fb5a 	bl	8005afc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0208 	orr.w	r2, r2, #8
 8005456:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0204 	bic.w	r2, r2, #4
 8005466:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800547a:	e023      	b.n	80054c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fb9e 	bl	8005bc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005496:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	021a      	lsls	r2, r3, #8
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054bc:	e002      	b.n	80054c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	75fb      	strb	r3, [r7, #23]
      break;
 80054c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop

080054d8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b0c      	cmp	r3, #12
 80054ea:	d831      	bhi.n	8005550 <HAL_TIM_ReadCapturedValue+0x78>
 80054ec:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	08005529 	.word	0x08005529
 80054f8:	08005551 	.word	0x08005551
 80054fc:	08005551 	.word	0x08005551
 8005500:	08005551 	.word	0x08005551
 8005504:	08005533 	.word	0x08005533
 8005508:	08005551 	.word	0x08005551
 800550c:	08005551 	.word	0x08005551
 8005510:	08005551 	.word	0x08005551
 8005514:	0800553d 	.word	0x0800553d
 8005518:	08005551 	.word	0x08005551
 800551c:	08005551 	.word	0x08005551
 8005520:	08005551 	.word	0x08005551
 8005524:	08005547 	.word	0x08005547
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552e:	60fb      	str	r3, [r7, #12]

      break;
 8005530:	e00f      	b.n	8005552 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	60fb      	str	r3, [r7, #12]

      break;
 800553a:	e00a      	b.n	8005552 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005542:	60fb      	str	r3, [r7, #12]

      break;
 8005544:	e005      	b.n	8005552 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	60fb      	str	r3, [r7, #12]

      break;
 800554e:	e000      	b.n	8005552 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005550:	bf00      	nop
  }

  return tmpreg;
 8005552:	68fb      	ldr	r3, [r7, #12]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a40      	ldr	r2, [pc, #256]	; (80056c4 <TIM_Base_SetConfig+0x114>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d013      	beq.n	80055f0 <TIM_Base_SetConfig+0x40>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ce:	d00f      	beq.n	80055f0 <TIM_Base_SetConfig+0x40>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a3d      	ldr	r2, [pc, #244]	; (80056c8 <TIM_Base_SetConfig+0x118>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00b      	beq.n	80055f0 <TIM_Base_SetConfig+0x40>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a3c      	ldr	r2, [pc, #240]	; (80056cc <TIM_Base_SetConfig+0x11c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d007      	beq.n	80055f0 <TIM_Base_SetConfig+0x40>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a3b      	ldr	r2, [pc, #236]	; (80056d0 <TIM_Base_SetConfig+0x120>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d003      	beq.n	80055f0 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a3a      	ldr	r2, [pc, #232]	; (80056d4 <TIM_Base_SetConfig+0x124>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d108      	bne.n	8005602 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a2f      	ldr	r2, [pc, #188]	; (80056c4 <TIM_Base_SetConfig+0x114>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d01f      	beq.n	800564a <TIM_Base_SetConfig+0x9a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005610:	d01b      	beq.n	800564a <TIM_Base_SetConfig+0x9a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a2c      	ldr	r2, [pc, #176]	; (80056c8 <TIM_Base_SetConfig+0x118>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d017      	beq.n	800564a <TIM_Base_SetConfig+0x9a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a2b      	ldr	r2, [pc, #172]	; (80056cc <TIM_Base_SetConfig+0x11c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <TIM_Base_SetConfig+0x9a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a2a      	ldr	r2, [pc, #168]	; (80056d0 <TIM_Base_SetConfig+0x120>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00f      	beq.n	800564a <TIM_Base_SetConfig+0x9a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a29      	ldr	r2, [pc, #164]	; (80056d4 <TIM_Base_SetConfig+0x124>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00b      	beq.n	800564a <TIM_Base_SetConfig+0x9a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a28      	ldr	r2, [pc, #160]	; (80056d8 <TIM_Base_SetConfig+0x128>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d007      	beq.n	800564a <TIM_Base_SetConfig+0x9a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a27      	ldr	r2, [pc, #156]	; (80056dc <TIM_Base_SetConfig+0x12c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d003      	beq.n	800564a <TIM_Base_SetConfig+0x9a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a26      	ldr	r2, [pc, #152]	; (80056e0 <TIM_Base_SetConfig+0x130>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d108      	bne.n	800565c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4313      	orrs	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a10      	ldr	r2, [pc, #64]	; (80056c4 <TIM_Base_SetConfig+0x114>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00f      	beq.n	80056a8 <TIM_Base_SetConfig+0xf8>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a12      	ldr	r2, [pc, #72]	; (80056d4 <TIM_Base_SetConfig+0x124>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00b      	beq.n	80056a8 <TIM_Base_SetConfig+0xf8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a11      	ldr	r2, [pc, #68]	; (80056d8 <TIM_Base_SetConfig+0x128>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d007      	beq.n	80056a8 <TIM_Base_SetConfig+0xf8>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a10      	ldr	r2, [pc, #64]	; (80056dc <TIM_Base_SetConfig+0x12c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d003      	beq.n	80056a8 <TIM_Base_SetConfig+0xf8>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a0f      	ldr	r2, [pc, #60]	; (80056e0 <TIM_Base_SetConfig+0x130>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d103      	bne.n	80056b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	615a      	str	r2, [r3, #20]
}
 80056b6:	bf00      	nop
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40012c00 	.word	0x40012c00
 80056c8:	40000400 	.word	0x40000400
 80056cc:	40000800 	.word	0x40000800
 80056d0:	40000c00 	.word	0x40000c00
 80056d4:	40013400 	.word	0x40013400
 80056d8:	40014000 	.word	0x40014000
 80056dc:	40014400 	.word	0x40014400
 80056e0:	40014800 	.word	0x40014800

080056e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	f023 0201 	bic.w	r2, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0303 	bic.w	r3, r3, #3
 800571e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f023 0302 	bic.w	r3, r3, #2
 8005730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	4313      	orrs	r3, r2
 800573a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a2c      	ldr	r2, [pc, #176]	; (80057f0 <TIM_OC1_SetConfig+0x10c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00f      	beq.n	8005764 <TIM_OC1_SetConfig+0x80>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a2b      	ldr	r2, [pc, #172]	; (80057f4 <TIM_OC1_SetConfig+0x110>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d00b      	beq.n	8005764 <TIM_OC1_SetConfig+0x80>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a2a      	ldr	r2, [pc, #168]	; (80057f8 <TIM_OC1_SetConfig+0x114>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d007      	beq.n	8005764 <TIM_OC1_SetConfig+0x80>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a29      	ldr	r2, [pc, #164]	; (80057fc <TIM_OC1_SetConfig+0x118>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d003      	beq.n	8005764 <TIM_OC1_SetConfig+0x80>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a28      	ldr	r2, [pc, #160]	; (8005800 <TIM_OC1_SetConfig+0x11c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d10c      	bne.n	800577e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f023 0308 	bic.w	r3, r3, #8
 800576a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f023 0304 	bic.w	r3, r3, #4
 800577c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a1b      	ldr	r2, [pc, #108]	; (80057f0 <TIM_OC1_SetConfig+0x10c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00f      	beq.n	80057a6 <TIM_OC1_SetConfig+0xc2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a1a      	ldr	r2, [pc, #104]	; (80057f4 <TIM_OC1_SetConfig+0x110>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00b      	beq.n	80057a6 <TIM_OC1_SetConfig+0xc2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a19      	ldr	r2, [pc, #100]	; (80057f8 <TIM_OC1_SetConfig+0x114>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d007      	beq.n	80057a6 <TIM_OC1_SetConfig+0xc2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a18      	ldr	r2, [pc, #96]	; (80057fc <TIM_OC1_SetConfig+0x118>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d003      	beq.n	80057a6 <TIM_OC1_SetConfig+0xc2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a17      	ldr	r2, [pc, #92]	; (8005800 <TIM_OC1_SetConfig+0x11c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d111      	bne.n	80057ca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	621a      	str	r2, [r3, #32]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	40012c00 	.word	0x40012c00
 80057f4:	40013400 	.word	0x40013400
 80057f8:	40014000 	.word	0x40014000
 80057fc:	40014400 	.word	0x40014400
 8005800:	40014800 	.word	0x40014800

08005804 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f023 0210 	bic.w	r2, r3, #16
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f023 0320 	bic.w	r3, r3, #32
 8005852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	4313      	orrs	r3, r2
 800585e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a28      	ldr	r2, [pc, #160]	; (8005904 <TIM_OC2_SetConfig+0x100>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d003      	beq.n	8005870 <TIM_OC2_SetConfig+0x6c>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a27      	ldr	r2, [pc, #156]	; (8005908 <TIM_OC2_SetConfig+0x104>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d10d      	bne.n	800588c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800588a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a1d      	ldr	r2, [pc, #116]	; (8005904 <TIM_OC2_SetConfig+0x100>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00f      	beq.n	80058b4 <TIM_OC2_SetConfig+0xb0>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a1c      	ldr	r2, [pc, #112]	; (8005908 <TIM_OC2_SetConfig+0x104>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00b      	beq.n	80058b4 <TIM_OC2_SetConfig+0xb0>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a1b      	ldr	r2, [pc, #108]	; (800590c <TIM_OC2_SetConfig+0x108>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d007      	beq.n	80058b4 <TIM_OC2_SetConfig+0xb0>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a1a      	ldr	r2, [pc, #104]	; (8005910 <TIM_OC2_SetConfig+0x10c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_OC2_SetConfig+0xb0>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a19      	ldr	r2, [pc, #100]	; (8005914 <TIM_OC2_SetConfig+0x110>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d113      	bne.n	80058dc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	621a      	str	r2, [r3, #32]
}
 80058f6:	bf00      	nop
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40012c00 	.word	0x40012c00
 8005908:	40013400 	.word	0x40013400
 800590c:	40014000 	.word	0x40014000
 8005910:	40014400 	.word	0x40014400
 8005914:	40014800 	.word	0x40014800

08005918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f023 0303 	bic.w	r3, r3, #3
 8005952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	021b      	lsls	r3, r3, #8
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	4313      	orrs	r3, r2
 8005970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a27      	ldr	r2, [pc, #156]	; (8005a14 <TIM_OC3_SetConfig+0xfc>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d003      	beq.n	8005982 <TIM_OC3_SetConfig+0x6a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a26      	ldr	r2, [pc, #152]	; (8005a18 <TIM_OC3_SetConfig+0x100>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d10d      	bne.n	800599e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	021b      	lsls	r3, r3, #8
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	4313      	orrs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800599c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a1c      	ldr	r2, [pc, #112]	; (8005a14 <TIM_OC3_SetConfig+0xfc>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00f      	beq.n	80059c6 <TIM_OC3_SetConfig+0xae>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a1b      	ldr	r2, [pc, #108]	; (8005a18 <TIM_OC3_SetConfig+0x100>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00b      	beq.n	80059c6 <TIM_OC3_SetConfig+0xae>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a1a      	ldr	r2, [pc, #104]	; (8005a1c <TIM_OC3_SetConfig+0x104>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d007      	beq.n	80059c6 <TIM_OC3_SetConfig+0xae>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a19      	ldr	r2, [pc, #100]	; (8005a20 <TIM_OC3_SetConfig+0x108>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d003      	beq.n	80059c6 <TIM_OC3_SetConfig+0xae>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a18      	ldr	r2, [pc, #96]	; (8005a24 <TIM_OC3_SetConfig+0x10c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d113      	bne.n	80059ee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	011b      	lsls	r3, r3, #4
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	621a      	str	r2, [r3, #32]
}
 8005a08:	bf00      	nop
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	40012c00 	.word	0x40012c00
 8005a18:	40013400 	.word	0x40013400
 8005a1c:	40014000 	.word	0x40014000
 8005a20:	40014400 	.word	0x40014400
 8005a24:	40014800 	.word	0x40014800

08005a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	021b      	lsls	r3, r3, #8
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	031b      	lsls	r3, r3, #12
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a18      	ldr	r2, [pc, #96]	; (8005ae8 <TIM_OC4_SetConfig+0xc0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00f      	beq.n	8005aac <TIM_OC4_SetConfig+0x84>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a17      	ldr	r2, [pc, #92]	; (8005aec <TIM_OC4_SetConfig+0xc4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00b      	beq.n	8005aac <TIM_OC4_SetConfig+0x84>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a16      	ldr	r2, [pc, #88]	; (8005af0 <TIM_OC4_SetConfig+0xc8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d007      	beq.n	8005aac <TIM_OC4_SetConfig+0x84>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a15      	ldr	r2, [pc, #84]	; (8005af4 <TIM_OC4_SetConfig+0xcc>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d003      	beq.n	8005aac <TIM_OC4_SetConfig+0x84>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a14      	ldr	r2, [pc, #80]	; (8005af8 <TIM_OC4_SetConfig+0xd0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d109      	bne.n	8005ac0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ab2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	019b      	lsls	r3, r3, #6
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	621a      	str	r2, [r3, #32]
}
 8005ada:	bf00      	nop
 8005adc:	371c      	adds	r7, #28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	40012c00 	.word	0x40012c00
 8005aec:	40013400 	.word	0x40013400
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40014400 	.word	0x40014400
 8005af8:	40014800 	.word	0x40014800

08005afc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	041b      	lsls	r3, r3, #16
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a17      	ldr	r2, [pc, #92]	; (8005bb0 <TIM_OC5_SetConfig+0xb4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00f      	beq.n	8005b76 <TIM_OC5_SetConfig+0x7a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a16      	ldr	r2, [pc, #88]	; (8005bb4 <TIM_OC5_SetConfig+0xb8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00b      	beq.n	8005b76 <TIM_OC5_SetConfig+0x7a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a15      	ldr	r2, [pc, #84]	; (8005bb8 <TIM_OC5_SetConfig+0xbc>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d007      	beq.n	8005b76 <TIM_OC5_SetConfig+0x7a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a14      	ldr	r2, [pc, #80]	; (8005bbc <TIM_OC5_SetConfig+0xc0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d003      	beq.n	8005b76 <TIM_OC5_SetConfig+0x7a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a13      	ldr	r2, [pc, #76]	; (8005bc0 <TIM_OC5_SetConfig+0xc4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d109      	bne.n	8005b8a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	621a      	str	r2, [r3, #32]
}
 8005ba4:	bf00      	nop
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	40012c00 	.word	0x40012c00
 8005bb4:	40013400 	.word	0x40013400
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	40014400 	.word	0x40014400
 8005bc0:	40014800 	.word	0x40014800

08005bc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	051b      	lsls	r3, r3, #20
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a18      	ldr	r2, [pc, #96]	; (8005c7c <TIM_OC6_SetConfig+0xb8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00f      	beq.n	8005c40 <TIM_OC6_SetConfig+0x7c>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a17      	ldr	r2, [pc, #92]	; (8005c80 <TIM_OC6_SetConfig+0xbc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00b      	beq.n	8005c40 <TIM_OC6_SetConfig+0x7c>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a16      	ldr	r2, [pc, #88]	; (8005c84 <TIM_OC6_SetConfig+0xc0>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d007      	beq.n	8005c40 <TIM_OC6_SetConfig+0x7c>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a15      	ldr	r2, [pc, #84]	; (8005c88 <TIM_OC6_SetConfig+0xc4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d003      	beq.n	8005c40 <TIM_OC6_SetConfig+0x7c>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a14      	ldr	r2, [pc, #80]	; (8005c8c <TIM_OC6_SetConfig+0xc8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d109      	bne.n	8005c54 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	029b      	lsls	r3, r3, #10
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	621a      	str	r2, [r3, #32]
}
 8005c6e:	bf00      	nop
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	40012c00 	.word	0x40012c00
 8005c80:	40013400 	.word	0x40013400
 8005c84:	40014000 	.word	0x40014000
 8005c88:	40014400 	.word	0x40014400
 8005c8c:	40014800 	.word	0x40014800

08005c90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f023 0201 	bic.w	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4a26      	ldr	r2, [pc, #152]	; (8005d54 <TIM_TI1_SetConfig+0xc4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d017      	beq.n	8005cee <TIM_TI1_SetConfig+0x5e>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc4:	d013      	beq.n	8005cee <TIM_TI1_SetConfig+0x5e>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4a23      	ldr	r2, [pc, #140]	; (8005d58 <TIM_TI1_SetConfig+0xc8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00f      	beq.n	8005cee <TIM_TI1_SetConfig+0x5e>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a22      	ldr	r2, [pc, #136]	; (8005d5c <TIM_TI1_SetConfig+0xcc>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00b      	beq.n	8005cee <TIM_TI1_SetConfig+0x5e>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4a21      	ldr	r2, [pc, #132]	; (8005d60 <TIM_TI1_SetConfig+0xd0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d007      	beq.n	8005cee <TIM_TI1_SetConfig+0x5e>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4a20      	ldr	r2, [pc, #128]	; (8005d64 <TIM_TI1_SetConfig+0xd4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d003      	beq.n	8005cee <TIM_TI1_SetConfig+0x5e>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4a1f      	ldr	r2, [pc, #124]	; (8005d68 <TIM_TI1_SetConfig+0xd8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d101      	bne.n	8005cf2 <TIM_TI1_SetConfig+0x62>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e000      	b.n	8005cf4 <TIM_TI1_SetConfig+0x64>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d008      	beq.n	8005d0a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f023 0303 	bic.w	r3, r3, #3
 8005cfe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	e003      	b.n	8005d12 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f043 0301 	orr.w	r3, r3, #1
 8005d10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f023 030a 	bic.w	r3, r3, #10
 8005d2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f003 030a 	and.w	r3, r3, #10
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40012c00 	.word	0x40012c00
 8005d58:	40000400 	.word	0x40000400
 8005d5c:	40000800 	.word	0x40000800
 8005d60:	40000c00 	.word	0x40000c00
 8005d64:	40013400 	.word	0x40013400
 8005d68:	40014000 	.word	0x40014000

08005d6c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	f023 0210 	bic.w	r2, r3, #16
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005daa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	031b      	lsls	r3, r3, #12
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dbe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	621a      	str	r2, [r3, #32]
}
 8005dda:	bf00      	nop
 8005ddc:	371c      	adds	r7, #28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b087      	sub	sp, #28
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	60f8      	str	r0, [r7, #12]
 8005dee:	60b9      	str	r1, [r7, #8]
 8005df0:	607a      	str	r2, [r7, #4]
 8005df2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f023 0303 	bic.w	r3, r3, #3
 8005e12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e22:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005e36:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	621a      	str	r2, [r3, #32]
}
 8005e52:	bf00      	nop
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b087      	sub	sp, #28
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
 8005e6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	031b      	lsls	r3, r3, #12
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005eb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	031b      	lsls	r3, r3, #12
 8005eb6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	621a      	str	r2, [r3, #32]
}
 8005ecc:	bf00      	nop
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f003 031f 	and.w	r3, r3, #31
 8005eea:	2201      	movs	r2, #1
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a1a      	ldr	r2, [r3, #32]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	401a      	ands	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a1a      	ldr	r2, [r3, #32]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f003 031f 	and.w	r3, r3, #31
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f10:	431a      	orrs	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	621a      	str	r2, [r3, #32]
}
 8005f16:	bf00      	nop
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e068      	b.n	800600e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a2e      	ldr	r2, [pc, #184]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d004      	beq.n	8005f70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a2d      	ldr	r2, [pc, #180]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d108      	bne.n	8005f82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a1e      	ldr	r2, [pc, #120]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d01d      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fae:	d018      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1b      	ldr	r2, [pc, #108]	; (8006024 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d013      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1a      	ldr	r2, [pc, #104]	; (8006028 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00e      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a18      	ldr	r2, [pc, #96]	; (800602c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d009      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a13      	ldr	r2, [pc, #76]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d004      	beq.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a14      	ldr	r2, [pc, #80]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d10c      	bne.n	8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40012c00 	.word	0x40012c00
 8006020:	40013400 	.word	0x40013400
 8006024:	40000400 	.word	0x40000400
 8006028:	40000800 	.word	0x40000800
 800602c:	40000c00 	.word	0x40000c00
 8006030:	40014000 	.word	0x40014000

08006034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <__errno>:
 8006070:	4b01      	ldr	r3, [pc, #4]	; (8006078 <__errno+0x8>)
 8006072:	6818      	ldr	r0, [r3, #0]
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	20000028 	.word	0x20000028

0800607c <__libc_init_array>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	4d0d      	ldr	r5, [pc, #52]	; (80060b4 <__libc_init_array+0x38>)
 8006080:	4c0d      	ldr	r4, [pc, #52]	; (80060b8 <__libc_init_array+0x3c>)
 8006082:	1b64      	subs	r4, r4, r5
 8006084:	10a4      	asrs	r4, r4, #2
 8006086:	2600      	movs	r6, #0
 8006088:	42a6      	cmp	r6, r4
 800608a:	d109      	bne.n	80060a0 <__libc_init_array+0x24>
 800608c:	4d0b      	ldr	r5, [pc, #44]	; (80060bc <__libc_init_array+0x40>)
 800608e:	4c0c      	ldr	r4, [pc, #48]	; (80060c0 <__libc_init_array+0x44>)
 8006090:	f000 ffae 	bl	8006ff0 <_init>
 8006094:	1b64      	subs	r4, r4, r5
 8006096:	10a4      	asrs	r4, r4, #2
 8006098:	2600      	movs	r6, #0
 800609a:	42a6      	cmp	r6, r4
 800609c:	d105      	bne.n	80060aa <__libc_init_array+0x2e>
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a4:	4798      	blx	r3
 80060a6:	3601      	adds	r6, #1
 80060a8:	e7ee      	b.n	8006088 <__libc_init_array+0xc>
 80060aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ae:	4798      	blx	r3
 80060b0:	3601      	adds	r6, #1
 80060b2:	e7f2      	b.n	800609a <__libc_init_array+0x1e>
 80060b4:	080070f0 	.word	0x080070f0
 80060b8:	080070f0 	.word	0x080070f0
 80060bc:	080070f0 	.word	0x080070f0
 80060c0:	080070f4 	.word	0x080070f4

080060c4 <memset>:
 80060c4:	4402      	add	r2, r0
 80060c6:	4603      	mov	r3, r0
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d100      	bne.n	80060ce <memset+0xa>
 80060cc:	4770      	bx	lr
 80060ce:	f803 1b01 	strb.w	r1, [r3], #1
 80060d2:	e7f9      	b.n	80060c8 <memset+0x4>

080060d4 <__sfputc_r>:
 80060d4:	6893      	ldr	r3, [r2, #8]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	b410      	push	{r4}
 80060dc:	6093      	str	r3, [r2, #8]
 80060de:	da08      	bge.n	80060f2 <__sfputc_r+0x1e>
 80060e0:	6994      	ldr	r4, [r2, #24]
 80060e2:	42a3      	cmp	r3, r4
 80060e4:	db01      	blt.n	80060ea <__sfputc_r+0x16>
 80060e6:	290a      	cmp	r1, #10
 80060e8:	d103      	bne.n	80060f2 <__sfputc_r+0x1e>
 80060ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060ee:	f000 baf7 	b.w	80066e0 <__swbuf_r>
 80060f2:	6813      	ldr	r3, [r2, #0]
 80060f4:	1c58      	adds	r0, r3, #1
 80060f6:	6010      	str	r0, [r2, #0]
 80060f8:	7019      	strb	r1, [r3, #0]
 80060fa:	4608      	mov	r0, r1
 80060fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006100:	4770      	bx	lr

08006102 <__sfputs_r>:
 8006102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006104:	4606      	mov	r6, r0
 8006106:	460f      	mov	r7, r1
 8006108:	4614      	mov	r4, r2
 800610a:	18d5      	adds	r5, r2, r3
 800610c:	42ac      	cmp	r4, r5
 800610e:	d101      	bne.n	8006114 <__sfputs_r+0x12>
 8006110:	2000      	movs	r0, #0
 8006112:	e007      	b.n	8006124 <__sfputs_r+0x22>
 8006114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006118:	463a      	mov	r2, r7
 800611a:	4630      	mov	r0, r6
 800611c:	f7ff ffda 	bl	80060d4 <__sfputc_r>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d1f3      	bne.n	800610c <__sfputs_r+0xa>
 8006124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006128 <_vfiprintf_r>:
 8006128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	460d      	mov	r5, r1
 800612e:	b09d      	sub	sp, #116	; 0x74
 8006130:	4614      	mov	r4, r2
 8006132:	4698      	mov	r8, r3
 8006134:	4606      	mov	r6, r0
 8006136:	b118      	cbz	r0, 8006140 <_vfiprintf_r+0x18>
 8006138:	6983      	ldr	r3, [r0, #24]
 800613a:	b90b      	cbnz	r3, 8006140 <_vfiprintf_r+0x18>
 800613c:	f000 fcaa 	bl	8006a94 <__sinit>
 8006140:	4b89      	ldr	r3, [pc, #548]	; (8006368 <_vfiprintf_r+0x240>)
 8006142:	429d      	cmp	r5, r3
 8006144:	d11b      	bne.n	800617e <_vfiprintf_r+0x56>
 8006146:	6875      	ldr	r5, [r6, #4]
 8006148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800614a:	07d9      	lsls	r1, r3, #31
 800614c:	d405      	bmi.n	800615a <_vfiprintf_r+0x32>
 800614e:	89ab      	ldrh	r3, [r5, #12]
 8006150:	059a      	lsls	r2, r3, #22
 8006152:	d402      	bmi.n	800615a <_vfiprintf_r+0x32>
 8006154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006156:	f000 fd3b 	bl	8006bd0 <__retarget_lock_acquire_recursive>
 800615a:	89ab      	ldrh	r3, [r5, #12]
 800615c:	071b      	lsls	r3, r3, #28
 800615e:	d501      	bpl.n	8006164 <_vfiprintf_r+0x3c>
 8006160:	692b      	ldr	r3, [r5, #16]
 8006162:	b9eb      	cbnz	r3, 80061a0 <_vfiprintf_r+0x78>
 8006164:	4629      	mov	r1, r5
 8006166:	4630      	mov	r0, r6
 8006168:	f000 fb0c 	bl	8006784 <__swsetup_r>
 800616c:	b1c0      	cbz	r0, 80061a0 <_vfiprintf_r+0x78>
 800616e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006170:	07dc      	lsls	r4, r3, #31
 8006172:	d50e      	bpl.n	8006192 <_vfiprintf_r+0x6a>
 8006174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006178:	b01d      	add	sp, #116	; 0x74
 800617a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617e:	4b7b      	ldr	r3, [pc, #492]	; (800636c <_vfiprintf_r+0x244>)
 8006180:	429d      	cmp	r5, r3
 8006182:	d101      	bne.n	8006188 <_vfiprintf_r+0x60>
 8006184:	68b5      	ldr	r5, [r6, #8]
 8006186:	e7df      	b.n	8006148 <_vfiprintf_r+0x20>
 8006188:	4b79      	ldr	r3, [pc, #484]	; (8006370 <_vfiprintf_r+0x248>)
 800618a:	429d      	cmp	r5, r3
 800618c:	bf08      	it	eq
 800618e:	68f5      	ldreq	r5, [r6, #12]
 8006190:	e7da      	b.n	8006148 <_vfiprintf_r+0x20>
 8006192:	89ab      	ldrh	r3, [r5, #12]
 8006194:	0598      	lsls	r0, r3, #22
 8006196:	d4ed      	bmi.n	8006174 <_vfiprintf_r+0x4c>
 8006198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800619a:	f000 fd1a 	bl	8006bd2 <__retarget_lock_release_recursive>
 800619e:	e7e9      	b.n	8006174 <_vfiprintf_r+0x4c>
 80061a0:	2300      	movs	r3, #0
 80061a2:	9309      	str	r3, [sp, #36]	; 0x24
 80061a4:	2320      	movs	r3, #32
 80061a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80061ae:	2330      	movs	r3, #48	; 0x30
 80061b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006374 <_vfiprintf_r+0x24c>
 80061b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061b8:	f04f 0901 	mov.w	r9, #1
 80061bc:	4623      	mov	r3, r4
 80061be:	469a      	mov	sl, r3
 80061c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061c4:	b10a      	cbz	r2, 80061ca <_vfiprintf_r+0xa2>
 80061c6:	2a25      	cmp	r2, #37	; 0x25
 80061c8:	d1f9      	bne.n	80061be <_vfiprintf_r+0x96>
 80061ca:	ebba 0b04 	subs.w	fp, sl, r4
 80061ce:	d00b      	beq.n	80061e8 <_vfiprintf_r+0xc0>
 80061d0:	465b      	mov	r3, fp
 80061d2:	4622      	mov	r2, r4
 80061d4:	4629      	mov	r1, r5
 80061d6:	4630      	mov	r0, r6
 80061d8:	f7ff ff93 	bl	8006102 <__sfputs_r>
 80061dc:	3001      	adds	r0, #1
 80061de:	f000 80aa 	beq.w	8006336 <_vfiprintf_r+0x20e>
 80061e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061e4:	445a      	add	r2, fp
 80061e6:	9209      	str	r2, [sp, #36]	; 0x24
 80061e8:	f89a 3000 	ldrb.w	r3, [sl]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 80a2 	beq.w	8006336 <_vfiprintf_r+0x20e>
 80061f2:	2300      	movs	r3, #0
 80061f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061fc:	f10a 0a01 	add.w	sl, sl, #1
 8006200:	9304      	str	r3, [sp, #16]
 8006202:	9307      	str	r3, [sp, #28]
 8006204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006208:	931a      	str	r3, [sp, #104]	; 0x68
 800620a:	4654      	mov	r4, sl
 800620c:	2205      	movs	r2, #5
 800620e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006212:	4858      	ldr	r0, [pc, #352]	; (8006374 <_vfiprintf_r+0x24c>)
 8006214:	f7f9 ffdc 	bl	80001d0 <memchr>
 8006218:	9a04      	ldr	r2, [sp, #16]
 800621a:	b9d8      	cbnz	r0, 8006254 <_vfiprintf_r+0x12c>
 800621c:	06d1      	lsls	r1, r2, #27
 800621e:	bf44      	itt	mi
 8006220:	2320      	movmi	r3, #32
 8006222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006226:	0713      	lsls	r3, r2, #28
 8006228:	bf44      	itt	mi
 800622a:	232b      	movmi	r3, #43	; 0x2b
 800622c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006230:	f89a 3000 	ldrb.w	r3, [sl]
 8006234:	2b2a      	cmp	r3, #42	; 0x2a
 8006236:	d015      	beq.n	8006264 <_vfiprintf_r+0x13c>
 8006238:	9a07      	ldr	r2, [sp, #28]
 800623a:	4654      	mov	r4, sl
 800623c:	2000      	movs	r0, #0
 800623e:	f04f 0c0a 	mov.w	ip, #10
 8006242:	4621      	mov	r1, r4
 8006244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006248:	3b30      	subs	r3, #48	; 0x30
 800624a:	2b09      	cmp	r3, #9
 800624c:	d94e      	bls.n	80062ec <_vfiprintf_r+0x1c4>
 800624e:	b1b0      	cbz	r0, 800627e <_vfiprintf_r+0x156>
 8006250:	9207      	str	r2, [sp, #28]
 8006252:	e014      	b.n	800627e <_vfiprintf_r+0x156>
 8006254:	eba0 0308 	sub.w	r3, r0, r8
 8006258:	fa09 f303 	lsl.w	r3, r9, r3
 800625c:	4313      	orrs	r3, r2
 800625e:	9304      	str	r3, [sp, #16]
 8006260:	46a2      	mov	sl, r4
 8006262:	e7d2      	b.n	800620a <_vfiprintf_r+0xe2>
 8006264:	9b03      	ldr	r3, [sp, #12]
 8006266:	1d19      	adds	r1, r3, #4
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	9103      	str	r1, [sp, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	bfbb      	ittet	lt
 8006270:	425b      	neglt	r3, r3
 8006272:	f042 0202 	orrlt.w	r2, r2, #2
 8006276:	9307      	strge	r3, [sp, #28]
 8006278:	9307      	strlt	r3, [sp, #28]
 800627a:	bfb8      	it	lt
 800627c:	9204      	strlt	r2, [sp, #16]
 800627e:	7823      	ldrb	r3, [r4, #0]
 8006280:	2b2e      	cmp	r3, #46	; 0x2e
 8006282:	d10c      	bne.n	800629e <_vfiprintf_r+0x176>
 8006284:	7863      	ldrb	r3, [r4, #1]
 8006286:	2b2a      	cmp	r3, #42	; 0x2a
 8006288:	d135      	bne.n	80062f6 <_vfiprintf_r+0x1ce>
 800628a:	9b03      	ldr	r3, [sp, #12]
 800628c:	1d1a      	adds	r2, r3, #4
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	9203      	str	r2, [sp, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	bfb8      	it	lt
 8006296:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800629a:	3402      	adds	r4, #2
 800629c:	9305      	str	r3, [sp, #20]
 800629e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006384 <_vfiprintf_r+0x25c>
 80062a2:	7821      	ldrb	r1, [r4, #0]
 80062a4:	2203      	movs	r2, #3
 80062a6:	4650      	mov	r0, sl
 80062a8:	f7f9 ff92 	bl	80001d0 <memchr>
 80062ac:	b140      	cbz	r0, 80062c0 <_vfiprintf_r+0x198>
 80062ae:	2340      	movs	r3, #64	; 0x40
 80062b0:	eba0 000a 	sub.w	r0, r0, sl
 80062b4:	fa03 f000 	lsl.w	r0, r3, r0
 80062b8:	9b04      	ldr	r3, [sp, #16]
 80062ba:	4303      	orrs	r3, r0
 80062bc:	3401      	adds	r4, #1
 80062be:	9304      	str	r3, [sp, #16]
 80062c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c4:	482c      	ldr	r0, [pc, #176]	; (8006378 <_vfiprintf_r+0x250>)
 80062c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062ca:	2206      	movs	r2, #6
 80062cc:	f7f9 ff80 	bl	80001d0 <memchr>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d03f      	beq.n	8006354 <_vfiprintf_r+0x22c>
 80062d4:	4b29      	ldr	r3, [pc, #164]	; (800637c <_vfiprintf_r+0x254>)
 80062d6:	bb1b      	cbnz	r3, 8006320 <_vfiprintf_r+0x1f8>
 80062d8:	9b03      	ldr	r3, [sp, #12]
 80062da:	3307      	adds	r3, #7
 80062dc:	f023 0307 	bic.w	r3, r3, #7
 80062e0:	3308      	adds	r3, #8
 80062e2:	9303      	str	r3, [sp, #12]
 80062e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e6:	443b      	add	r3, r7
 80062e8:	9309      	str	r3, [sp, #36]	; 0x24
 80062ea:	e767      	b.n	80061bc <_vfiprintf_r+0x94>
 80062ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80062f0:	460c      	mov	r4, r1
 80062f2:	2001      	movs	r0, #1
 80062f4:	e7a5      	b.n	8006242 <_vfiprintf_r+0x11a>
 80062f6:	2300      	movs	r3, #0
 80062f8:	3401      	adds	r4, #1
 80062fa:	9305      	str	r3, [sp, #20]
 80062fc:	4619      	mov	r1, r3
 80062fe:	f04f 0c0a 	mov.w	ip, #10
 8006302:	4620      	mov	r0, r4
 8006304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006308:	3a30      	subs	r2, #48	; 0x30
 800630a:	2a09      	cmp	r2, #9
 800630c:	d903      	bls.n	8006316 <_vfiprintf_r+0x1ee>
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0c5      	beq.n	800629e <_vfiprintf_r+0x176>
 8006312:	9105      	str	r1, [sp, #20]
 8006314:	e7c3      	b.n	800629e <_vfiprintf_r+0x176>
 8006316:	fb0c 2101 	mla	r1, ip, r1, r2
 800631a:	4604      	mov	r4, r0
 800631c:	2301      	movs	r3, #1
 800631e:	e7f0      	b.n	8006302 <_vfiprintf_r+0x1da>
 8006320:	ab03      	add	r3, sp, #12
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	462a      	mov	r2, r5
 8006326:	4b16      	ldr	r3, [pc, #88]	; (8006380 <_vfiprintf_r+0x258>)
 8006328:	a904      	add	r1, sp, #16
 800632a:	4630      	mov	r0, r6
 800632c:	f3af 8000 	nop.w
 8006330:	4607      	mov	r7, r0
 8006332:	1c78      	adds	r0, r7, #1
 8006334:	d1d6      	bne.n	80062e4 <_vfiprintf_r+0x1bc>
 8006336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006338:	07d9      	lsls	r1, r3, #31
 800633a:	d405      	bmi.n	8006348 <_vfiprintf_r+0x220>
 800633c:	89ab      	ldrh	r3, [r5, #12]
 800633e:	059a      	lsls	r2, r3, #22
 8006340:	d402      	bmi.n	8006348 <_vfiprintf_r+0x220>
 8006342:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006344:	f000 fc45 	bl	8006bd2 <__retarget_lock_release_recursive>
 8006348:	89ab      	ldrh	r3, [r5, #12]
 800634a:	065b      	lsls	r3, r3, #25
 800634c:	f53f af12 	bmi.w	8006174 <_vfiprintf_r+0x4c>
 8006350:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006352:	e711      	b.n	8006178 <_vfiprintf_r+0x50>
 8006354:	ab03      	add	r3, sp, #12
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	462a      	mov	r2, r5
 800635a:	4b09      	ldr	r3, [pc, #36]	; (8006380 <_vfiprintf_r+0x258>)
 800635c:	a904      	add	r1, sp, #16
 800635e:	4630      	mov	r0, r6
 8006360:	f000 f880 	bl	8006464 <_printf_i>
 8006364:	e7e4      	b.n	8006330 <_vfiprintf_r+0x208>
 8006366:	bf00      	nop
 8006368:	080070b0 	.word	0x080070b0
 800636c:	080070d0 	.word	0x080070d0
 8006370:	08007090 	.word	0x08007090
 8006374:	0800705c 	.word	0x0800705c
 8006378:	08007066 	.word	0x08007066
 800637c:	00000000 	.word	0x00000000
 8006380:	08006103 	.word	0x08006103
 8006384:	08007062 	.word	0x08007062

08006388 <_printf_common>:
 8006388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800638c:	4616      	mov	r6, r2
 800638e:	4699      	mov	r9, r3
 8006390:	688a      	ldr	r2, [r1, #8]
 8006392:	690b      	ldr	r3, [r1, #16]
 8006394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006398:	4293      	cmp	r3, r2
 800639a:	bfb8      	it	lt
 800639c:	4613      	movlt	r3, r2
 800639e:	6033      	str	r3, [r6, #0]
 80063a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063a4:	4607      	mov	r7, r0
 80063a6:	460c      	mov	r4, r1
 80063a8:	b10a      	cbz	r2, 80063ae <_printf_common+0x26>
 80063aa:	3301      	adds	r3, #1
 80063ac:	6033      	str	r3, [r6, #0]
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	0699      	lsls	r1, r3, #26
 80063b2:	bf42      	ittt	mi
 80063b4:	6833      	ldrmi	r3, [r6, #0]
 80063b6:	3302      	addmi	r3, #2
 80063b8:	6033      	strmi	r3, [r6, #0]
 80063ba:	6825      	ldr	r5, [r4, #0]
 80063bc:	f015 0506 	ands.w	r5, r5, #6
 80063c0:	d106      	bne.n	80063d0 <_printf_common+0x48>
 80063c2:	f104 0a19 	add.w	sl, r4, #25
 80063c6:	68e3      	ldr	r3, [r4, #12]
 80063c8:	6832      	ldr	r2, [r6, #0]
 80063ca:	1a9b      	subs	r3, r3, r2
 80063cc:	42ab      	cmp	r3, r5
 80063ce:	dc26      	bgt.n	800641e <_printf_common+0x96>
 80063d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063d4:	1e13      	subs	r3, r2, #0
 80063d6:	6822      	ldr	r2, [r4, #0]
 80063d8:	bf18      	it	ne
 80063da:	2301      	movne	r3, #1
 80063dc:	0692      	lsls	r2, r2, #26
 80063de:	d42b      	bmi.n	8006438 <_printf_common+0xb0>
 80063e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063e4:	4649      	mov	r1, r9
 80063e6:	4638      	mov	r0, r7
 80063e8:	47c0      	blx	r8
 80063ea:	3001      	adds	r0, #1
 80063ec:	d01e      	beq.n	800642c <_printf_common+0xa4>
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	68e5      	ldr	r5, [r4, #12]
 80063f2:	6832      	ldr	r2, [r6, #0]
 80063f4:	f003 0306 	and.w	r3, r3, #6
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	bf08      	it	eq
 80063fc:	1aad      	subeq	r5, r5, r2
 80063fe:	68a3      	ldr	r3, [r4, #8]
 8006400:	6922      	ldr	r2, [r4, #16]
 8006402:	bf0c      	ite	eq
 8006404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006408:	2500      	movne	r5, #0
 800640a:	4293      	cmp	r3, r2
 800640c:	bfc4      	itt	gt
 800640e:	1a9b      	subgt	r3, r3, r2
 8006410:	18ed      	addgt	r5, r5, r3
 8006412:	2600      	movs	r6, #0
 8006414:	341a      	adds	r4, #26
 8006416:	42b5      	cmp	r5, r6
 8006418:	d11a      	bne.n	8006450 <_printf_common+0xc8>
 800641a:	2000      	movs	r0, #0
 800641c:	e008      	b.n	8006430 <_printf_common+0xa8>
 800641e:	2301      	movs	r3, #1
 8006420:	4652      	mov	r2, sl
 8006422:	4649      	mov	r1, r9
 8006424:	4638      	mov	r0, r7
 8006426:	47c0      	blx	r8
 8006428:	3001      	adds	r0, #1
 800642a:	d103      	bne.n	8006434 <_printf_common+0xac>
 800642c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006434:	3501      	adds	r5, #1
 8006436:	e7c6      	b.n	80063c6 <_printf_common+0x3e>
 8006438:	18e1      	adds	r1, r4, r3
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	2030      	movs	r0, #48	; 0x30
 800643e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006442:	4422      	add	r2, r4
 8006444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800644c:	3302      	adds	r3, #2
 800644e:	e7c7      	b.n	80063e0 <_printf_common+0x58>
 8006450:	2301      	movs	r3, #1
 8006452:	4622      	mov	r2, r4
 8006454:	4649      	mov	r1, r9
 8006456:	4638      	mov	r0, r7
 8006458:	47c0      	blx	r8
 800645a:	3001      	adds	r0, #1
 800645c:	d0e6      	beq.n	800642c <_printf_common+0xa4>
 800645e:	3601      	adds	r6, #1
 8006460:	e7d9      	b.n	8006416 <_printf_common+0x8e>
	...

08006464 <_printf_i>:
 8006464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006468:	7e0f      	ldrb	r7, [r1, #24]
 800646a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800646c:	2f78      	cmp	r7, #120	; 0x78
 800646e:	4691      	mov	r9, r2
 8006470:	4680      	mov	r8, r0
 8006472:	460c      	mov	r4, r1
 8006474:	469a      	mov	sl, r3
 8006476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800647a:	d807      	bhi.n	800648c <_printf_i+0x28>
 800647c:	2f62      	cmp	r7, #98	; 0x62
 800647e:	d80a      	bhi.n	8006496 <_printf_i+0x32>
 8006480:	2f00      	cmp	r7, #0
 8006482:	f000 80d8 	beq.w	8006636 <_printf_i+0x1d2>
 8006486:	2f58      	cmp	r7, #88	; 0x58
 8006488:	f000 80a3 	beq.w	80065d2 <_printf_i+0x16e>
 800648c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006494:	e03a      	b.n	800650c <_printf_i+0xa8>
 8006496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800649a:	2b15      	cmp	r3, #21
 800649c:	d8f6      	bhi.n	800648c <_printf_i+0x28>
 800649e:	a101      	add	r1, pc, #4	; (adr r1, 80064a4 <_printf_i+0x40>)
 80064a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064a4:	080064fd 	.word	0x080064fd
 80064a8:	08006511 	.word	0x08006511
 80064ac:	0800648d 	.word	0x0800648d
 80064b0:	0800648d 	.word	0x0800648d
 80064b4:	0800648d 	.word	0x0800648d
 80064b8:	0800648d 	.word	0x0800648d
 80064bc:	08006511 	.word	0x08006511
 80064c0:	0800648d 	.word	0x0800648d
 80064c4:	0800648d 	.word	0x0800648d
 80064c8:	0800648d 	.word	0x0800648d
 80064cc:	0800648d 	.word	0x0800648d
 80064d0:	0800661d 	.word	0x0800661d
 80064d4:	08006541 	.word	0x08006541
 80064d8:	080065ff 	.word	0x080065ff
 80064dc:	0800648d 	.word	0x0800648d
 80064e0:	0800648d 	.word	0x0800648d
 80064e4:	0800663f 	.word	0x0800663f
 80064e8:	0800648d 	.word	0x0800648d
 80064ec:	08006541 	.word	0x08006541
 80064f0:	0800648d 	.word	0x0800648d
 80064f4:	0800648d 	.word	0x0800648d
 80064f8:	08006607 	.word	0x08006607
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	1d1a      	adds	r2, r3, #4
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	602a      	str	r2, [r5, #0]
 8006504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800650c:	2301      	movs	r3, #1
 800650e:	e0a3      	b.n	8006658 <_printf_i+0x1f4>
 8006510:	6820      	ldr	r0, [r4, #0]
 8006512:	6829      	ldr	r1, [r5, #0]
 8006514:	0606      	lsls	r6, r0, #24
 8006516:	f101 0304 	add.w	r3, r1, #4
 800651a:	d50a      	bpl.n	8006532 <_printf_i+0xce>
 800651c:	680e      	ldr	r6, [r1, #0]
 800651e:	602b      	str	r3, [r5, #0]
 8006520:	2e00      	cmp	r6, #0
 8006522:	da03      	bge.n	800652c <_printf_i+0xc8>
 8006524:	232d      	movs	r3, #45	; 0x2d
 8006526:	4276      	negs	r6, r6
 8006528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800652c:	485e      	ldr	r0, [pc, #376]	; (80066a8 <_printf_i+0x244>)
 800652e:	230a      	movs	r3, #10
 8006530:	e019      	b.n	8006566 <_printf_i+0x102>
 8006532:	680e      	ldr	r6, [r1, #0]
 8006534:	602b      	str	r3, [r5, #0]
 8006536:	f010 0f40 	tst.w	r0, #64	; 0x40
 800653a:	bf18      	it	ne
 800653c:	b236      	sxthne	r6, r6
 800653e:	e7ef      	b.n	8006520 <_printf_i+0xbc>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	6820      	ldr	r0, [r4, #0]
 8006544:	1d19      	adds	r1, r3, #4
 8006546:	6029      	str	r1, [r5, #0]
 8006548:	0601      	lsls	r1, r0, #24
 800654a:	d501      	bpl.n	8006550 <_printf_i+0xec>
 800654c:	681e      	ldr	r6, [r3, #0]
 800654e:	e002      	b.n	8006556 <_printf_i+0xf2>
 8006550:	0646      	lsls	r6, r0, #25
 8006552:	d5fb      	bpl.n	800654c <_printf_i+0xe8>
 8006554:	881e      	ldrh	r6, [r3, #0]
 8006556:	4854      	ldr	r0, [pc, #336]	; (80066a8 <_printf_i+0x244>)
 8006558:	2f6f      	cmp	r7, #111	; 0x6f
 800655a:	bf0c      	ite	eq
 800655c:	2308      	moveq	r3, #8
 800655e:	230a      	movne	r3, #10
 8006560:	2100      	movs	r1, #0
 8006562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006566:	6865      	ldr	r5, [r4, #4]
 8006568:	60a5      	str	r5, [r4, #8]
 800656a:	2d00      	cmp	r5, #0
 800656c:	bfa2      	ittt	ge
 800656e:	6821      	ldrge	r1, [r4, #0]
 8006570:	f021 0104 	bicge.w	r1, r1, #4
 8006574:	6021      	strge	r1, [r4, #0]
 8006576:	b90e      	cbnz	r6, 800657c <_printf_i+0x118>
 8006578:	2d00      	cmp	r5, #0
 800657a:	d04d      	beq.n	8006618 <_printf_i+0x1b4>
 800657c:	4615      	mov	r5, r2
 800657e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006582:	fb03 6711 	mls	r7, r3, r1, r6
 8006586:	5dc7      	ldrb	r7, [r0, r7]
 8006588:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800658c:	4637      	mov	r7, r6
 800658e:	42bb      	cmp	r3, r7
 8006590:	460e      	mov	r6, r1
 8006592:	d9f4      	bls.n	800657e <_printf_i+0x11a>
 8006594:	2b08      	cmp	r3, #8
 8006596:	d10b      	bne.n	80065b0 <_printf_i+0x14c>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	07de      	lsls	r6, r3, #31
 800659c:	d508      	bpl.n	80065b0 <_printf_i+0x14c>
 800659e:	6923      	ldr	r3, [r4, #16]
 80065a0:	6861      	ldr	r1, [r4, #4]
 80065a2:	4299      	cmp	r1, r3
 80065a4:	bfde      	ittt	le
 80065a6:	2330      	movle	r3, #48	; 0x30
 80065a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80065b0:	1b52      	subs	r2, r2, r5
 80065b2:	6122      	str	r2, [r4, #16]
 80065b4:	f8cd a000 	str.w	sl, [sp]
 80065b8:	464b      	mov	r3, r9
 80065ba:	aa03      	add	r2, sp, #12
 80065bc:	4621      	mov	r1, r4
 80065be:	4640      	mov	r0, r8
 80065c0:	f7ff fee2 	bl	8006388 <_printf_common>
 80065c4:	3001      	adds	r0, #1
 80065c6:	d14c      	bne.n	8006662 <_printf_i+0x1fe>
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065cc:	b004      	add	sp, #16
 80065ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d2:	4835      	ldr	r0, [pc, #212]	; (80066a8 <_printf_i+0x244>)
 80065d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065d8:	6829      	ldr	r1, [r5, #0]
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80065e0:	6029      	str	r1, [r5, #0]
 80065e2:	061d      	lsls	r5, r3, #24
 80065e4:	d514      	bpl.n	8006610 <_printf_i+0x1ac>
 80065e6:	07df      	lsls	r7, r3, #31
 80065e8:	bf44      	itt	mi
 80065ea:	f043 0320 	orrmi.w	r3, r3, #32
 80065ee:	6023      	strmi	r3, [r4, #0]
 80065f0:	b91e      	cbnz	r6, 80065fa <_printf_i+0x196>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	f023 0320 	bic.w	r3, r3, #32
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	2310      	movs	r3, #16
 80065fc:	e7b0      	b.n	8006560 <_printf_i+0xfc>
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	f043 0320 	orr.w	r3, r3, #32
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	2378      	movs	r3, #120	; 0x78
 8006608:	4828      	ldr	r0, [pc, #160]	; (80066ac <_printf_i+0x248>)
 800660a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800660e:	e7e3      	b.n	80065d8 <_printf_i+0x174>
 8006610:	0659      	lsls	r1, r3, #25
 8006612:	bf48      	it	mi
 8006614:	b2b6      	uxthmi	r6, r6
 8006616:	e7e6      	b.n	80065e6 <_printf_i+0x182>
 8006618:	4615      	mov	r5, r2
 800661a:	e7bb      	b.n	8006594 <_printf_i+0x130>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	6826      	ldr	r6, [r4, #0]
 8006620:	6961      	ldr	r1, [r4, #20]
 8006622:	1d18      	adds	r0, r3, #4
 8006624:	6028      	str	r0, [r5, #0]
 8006626:	0635      	lsls	r5, r6, #24
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	d501      	bpl.n	8006630 <_printf_i+0x1cc>
 800662c:	6019      	str	r1, [r3, #0]
 800662e:	e002      	b.n	8006636 <_printf_i+0x1d2>
 8006630:	0670      	lsls	r0, r6, #25
 8006632:	d5fb      	bpl.n	800662c <_printf_i+0x1c8>
 8006634:	8019      	strh	r1, [r3, #0]
 8006636:	2300      	movs	r3, #0
 8006638:	6123      	str	r3, [r4, #16]
 800663a:	4615      	mov	r5, r2
 800663c:	e7ba      	b.n	80065b4 <_printf_i+0x150>
 800663e:	682b      	ldr	r3, [r5, #0]
 8006640:	1d1a      	adds	r2, r3, #4
 8006642:	602a      	str	r2, [r5, #0]
 8006644:	681d      	ldr	r5, [r3, #0]
 8006646:	6862      	ldr	r2, [r4, #4]
 8006648:	2100      	movs	r1, #0
 800664a:	4628      	mov	r0, r5
 800664c:	f7f9 fdc0 	bl	80001d0 <memchr>
 8006650:	b108      	cbz	r0, 8006656 <_printf_i+0x1f2>
 8006652:	1b40      	subs	r0, r0, r5
 8006654:	6060      	str	r0, [r4, #4]
 8006656:	6863      	ldr	r3, [r4, #4]
 8006658:	6123      	str	r3, [r4, #16]
 800665a:	2300      	movs	r3, #0
 800665c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006660:	e7a8      	b.n	80065b4 <_printf_i+0x150>
 8006662:	6923      	ldr	r3, [r4, #16]
 8006664:	462a      	mov	r2, r5
 8006666:	4649      	mov	r1, r9
 8006668:	4640      	mov	r0, r8
 800666a:	47d0      	blx	sl
 800666c:	3001      	adds	r0, #1
 800666e:	d0ab      	beq.n	80065c8 <_printf_i+0x164>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	079b      	lsls	r3, r3, #30
 8006674:	d413      	bmi.n	800669e <_printf_i+0x23a>
 8006676:	68e0      	ldr	r0, [r4, #12]
 8006678:	9b03      	ldr	r3, [sp, #12]
 800667a:	4298      	cmp	r0, r3
 800667c:	bfb8      	it	lt
 800667e:	4618      	movlt	r0, r3
 8006680:	e7a4      	b.n	80065cc <_printf_i+0x168>
 8006682:	2301      	movs	r3, #1
 8006684:	4632      	mov	r2, r6
 8006686:	4649      	mov	r1, r9
 8006688:	4640      	mov	r0, r8
 800668a:	47d0      	blx	sl
 800668c:	3001      	adds	r0, #1
 800668e:	d09b      	beq.n	80065c8 <_printf_i+0x164>
 8006690:	3501      	adds	r5, #1
 8006692:	68e3      	ldr	r3, [r4, #12]
 8006694:	9903      	ldr	r1, [sp, #12]
 8006696:	1a5b      	subs	r3, r3, r1
 8006698:	42ab      	cmp	r3, r5
 800669a:	dcf2      	bgt.n	8006682 <_printf_i+0x21e>
 800669c:	e7eb      	b.n	8006676 <_printf_i+0x212>
 800669e:	2500      	movs	r5, #0
 80066a0:	f104 0619 	add.w	r6, r4, #25
 80066a4:	e7f5      	b.n	8006692 <_printf_i+0x22e>
 80066a6:	bf00      	nop
 80066a8:	0800706d 	.word	0x0800706d
 80066ac:	0800707e 	.word	0x0800707e

080066b0 <iprintf>:
 80066b0:	b40f      	push	{r0, r1, r2, r3}
 80066b2:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <iprintf+0x2c>)
 80066b4:	b513      	push	{r0, r1, r4, lr}
 80066b6:	681c      	ldr	r4, [r3, #0]
 80066b8:	b124      	cbz	r4, 80066c4 <iprintf+0x14>
 80066ba:	69a3      	ldr	r3, [r4, #24]
 80066bc:	b913      	cbnz	r3, 80066c4 <iprintf+0x14>
 80066be:	4620      	mov	r0, r4
 80066c0:	f000 f9e8 	bl	8006a94 <__sinit>
 80066c4:	ab05      	add	r3, sp, #20
 80066c6:	9a04      	ldr	r2, [sp, #16]
 80066c8:	68a1      	ldr	r1, [r4, #8]
 80066ca:	9301      	str	r3, [sp, #4]
 80066cc:	4620      	mov	r0, r4
 80066ce:	f7ff fd2b 	bl	8006128 <_vfiprintf_r>
 80066d2:	b002      	add	sp, #8
 80066d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d8:	b004      	add	sp, #16
 80066da:	4770      	bx	lr
 80066dc:	20000028 	.word	0x20000028

080066e0 <__swbuf_r>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	460e      	mov	r6, r1
 80066e4:	4614      	mov	r4, r2
 80066e6:	4605      	mov	r5, r0
 80066e8:	b118      	cbz	r0, 80066f2 <__swbuf_r+0x12>
 80066ea:	6983      	ldr	r3, [r0, #24]
 80066ec:	b90b      	cbnz	r3, 80066f2 <__swbuf_r+0x12>
 80066ee:	f000 f9d1 	bl	8006a94 <__sinit>
 80066f2:	4b21      	ldr	r3, [pc, #132]	; (8006778 <__swbuf_r+0x98>)
 80066f4:	429c      	cmp	r4, r3
 80066f6:	d12b      	bne.n	8006750 <__swbuf_r+0x70>
 80066f8:	686c      	ldr	r4, [r5, #4]
 80066fa:	69a3      	ldr	r3, [r4, #24]
 80066fc:	60a3      	str	r3, [r4, #8]
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	071a      	lsls	r2, r3, #28
 8006702:	d52f      	bpl.n	8006764 <__swbuf_r+0x84>
 8006704:	6923      	ldr	r3, [r4, #16]
 8006706:	b36b      	cbz	r3, 8006764 <__swbuf_r+0x84>
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	6820      	ldr	r0, [r4, #0]
 800670c:	1ac0      	subs	r0, r0, r3
 800670e:	6963      	ldr	r3, [r4, #20]
 8006710:	b2f6      	uxtb	r6, r6
 8006712:	4283      	cmp	r3, r0
 8006714:	4637      	mov	r7, r6
 8006716:	dc04      	bgt.n	8006722 <__swbuf_r+0x42>
 8006718:	4621      	mov	r1, r4
 800671a:	4628      	mov	r0, r5
 800671c:	f000 f926 	bl	800696c <_fflush_r>
 8006720:	bb30      	cbnz	r0, 8006770 <__swbuf_r+0x90>
 8006722:	68a3      	ldr	r3, [r4, #8]
 8006724:	3b01      	subs	r3, #1
 8006726:	60a3      	str	r3, [r4, #8]
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	6022      	str	r2, [r4, #0]
 800672e:	701e      	strb	r6, [r3, #0]
 8006730:	6963      	ldr	r3, [r4, #20]
 8006732:	3001      	adds	r0, #1
 8006734:	4283      	cmp	r3, r0
 8006736:	d004      	beq.n	8006742 <__swbuf_r+0x62>
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	07db      	lsls	r3, r3, #31
 800673c:	d506      	bpl.n	800674c <__swbuf_r+0x6c>
 800673e:	2e0a      	cmp	r6, #10
 8006740:	d104      	bne.n	800674c <__swbuf_r+0x6c>
 8006742:	4621      	mov	r1, r4
 8006744:	4628      	mov	r0, r5
 8006746:	f000 f911 	bl	800696c <_fflush_r>
 800674a:	b988      	cbnz	r0, 8006770 <__swbuf_r+0x90>
 800674c:	4638      	mov	r0, r7
 800674e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006750:	4b0a      	ldr	r3, [pc, #40]	; (800677c <__swbuf_r+0x9c>)
 8006752:	429c      	cmp	r4, r3
 8006754:	d101      	bne.n	800675a <__swbuf_r+0x7a>
 8006756:	68ac      	ldr	r4, [r5, #8]
 8006758:	e7cf      	b.n	80066fa <__swbuf_r+0x1a>
 800675a:	4b09      	ldr	r3, [pc, #36]	; (8006780 <__swbuf_r+0xa0>)
 800675c:	429c      	cmp	r4, r3
 800675e:	bf08      	it	eq
 8006760:	68ec      	ldreq	r4, [r5, #12]
 8006762:	e7ca      	b.n	80066fa <__swbuf_r+0x1a>
 8006764:	4621      	mov	r1, r4
 8006766:	4628      	mov	r0, r5
 8006768:	f000 f80c 	bl	8006784 <__swsetup_r>
 800676c:	2800      	cmp	r0, #0
 800676e:	d0cb      	beq.n	8006708 <__swbuf_r+0x28>
 8006770:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006774:	e7ea      	b.n	800674c <__swbuf_r+0x6c>
 8006776:	bf00      	nop
 8006778:	080070b0 	.word	0x080070b0
 800677c:	080070d0 	.word	0x080070d0
 8006780:	08007090 	.word	0x08007090

08006784 <__swsetup_r>:
 8006784:	4b32      	ldr	r3, [pc, #200]	; (8006850 <__swsetup_r+0xcc>)
 8006786:	b570      	push	{r4, r5, r6, lr}
 8006788:	681d      	ldr	r5, [r3, #0]
 800678a:	4606      	mov	r6, r0
 800678c:	460c      	mov	r4, r1
 800678e:	b125      	cbz	r5, 800679a <__swsetup_r+0x16>
 8006790:	69ab      	ldr	r3, [r5, #24]
 8006792:	b913      	cbnz	r3, 800679a <__swsetup_r+0x16>
 8006794:	4628      	mov	r0, r5
 8006796:	f000 f97d 	bl	8006a94 <__sinit>
 800679a:	4b2e      	ldr	r3, [pc, #184]	; (8006854 <__swsetup_r+0xd0>)
 800679c:	429c      	cmp	r4, r3
 800679e:	d10f      	bne.n	80067c0 <__swsetup_r+0x3c>
 80067a0:	686c      	ldr	r4, [r5, #4]
 80067a2:	89a3      	ldrh	r3, [r4, #12]
 80067a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067a8:	0719      	lsls	r1, r3, #28
 80067aa:	d42c      	bmi.n	8006806 <__swsetup_r+0x82>
 80067ac:	06dd      	lsls	r5, r3, #27
 80067ae:	d411      	bmi.n	80067d4 <__swsetup_r+0x50>
 80067b0:	2309      	movs	r3, #9
 80067b2:	6033      	str	r3, [r6, #0]
 80067b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067b8:	81a3      	strh	r3, [r4, #12]
 80067ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067be:	e03e      	b.n	800683e <__swsetup_r+0xba>
 80067c0:	4b25      	ldr	r3, [pc, #148]	; (8006858 <__swsetup_r+0xd4>)
 80067c2:	429c      	cmp	r4, r3
 80067c4:	d101      	bne.n	80067ca <__swsetup_r+0x46>
 80067c6:	68ac      	ldr	r4, [r5, #8]
 80067c8:	e7eb      	b.n	80067a2 <__swsetup_r+0x1e>
 80067ca:	4b24      	ldr	r3, [pc, #144]	; (800685c <__swsetup_r+0xd8>)
 80067cc:	429c      	cmp	r4, r3
 80067ce:	bf08      	it	eq
 80067d0:	68ec      	ldreq	r4, [r5, #12]
 80067d2:	e7e6      	b.n	80067a2 <__swsetup_r+0x1e>
 80067d4:	0758      	lsls	r0, r3, #29
 80067d6:	d512      	bpl.n	80067fe <__swsetup_r+0x7a>
 80067d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067da:	b141      	cbz	r1, 80067ee <__swsetup_r+0x6a>
 80067dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067e0:	4299      	cmp	r1, r3
 80067e2:	d002      	beq.n	80067ea <__swsetup_r+0x66>
 80067e4:	4630      	mov	r0, r6
 80067e6:	f000 fa5b 	bl	8006ca0 <_free_r>
 80067ea:	2300      	movs	r3, #0
 80067ec:	6363      	str	r3, [r4, #52]	; 0x34
 80067ee:	89a3      	ldrh	r3, [r4, #12]
 80067f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067f4:	81a3      	strh	r3, [r4, #12]
 80067f6:	2300      	movs	r3, #0
 80067f8:	6063      	str	r3, [r4, #4]
 80067fa:	6923      	ldr	r3, [r4, #16]
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	f043 0308 	orr.w	r3, r3, #8
 8006804:	81a3      	strh	r3, [r4, #12]
 8006806:	6923      	ldr	r3, [r4, #16]
 8006808:	b94b      	cbnz	r3, 800681e <__swsetup_r+0x9a>
 800680a:	89a3      	ldrh	r3, [r4, #12]
 800680c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006814:	d003      	beq.n	800681e <__swsetup_r+0x9a>
 8006816:	4621      	mov	r1, r4
 8006818:	4630      	mov	r0, r6
 800681a:	f000 fa01 	bl	8006c20 <__smakebuf_r>
 800681e:	89a0      	ldrh	r0, [r4, #12]
 8006820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006824:	f010 0301 	ands.w	r3, r0, #1
 8006828:	d00a      	beq.n	8006840 <__swsetup_r+0xbc>
 800682a:	2300      	movs	r3, #0
 800682c:	60a3      	str	r3, [r4, #8]
 800682e:	6963      	ldr	r3, [r4, #20]
 8006830:	425b      	negs	r3, r3
 8006832:	61a3      	str	r3, [r4, #24]
 8006834:	6923      	ldr	r3, [r4, #16]
 8006836:	b943      	cbnz	r3, 800684a <__swsetup_r+0xc6>
 8006838:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800683c:	d1ba      	bne.n	80067b4 <__swsetup_r+0x30>
 800683e:	bd70      	pop	{r4, r5, r6, pc}
 8006840:	0781      	lsls	r1, r0, #30
 8006842:	bf58      	it	pl
 8006844:	6963      	ldrpl	r3, [r4, #20]
 8006846:	60a3      	str	r3, [r4, #8]
 8006848:	e7f4      	b.n	8006834 <__swsetup_r+0xb0>
 800684a:	2000      	movs	r0, #0
 800684c:	e7f7      	b.n	800683e <__swsetup_r+0xba>
 800684e:	bf00      	nop
 8006850:	20000028 	.word	0x20000028
 8006854:	080070b0 	.word	0x080070b0
 8006858:	080070d0 	.word	0x080070d0
 800685c:	08007090 	.word	0x08007090

08006860 <__sflush_r>:
 8006860:	898a      	ldrh	r2, [r1, #12]
 8006862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006866:	4605      	mov	r5, r0
 8006868:	0710      	lsls	r0, r2, #28
 800686a:	460c      	mov	r4, r1
 800686c:	d458      	bmi.n	8006920 <__sflush_r+0xc0>
 800686e:	684b      	ldr	r3, [r1, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	dc05      	bgt.n	8006880 <__sflush_r+0x20>
 8006874:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006876:	2b00      	cmp	r3, #0
 8006878:	dc02      	bgt.n	8006880 <__sflush_r+0x20>
 800687a:	2000      	movs	r0, #0
 800687c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006880:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006882:	2e00      	cmp	r6, #0
 8006884:	d0f9      	beq.n	800687a <__sflush_r+0x1a>
 8006886:	2300      	movs	r3, #0
 8006888:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800688c:	682f      	ldr	r7, [r5, #0]
 800688e:	602b      	str	r3, [r5, #0]
 8006890:	d032      	beq.n	80068f8 <__sflush_r+0x98>
 8006892:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	075a      	lsls	r2, r3, #29
 8006898:	d505      	bpl.n	80068a6 <__sflush_r+0x46>
 800689a:	6863      	ldr	r3, [r4, #4]
 800689c:	1ac0      	subs	r0, r0, r3
 800689e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068a0:	b10b      	cbz	r3, 80068a6 <__sflush_r+0x46>
 80068a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068a4:	1ac0      	subs	r0, r0, r3
 80068a6:	2300      	movs	r3, #0
 80068a8:	4602      	mov	r2, r0
 80068aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068ac:	6a21      	ldr	r1, [r4, #32]
 80068ae:	4628      	mov	r0, r5
 80068b0:	47b0      	blx	r6
 80068b2:	1c43      	adds	r3, r0, #1
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	d106      	bne.n	80068c6 <__sflush_r+0x66>
 80068b8:	6829      	ldr	r1, [r5, #0]
 80068ba:	291d      	cmp	r1, #29
 80068bc:	d82c      	bhi.n	8006918 <__sflush_r+0xb8>
 80068be:	4a2a      	ldr	r2, [pc, #168]	; (8006968 <__sflush_r+0x108>)
 80068c0:	40ca      	lsrs	r2, r1
 80068c2:	07d6      	lsls	r6, r2, #31
 80068c4:	d528      	bpl.n	8006918 <__sflush_r+0xb8>
 80068c6:	2200      	movs	r2, #0
 80068c8:	6062      	str	r2, [r4, #4]
 80068ca:	04d9      	lsls	r1, r3, #19
 80068cc:	6922      	ldr	r2, [r4, #16]
 80068ce:	6022      	str	r2, [r4, #0]
 80068d0:	d504      	bpl.n	80068dc <__sflush_r+0x7c>
 80068d2:	1c42      	adds	r2, r0, #1
 80068d4:	d101      	bne.n	80068da <__sflush_r+0x7a>
 80068d6:	682b      	ldr	r3, [r5, #0]
 80068d8:	b903      	cbnz	r3, 80068dc <__sflush_r+0x7c>
 80068da:	6560      	str	r0, [r4, #84]	; 0x54
 80068dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068de:	602f      	str	r7, [r5, #0]
 80068e0:	2900      	cmp	r1, #0
 80068e2:	d0ca      	beq.n	800687a <__sflush_r+0x1a>
 80068e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068e8:	4299      	cmp	r1, r3
 80068ea:	d002      	beq.n	80068f2 <__sflush_r+0x92>
 80068ec:	4628      	mov	r0, r5
 80068ee:	f000 f9d7 	bl	8006ca0 <_free_r>
 80068f2:	2000      	movs	r0, #0
 80068f4:	6360      	str	r0, [r4, #52]	; 0x34
 80068f6:	e7c1      	b.n	800687c <__sflush_r+0x1c>
 80068f8:	6a21      	ldr	r1, [r4, #32]
 80068fa:	2301      	movs	r3, #1
 80068fc:	4628      	mov	r0, r5
 80068fe:	47b0      	blx	r6
 8006900:	1c41      	adds	r1, r0, #1
 8006902:	d1c7      	bne.n	8006894 <__sflush_r+0x34>
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0c4      	beq.n	8006894 <__sflush_r+0x34>
 800690a:	2b1d      	cmp	r3, #29
 800690c:	d001      	beq.n	8006912 <__sflush_r+0xb2>
 800690e:	2b16      	cmp	r3, #22
 8006910:	d101      	bne.n	8006916 <__sflush_r+0xb6>
 8006912:	602f      	str	r7, [r5, #0]
 8006914:	e7b1      	b.n	800687a <__sflush_r+0x1a>
 8006916:	89a3      	ldrh	r3, [r4, #12]
 8006918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800691c:	81a3      	strh	r3, [r4, #12]
 800691e:	e7ad      	b.n	800687c <__sflush_r+0x1c>
 8006920:	690f      	ldr	r7, [r1, #16]
 8006922:	2f00      	cmp	r7, #0
 8006924:	d0a9      	beq.n	800687a <__sflush_r+0x1a>
 8006926:	0793      	lsls	r3, r2, #30
 8006928:	680e      	ldr	r6, [r1, #0]
 800692a:	bf08      	it	eq
 800692c:	694b      	ldreq	r3, [r1, #20]
 800692e:	600f      	str	r7, [r1, #0]
 8006930:	bf18      	it	ne
 8006932:	2300      	movne	r3, #0
 8006934:	eba6 0807 	sub.w	r8, r6, r7
 8006938:	608b      	str	r3, [r1, #8]
 800693a:	f1b8 0f00 	cmp.w	r8, #0
 800693e:	dd9c      	ble.n	800687a <__sflush_r+0x1a>
 8006940:	6a21      	ldr	r1, [r4, #32]
 8006942:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006944:	4643      	mov	r3, r8
 8006946:	463a      	mov	r2, r7
 8006948:	4628      	mov	r0, r5
 800694a:	47b0      	blx	r6
 800694c:	2800      	cmp	r0, #0
 800694e:	dc06      	bgt.n	800695e <__sflush_r+0xfe>
 8006950:	89a3      	ldrh	r3, [r4, #12]
 8006952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006956:	81a3      	strh	r3, [r4, #12]
 8006958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800695c:	e78e      	b.n	800687c <__sflush_r+0x1c>
 800695e:	4407      	add	r7, r0
 8006960:	eba8 0800 	sub.w	r8, r8, r0
 8006964:	e7e9      	b.n	800693a <__sflush_r+0xda>
 8006966:	bf00      	nop
 8006968:	20400001 	.word	0x20400001

0800696c <_fflush_r>:
 800696c:	b538      	push	{r3, r4, r5, lr}
 800696e:	690b      	ldr	r3, [r1, #16]
 8006970:	4605      	mov	r5, r0
 8006972:	460c      	mov	r4, r1
 8006974:	b913      	cbnz	r3, 800697c <_fflush_r+0x10>
 8006976:	2500      	movs	r5, #0
 8006978:	4628      	mov	r0, r5
 800697a:	bd38      	pop	{r3, r4, r5, pc}
 800697c:	b118      	cbz	r0, 8006986 <_fflush_r+0x1a>
 800697e:	6983      	ldr	r3, [r0, #24]
 8006980:	b90b      	cbnz	r3, 8006986 <_fflush_r+0x1a>
 8006982:	f000 f887 	bl	8006a94 <__sinit>
 8006986:	4b14      	ldr	r3, [pc, #80]	; (80069d8 <_fflush_r+0x6c>)
 8006988:	429c      	cmp	r4, r3
 800698a:	d11b      	bne.n	80069c4 <_fflush_r+0x58>
 800698c:	686c      	ldr	r4, [r5, #4]
 800698e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d0ef      	beq.n	8006976 <_fflush_r+0xa>
 8006996:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006998:	07d0      	lsls	r0, r2, #31
 800699a:	d404      	bmi.n	80069a6 <_fflush_r+0x3a>
 800699c:	0599      	lsls	r1, r3, #22
 800699e:	d402      	bmi.n	80069a6 <_fflush_r+0x3a>
 80069a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069a2:	f000 f915 	bl	8006bd0 <__retarget_lock_acquire_recursive>
 80069a6:	4628      	mov	r0, r5
 80069a8:	4621      	mov	r1, r4
 80069aa:	f7ff ff59 	bl	8006860 <__sflush_r>
 80069ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069b0:	07da      	lsls	r2, r3, #31
 80069b2:	4605      	mov	r5, r0
 80069b4:	d4e0      	bmi.n	8006978 <_fflush_r+0xc>
 80069b6:	89a3      	ldrh	r3, [r4, #12]
 80069b8:	059b      	lsls	r3, r3, #22
 80069ba:	d4dd      	bmi.n	8006978 <_fflush_r+0xc>
 80069bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069be:	f000 f908 	bl	8006bd2 <__retarget_lock_release_recursive>
 80069c2:	e7d9      	b.n	8006978 <_fflush_r+0xc>
 80069c4:	4b05      	ldr	r3, [pc, #20]	; (80069dc <_fflush_r+0x70>)
 80069c6:	429c      	cmp	r4, r3
 80069c8:	d101      	bne.n	80069ce <_fflush_r+0x62>
 80069ca:	68ac      	ldr	r4, [r5, #8]
 80069cc:	e7df      	b.n	800698e <_fflush_r+0x22>
 80069ce:	4b04      	ldr	r3, [pc, #16]	; (80069e0 <_fflush_r+0x74>)
 80069d0:	429c      	cmp	r4, r3
 80069d2:	bf08      	it	eq
 80069d4:	68ec      	ldreq	r4, [r5, #12]
 80069d6:	e7da      	b.n	800698e <_fflush_r+0x22>
 80069d8:	080070b0 	.word	0x080070b0
 80069dc:	080070d0 	.word	0x080070d0
 80069e0:	08007090 	.word	0x08007090

080069e4 <std>:
 80069e4:	2300      	movs	r3, #0
 80069e6:	b510      	push	{r4, lr}
 80069e8:	4604      	mov	r4, r0
 80069ea:	e9c0 3300 	strd	r3, r3, [r0]
 80069ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069f2:	6083      	str	r3, [r0, #8]
 80069f4:	8181      	strh	r1, [r0, #12]
 80069f6:	6643      	str	r3, [r0, #100]	; 0x64
 80069f8:	81c2      	strh	r2, [r0, #14]
 80069fa:	6183      	str	r3, [r0, #24]
 80069fc:	4619      	mov	r1, r3
 80069fe:	2208      	movs	r2, #8
 8006a00:	305c      	adds	r0, #92	; 0x5c
 8006a02:	f7ff fb5f 	bl	80060c4 <memset>
 8006a06:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <std+0x38>)
 8006a08:	6263      	str	r3, [r4, #36]	; 0x24
 8006a0a:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <std+0x3c>)
 8006a0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a0e:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <std+0x40>)
 8006a10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a12:	4b05      	ldr	r3, [pc, #20]	; (8006a28 <std+0x44>)
 8006a14:	6224      	str	r4, [r4, #32]
 8006a16:	6323      	str	r3, [r4, #48]	; 0x30
 8006a18:	bd10      	pop	{r4, pc}
 8006a1a:	bf00      	nop
 8006a1c:	08006e81 	.word	0x08006e81
 8006a20:	08006ea3 	.word	0x08006ea3
 8006a24:	08006edb 	.word	0x08006edb
 8006a28:	08006eff 	.word	0x08006eff

08006a2c <_cleanup_r>:
 8006a2c:	4901      	ldr	r1, [pc, #4]	; (8006a34 <_cleanup_r+0x8>)
 8006a2e:	f000 b8af 	b.w	8006b90 <_fwalk_reent>
 8006a32:	bf00      	nop
 8006a34:	0800696d 	.word	0x0800696d

08006a38 <__sfmoreglue>:
 8006a38:	b570      	push	{r4, r5, r6, lr}
 8006a3a:	2268      	movs	r2, #104	; 0x68
 8006a3c:	1e4d      	subs	r5, r1, #1
 8006a3e:	4355      	muls	r5, r2
 8006a40:	460e      	mov	r6, r1
 8006a42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a46:	f000 f997 	bl	8006d78 <_malloc_r>
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	b140      	cbz	r0, 8006a60 <__sfmoreglue+0x28>
 8006a4e:	2100      	movs	r1, #0
 8006a50:	e9c0 1600 	strd	r1, r6, [r0]
 8006a54:	300c      	adds	r0, #12
 8006a56:	60a0      	str	r0, [r4, #8]
 8006a58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a5c:	f7ff fb32 	bl	80060c4 <memset>
 8006a60:	4620      	mov	r0, r4
 8006a62:	bd70      	pop	{r4, r5, r6, pc}

08006a64 <__sfp_lock_acquire>:
 8006a64:	4801      	ldr	r0, [pc, #4]	; (8006a6c <__sfp_lock_acquire+0x8>)
 8006a66:	f000 b8b3 	b.w	8006bd0 <__retarget_lock_acquire_recursive>
 8006a6a:	bf00      	nop
 8006a6c:	200001ed 	.word	0x200001ed

08006a70 <__sfp_lock_release>:
 8006a70:	4801      	ldr	r0, [pc, #4]	; (8006a78 <__sfp_lock_release+0x8>)
 8006a72:	f000 b8ae 	b.w	8006bd2 <__retarget_lock_release_recursive>
 8006a76:	bf00      	nop
 8006a78:	200001ed 	.word	0x200001ed

08006a7c <__sinit_lock_acquire>:
 8006a7c:	4801      	ldr	r0, [pc, #4]	; (8006a84 <__sinit_lock_acquire+0x8>)
 8006a7e:	f000 b8a7 	b.w	8006bd0 <__retarget_lock_acquire_recursive>
 8006a82:	bf00      	nop
 8006a84:	200001ee 	.word	0x200001ee

08006a88 <__sinit_lock_release>:
 8006a88:	4801      	ldr	r0, [pc, #4]	; (8006a90 <__sinit_lock_release+0x8>)
 8006a8a:	f000 b8a2 	b.w	8006bd2 <__retarget_lock_release_recursive>
 8006a8e:	bf00      	nop
 8006a90:	200001ee 	.word	0x200001ee

08006a94 <__sinit>:
 8006a94:	b510      	push	{r4, lr}
 8006a96:	4604      	mov	r4, r0
 8006a98:	f7ff fff0 	bl	8006a7c <__sinit_lock_acquire>
 8006a9c:	69a3      	ldr	r3, [r4, #24]
 8006a9e:	b11b      	cbz	r3, 8006aa8 <__sinit+0x14>
 8006aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa4:	f7ff bff0 	b.w	8006a88 <__sinit_lock_release>
 8006aa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006aac:	6523      	str	r3, [r4, #80]	; 0x50
 8006aae:	4b13      	ldr	r3, [pc, #76]	; (8006afc <__sinit+0x68>)
 8006ab0:	4a13      	ldr	r2, [pc, #76]	; (8006b00 <__sinit+0x6c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ab6:	42a3      	cmp	r3, r4
 8006ab8:	bf04      	itt	eq
 8006aba:	2301      	moveq	r3, #1
 8006abc:	61a3      	streq	r3, [r4, #24]
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f000 f820 	bl	8006b04 <__sfp>
 8006ac4:	6060      	str	r0, [r4, #4]
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f000 f81c 	bl	8006b04 <__sfp>
 8006acc:	60a0      	str	r0, [r4, #8]
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f000 f818 	bl	8006b04 <__sfp>
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	60e0      	str	r0, [r4, #12]
 8006ad8:	2104      	movs	r1, #4
 8006ada:	6860      	ldr	r0, [r4, #4]
 8006adc:	f7ff ff82 	bl	80069e4 <std>
 8006ae0:	68a0      	ldr	r0, [r4, #8]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	2109      	movs	r1, #9
 8006ae6:	f7ff ff7d 	bl	80069e4 <std>
 8006aea:	68e0      	ldr	r0, [r4, #12]
 8006aec:	2202      	movs	r2, #2
 8006aee:	2112      	movs	r1, #18
 8006af0:	f7ff ff78 	bl	80069e4 <std>
 8006af4:	2301      	movs	r3, #1
 8006af6:	61a3      	str	r3, [r4, #24]
 8006af8:	e7d2      	b.n	8006aa0 <__sinit+0xc>
 8006afa:	bf00      	nop
 8006afc:	08007058 	.word	0x08007058
 8006b00:	08006a2d 	.word	0x08006a2d

08006b04 <__sfp>:
 8006b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b06:	4607      	mov	r7, r0
 8006b08:	f7ff ffac 	bl	8006a64 <__sfp_lock_acquire>
 8006b0c:	4b1e      	ldr	r3, [pc, #120]	; (8006b88 <__sfp+0x84>)
 8006b0e:	681e      	ldr	r6, [r3, #0]
 8006b10:	69b3      	ldr	r3, [r6, #24]
 8006b12:	b913      	cbnz	r3, 8006b1a <__sfp+0x16>
 8006b14:	4630      	mov	r0, r6
 8006b16:	f7ff ffbd 	bl	8006a94 <__sinit>
 8006b1a:	3648      	adds	r6, #72	; 0x48
 8006b1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	d503      	bpl.n	8006b2c <__sfp+0x28>
 8006b24:	6833      	ldr	r3, [r6, #0]
 8006b26:	b30b      	cbz	r3, 8006b6c <__sfp+0x68>
 8006b28:	6836      	ldr	r6, [r6, #0]
 8006b2a:	e7f7      	b.n	8006b1c <__sfp+0x18>
 8006b2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b30:	b9d5      	cbnz	r5, 8006b68 <__sfp+0x64>
 8006b32:	4b16      	ldr	r3, [pc, #88]	; (8006b8c <__sfp+0x88>)
 8006b34:	60e3      	str	r3, [r4, #12]
 8006b36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b3a:	6665      	str	r5, [r4, #100]	; 0x64
 8006b3c:	f000 f847 	bl	8006bce <__retarget_lock_init_recursive>
 8006b40:	f7ff ff96 	bl	8006a70 <__sfp_lock_release>
 8006b44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b4c:	6025      	str	r5, [r4, #0]
 8006b4e:	61a5      	str	r5, [r4, #24]
 8006b50:	2208      	movs	r2, #8
 8006b52:	4629      	mov	r1, r5
 8006b54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b58:	f7ff fab4 	bl	80060c4 <memset>
 8006b5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b64:	4620      	mov	r0, r4
 8006b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b68:	3468      	adds	r4, #104	; 0x68
 8006b6a:	e7d9      	b.n	8006b20 <__sfp+0x1c>
 8006b6c:	2104      	movs	r1, #4
 8006b6e:	4638      	mov	r0, r7
 8006b70:	f7ff ff62 	bl	8006a38 <__sfmoreglue>
 8006b74:	4604      	mov	r4, r0
 8006b76:	6030      	str	r0, [r6, #0]
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d1d5      	bne.n	8006b28 <__sfp+0x24>
 8006b7c:	f7ff ff78 	bl	8006a70 <__sfp_lock_release>
 8006b80:	230c      	movs	r3, #12
 8006b82:	603b      	str	r3, [r7, #0]
 8006b84:	e7ee      	b.n	8006b64 <__sfp+0x60>
 8006b86:	bf00      	nop
 8006b88:	08007058 	.word	0x08007058
 8006b8c:	ffff0001 	.word	0xffff0001

08006b90 <_fwalk_reent>:
 8006b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b94:	4606      	mov	r6, r0
 8006b96:	4688      	mov	r8, r1
 8006b98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b9c:	2700      	movs	r7, #0
 8006b9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ba2:	f1b9 0901 	subs.w	r9, r9, #1
 8006ba6:	d505      	bpl.n	8006bb4 <_fwalk_reent+0x24>
 8006ba8:	6824      	ldr	r4, [r4, #0]
 8006baa:	2c00      	cmp	r4, #0
 8006bac:	d1f7      	bne.n	8006b9e <_fwalk_reent+0xe>
 8006bae:	4638      	mov	r0, r7
 8006bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bb4:	89ab      	ldrh	r3, [r5, #12]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d907      	bls.n	8006bca <_fwalk_reent+0x3a>
 8006bba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	d003      	beq.n	8006bca <_fwalk_reent+0x3a>
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	47c0      	blx	r8
 8006bc8:	4307      	orrs	r7, r0
 8006bca:	3568      	adds	r5, #104	; 0x68
 8006bcc:	e7e9      	b.n	8006ba2 <_fwalk_reent+0x12>

08006bce <__retarget_lock_init_recursive>:
 8006bce:	4770      	bx	lr

08006bd0 <__retarget_lock_acquire_recursive>:
 8006bd0:	4770      	bx	lr

08006bd2 <__retarget_lock_release_recursive>:
 8006bd2:	4770      	bx	lr

08006bd4 <__swhatbuf_r>:
 8006bd4:	b570      	push	{r4, r5, r6, lr}
 8006bd6:	460e      	mov	r6, r1
 8006bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bdc:	2900      	cmp	r1, #0
 8006bde:	b096      	sub	sp, #88	; 0x58
 8006be0:	4614      	mov	r4, r2
 8006be2:	461d      	mov	r5, r3
 8006be4:	da08      	bge.n	8006bf8 <__swhatbuf_r+0x24>
 8006be6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	602a      	str	r2, [r5, #0]
 8006bee:	061a      	lsls	r2, r3, #24
 8006bf0:	d410      	bmi.n	8006c14 <__swhatbuf_r+0x40>
 8006bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bf6:	e00e      	b.n	8006c16 <__swhatbuf_r+0x42>
 8006bf8:	466a      	mov	r2, sp
 8006bfa:	f000 f9a7 	bl	8006f4c <_fstat_r>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	dbf1      	blt.n	8006be6 <__swhatbuf_r+0x12>
 8006c02:	9a01      	ldr	r2, [sp, #4]
 8006c04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c0c:	425a      	negs	r2, r3
 8006c0e:	415a      	adcs	r2, r3
 8006c10:	602a      	str	r2, [r5, #0]
 8006c12:	e7ee      	b.n	8006bf2 <__swhatbuf_r+0x1e>
 8006c14:	2340      	movs	r3, #64	; 0x40
 8006c16:	2000      	movs	r0, #0
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	b016      	add	sp, #88	; 0x58
 8006c1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c20 <__smakebuf_r>:
 8006c20:	898b      	ldrh	r3, [r1, #12]
 8006c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c24:	079d      	lsls	r5, r3, #30
 8006c26:	4606      	mov	r6, r0
 8006c28:	460c      	mov	r4, r1
 8006c2a:	d507      	bpl.n	8006c3c <__smakebuf_r+0x1c>
 8006c2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	6123      	str	r3, [r4, #16]
 8006c34:	2301      	movs	r3, #1
 8006c36:	6163      	str	r3, [r4, #20]
 8006c38:	b002      	add	sp, #8
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
 8006c3c:	ab01      	add	r3, sp, #4
 8006c3e:	466a      	mov	r2, sp
 8006c40:	f7ff ffc8 	bl	8006bd4 <__swhatbuf_r>
 8006c44:	9900      	ldr	r1, [sp, #0]
 8006c46:	4605      	mov	r5, r0
 8006c48:	4630      	mov	r0, r6
 8006c4a:	f000 f895 	bl	8006d78 <_malloc_r>
 8006c4e:	b948      	cbnz	r0, 8006c64 <__smakebuf_r+0x44>
 8006c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c54:	059a      	lsls	r2, r3, #22
 8006c56:	d4ef      	bmi.n	8006c38 <__smakebuf_r+0x18>
 8006c58:	f023 0303 	bic.w	r3, r3, #3
 8006c5c:	f043 0302 	orr.w	r3, r3, #2
 8006c60:	81a3      	strh	r3, [r4, #12]
 8006c62:	e7e3      	b.n	8006c2c <__smakebuf_r+0xc>
 8006c64:	4b0d      	ldr	r3, [pc, #52]	; (8006c9c <__smakebuf_r+0x7c>)
 8006c66:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c68:	89a3      	ldrh	r3, [r4, #12]
 8006c6a:	6020      	str	r0, [r4, #0]
 8006c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c70:	81a3      	strh	r3, [r4, #12]
 8006c72:	9b00      	ldr	r3, [sp, #0]
 8006c74:	6163      	str	r3, [r4, #20]
 8006c76:	9b01      	ldr	r3, [sp, #4]
 8006c78:	6120      	str	r0, [r4, #16]
 8006c7a:	b15b      	cbz	r3, 8006c94 <__smakebuf_r+0x74>
 8006c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c80:	4630      	mov	r0, r6
 8006c82:	f000 f975 	bl	8006f70 <_isatty_r>
 8006c86:	b128      	cbz	r0, 8006c94 <__smakebuf_r+0x74>
 8006c88:	89a3      	ldrh	r3, [r4, #12]
 8006c8a:	f023 0303 	bic.w	r3, r3, #3
 8006c8e:	f043 0301 	orr.w	r3, r3, #1
 8006c92:	81a3      	strh	r3, [r4, #12]
 8006c94:	89a0      	ldrh	r0, [r4, #12]
 8006c96:	4305      	orrs	r5, r0
 8006c98:	81a5      	strh	r5, [r4, #12]
 8006c9a:	e7cd      	b.n	8006c38 <__smakebuf_r+0x18>
 8006c9c:	08006a2d 	.word	0x08006a2d

08006ca0 <_free_r>:
 8006ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ca2:	2900      	cmp	r1, #0
 8006ca4:	d044      	beq.n	8006d30 <_free_r+0x90>
 8006ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006caa:	9001      	str	r0, [sp, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f1a1 0404 	sub.w	r4, r1, #4
 8006cb2:	bfb8      	it	lt
 8006cb4:	18e4      	addlt	r4, r4, r3
 8006cb6:	f000 f97d 	bl	8006fb4 <__malloc_lock>
 8006cba:	4a1e      	ldr	r2, [pc, #120]	; (8006d34 <_free_r+0x94>)
 8006cbc:	9801      	ldr	r0, [sp, #4]
 8006cbe:	6813      	ldr	r3, [r2, #0]
 8006cc0:	b933      	cbnz	r3, 8006cd0 <_free_r+0x30>
 8006cc2:	6063      	str	r3, [r4, #4]
 8006cc4:	6014      	str	r4, [r2, #0]
 8006cc6:	b003      	add	sp, #12
 8006cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ccc:	f000 b978 	b.w	8006fc0 <__malloc_unlock>
 8006cd0:	42a3      	cmp	r3, r4
 8006cd2:	d908      	bls.n	8006ce6 <_free_r+0x46>
 8006cd4:	6825      	ldr	r5, [r4, #0]
 8006cd6:	1961      	adds	r1, r4, r5
 8006cd8:	428b      	cmp	r3, r1
 8006cda:	bf01      	itttt	eq
 8006cdc:	6819      	ldreq	r1, [r3, #0]
 8006cde:	685b      	ldreq	r3, [r3, #4]
 8006ce0:	1949      	addeq	r1, r1, r5
 8006ce2:	6021      	streq	r1, [r4, #0]
 8006ce4:	e7ed      	b.n	8006cc2 <_free_r+0x22>
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	b10b      	cbz	r3, 8006cf0 <_free_r+0x50>
 8006cec:	42a3      	cmp	r3, r4
 8006cee:	d9fa      	bls.n	8006ce6 <_free_r+0x46>
 8006cf0:	6811      	ldr	r1, [r2, #0]
 8006cf2:	1855      	adds	r5, r2, r1
 8006cf4:	42a5      	cmp	r5, r4
 8006cf6:	d10b      	bne.n	8006d10 <_free_r+0x70>
 8006cf8:	6824      	ldr	r4, [r4, #0]
 8006cfa:	4421      	add	r1, r4
 8006cfc:	1854      	adds	r4, r2, r1
 8006cfe:	42a3      	cmp	r3, r4
 8006d00:	6011      	str	r1, [r2, #0]
 8006d02:	d1e0      	bne.n	8006cc6 <_free_r+0x26>
 8006d04:	681c      	ldr	r4, [r3, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	6053      	str	r3, [r2, #4]
 8006d0a:	4421      	add	r1, r4
 8006d0c:	6011      	str	r1, [r2, #0]
 8006d0e:	e7da      	b.n	8006cc6 <_free_r+0x26>
 8006d10:	d902      	bls.n	8006d18 <_free_r+0x78>
 8006d12:	230c      	movs	r3, #12
 8006d14:	6003      	str	r3, [r0, #0]
 8006d16:	e7d6      	b.n	8006cc6 <_free_r+0x26>
 8006d18:	6825      	ldr	r5, [r4, #0]
 8006d1a:	1961      	adds	r1, r4, r5
 8006d1c:	428b      	cmp	r3, r1
 8006d1e:	bf04      	itt	eq
 8006d20:	6819      	ldreq	r1, [r3, #0]
 8006d22:	685b      	ldreq	r3, [r3, #4]
 8006d24:	6063      	str	r3, [r4, #4]
 8006d26:	bf04      	itt	eq
 8006d28:	1949      	addeq	r1, r1, r5
 8006d2a:	6021      	streq	r1, [r4, #0]
 8006d2c:	6054      	str	r4, [r2, #4]
 8006d2e:	e7ca      	b.n	8006cc6 <_free_r+0x26>
 8006d30:	b003      	add	sp, #12
 8006d32:	bd30      	pop	{r4, r5, pc}
 8006d34:	200001f0 	.word	0x200001f0

08006d38 <sbrk_aligned>:
 8006d38:	b570      	push	{r4, r5, r6, lr}
 8006d3a:	4e0e      	ldr	r6, [pc, #56]	; (8006d74 <sbrk_aligned+0x3c>)
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	6831      	ldr	r1, [r6, #0]
 8006d40:	4605      	mov	r5, r0
 8006d42:	b911      	cbnz	r1, 8006d4a <sbrk_aligned+0x12>
 8006d44:	f000 f88c 	bl	8006e60 <_sbrk_r>
 8006d48:	6030      	str	r0, [r6, #0]
 8006d4a:	4621      	mov	r1, r4
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	f000 f887 	bl	8006e60 <_sbrk_r>
 8006d52:	1c43      	adds	r3, r0, #1
 8006d54:	d00a      	beq.n	8006d6c <sbrk_aligned+0x34>
 8006d56:	1cc4      	adds	r4, r0, #3
 8006d58:	f024 0403 	bic.w	r4, r4, #3
 8006d5c:	42a0      	cmp	r0, r4
 8006d5e:	d007      	beq.n	8006d70 <sbrk_aligned+0x38>
 8006d60:	1a21      	subs	r1, r4, r0
 8006d62:	4628      	mov	r0, r5
 8006d64:	f000 f87c 	bl	8006e60 <_sbrk_r>
 8006d68:	3001      	adds	r0, #1
 8006d6a:	d101      	bne.n	8006d70 <sbrk_aligned+0x38>
 8006d6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006d70:	4620      	mov	r0, r4
 8006d72:	bd70      	pop	{r4, r5, r6, pc}
 8006d74:	200001f4 	.word	0x200001f4

08006d78 <_malloc_r>:
 8006d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d7c:	1ccd      	adds	r5, r1, #3
 8006d7e:	f025 0503 	bic.w	r5, r5, #3
 8006d82:	3508      	adds	r5, #8
 8006d84:	2d0c      	cmp	r5, #12
 8006d86:	bf38      	it	cc
 8006d88:	250c      	movcc	r5, #12
 8006d8a:	2d00      	cmp	r5, #0
 8006d8c:	4607      	mov	r7, r0
 8006d8e:	db01      	blt.n	8006d94 <_malloc_r+0x1c>
 8006d90:	42a9      	cmp	r1, r5
 8006d92:	d905      	bls.n	8006da0 <_malloc_r+0x28>
 8006d94:	230c      	movs	r3, #12
 8006d96:	603b      	str	r3, [r7, #0]
 8006d98:	2600      	movs	r6, #0
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006da0:	4e2e      	ldr	r6, [pc, #184]	; (8006e5c <_malloc_r+0xe4>)
 8006da2:	f000 f907 	bl	8006fb4 <__malloc_lock>
 8006da6:	6833      	ldr	r3, [r6, #0]
 8006da8:	461c      	mov	r4, r3
 8006daa:	bb34      	cbnz	r4, 8006dfa <_malloc_r+0x82>
 8006dac:	4629      	mov	r1, r5
 8006dae:	4638      	mov	r0, r7
 8006db0:	f7ff ffc2 	bl	8006d38 <sbrk_aligned>
 8006db4:	1c43      	adds	r3, r0, #1
 8006db6:	4604      	mov	r4, r0
 8006db8:	d14d      	bne.n	8006e56 <_malloc_r+0xde>
 8006dba:	6834      	ldr	r4, [r6, #0]
 8006dbc:	4626      	mov	r6, r4
 8006dbe:	2e00      	cmp	r6, #0
 8006dc0:	d140      	bne.n	8006e44 <_malloc_r+0xcc>
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	eb04 0803 	add.w	r8, r4, r3
 8006dcc:	f000 f848 	bl	8006e60 <_sbrk_r>
 8006dd0:	4580      	cmp	r8, r0
 8006dd2:	d13a      	bne.n	8006e4a <_malloc_r+0xd2>
 8006dd4:	6821      	ldr	r1, [r4, #0]
 8006dd6:	3503      	adds	r5, #3
 8006dd8:	1a6d      	subs	r5, r5, r1
 8006dda:	f025 0503 	bic.w	r5, r5, #3
 8006dde:	3508      	adds	r5, #8
 8006de0:	2d0c      	cmp	r5, #12
 8006de2:	bf38      	it	cc
 8006de4:	250c      	movcc	r5, #12
 8006de6:	4629      	mov	r1, r5
 8006de8:	4638      	mov	r0, r7
 8006dea:	f7ff ffa5 	bl	8006d38 <sbrk_aligned>
 8006dee:	3001      	adds	r0, #1
 8006df0:	d02b      	beq.n	8006e4a <_malloc_r+0xd2>
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	442b      	add	r3, r5
 8006df6:	6023      	str	r3, [r4, #0]
 8006df8:	e00e      	b.n	8006e18 <_malloc_r+0xa0>
 8006dfa:	6822      	ldr	r2, [r4, #0]
 8006dfc:	1b52      	subs	r2, r2, r5
 8006dfe:	d41e      	bmi.n	8006e3e <_malloc_r+0xc6>
 8006e00:	2a0b      	cmp	r2, #11
 8006e02:	d916      	bls.n	8006e32 <_malloc_r+0xba>
 8006e04:	1961      	adds	r1, r4, r5
 8006e06:	42a3      	cmp	r3, r4
 8006e08:	6025      	str	r5, [r4, #0]
 8006e0a:	bf18      	it	ne
 8006e0c:	6059      	strne	r1, [r3, #4]
 8006e0e:	6863      	ldr	r3, [r4, #4]
 8006e10:	bf08      	it	eq
 8006e12:	6031      	streq	r1, [r6, #0]
 8006e14:	5162      	str	r2, [r4, r5]
 8006e16:	604b      	str	r3, [r1, #4]
 8006e18:	4638      	mov	r0, r7
 8006e1a:	f104 060b 	add.w	r6, r4, #11
 8006e1e:	f000 f8cf 	bl	8006fc0 <__malloc_unlock>
 8006e22:	f026 0607 	bic.w	r6, r6, #7
 8006e26:	1d23      	adds	r3, r4, #4
 8006e28:	1af2      	subs	r2, r6, r3
 8006e2a:	d0b6      	beq.n	8006d9a <_malloc_r+0x22>
 8006e2c:	1b9b      	subs	r3, r3, r6
 8006e2e:	50a3      	str	r3, [r4, r2]
 8006e30:	e7b3      	b.n	8006d9a <_malloc_r+0x22>
 8006e32:	6862      	ldr	r2, [r4, #4]
 8006e34:	42a3      	cmp	r3, r4
 8006e36:	bf0c      	ite	eq
 8006e38:	6032      	streq	r2, [r6, #0]
 8006e3a:	605a      	strne	r2, [r3, #4]
 8006e3c:	e7ec      	b.n	8006e18 <_malloc_r+0xa0>
 8006e3e:	4623      	mov	r3, r4
 8006e40:	6864      	ldr	r4, [r4, #4]
 8006e42:	e7b2      	b.n	8006daa <_malloc_r+0x32>
 8006e44:	4634      	mov	r4, r6
 8006e46:	6876      	ldr	r6, [r6, #4]
 8006e48:	e7b9      	b.n	8006dbe <_malloc_r+0x46>
 8006e4a:	230c      	movs	r3, #12
 8006e4c:	603b      	str	r3, [r7, #0]
 8006e4e:	4638      	mov	r0, r7
 8006e50:	f000 f8b6 	bl	8006fc0 <__malloc_unlock>
 8006e54:	e7a1      	b.n	8006d9a <_malloc_r+0x22>
 8006e56:	6025      	str	r5, [r4, #0]
 8006e58:	e7de      	b.n	8006e18 <_malloc_r+0xa0>
 8006e5a:	bf00      	nop
 8006e5c:	200001f0 	.word	0x200001f0

08006e60 <_sbrk_r>:
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	4d06      	ldr	r5, [pc, #24]	; (8006e7c <_sbrk_r+0x1c>)
 8006e64:	2300      	movs	r3, #0
 8006e66:	4604      	mov	r4, r0
 8006e68:	4608      	mov	r0, r1
 8006e6a:	602b      	str	r3, [r5, #0]
 8006e6c:	f7fa f988 	bl	8001180 <_sbrk>
 8006e70:	1c43      	adds	r3, r0, #1
 8006e72:	d102      	bne.n	8006e7a <_sbrk_r+0x1a>
 8006e74:	682b      	ldr	r3, [r5, #0]
 8006e76:	b103      	cbz	r3, 8006e7a <_sbrk_r+0x1a>
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	bd38      	pop	{r3, r4, r5, pc}
 8006e7c:	200001f8 	.word	0x200001f8

08006e80 <__sread>:
 8006e80:	b510      	push	{r4, lr}
 8006e82:	460c      	mov	r4, r1
 8006e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e88:	f000 f8a0 	bl	8006fcc <_read_r>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	bfab      	itete	ge
 8006e90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e92:	89a3      	ldrhlt	r3, [r4, #12]
 8006e94:	181b      	addge	r3, r3, r0
 8006e96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e9a:	bfac      	ite	ge
 8006e9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e9e:	81a3      	strhlt	r3, [r4, #12]
 8006ea0:	bd10      	pop	{r4, pc}

08006ea2 <__swrite>:
 8006ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea6:	461f      	mov	r7, r3
 8006ea8:	898b      	ldrh	r3, [r1, #12]
 8006eaa:	05db      	lsls	r3, r3, #23
 8006eac:	4605      	mov	r5, r0
 8006eae:	460c      	mov	r4, r1
 8006eb0:	4616      	mov	r6, r2
 8006eb2:	d505      	bpl.n	8006ec0 <__swrite+0x1e>
 8006eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb8:	2302      	movs	r3, #2
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f000 f868 	bl	8006f90 <_lseek_r>
 8006ec0:	89a3      	ldrh	r3, [r4, #12]
 8006ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eca:	81a3      	strh	r3, [r4, #12]
 8006ecc:	4632      	mov	r2, r6
 8006ece:	463b      	mov	r3, r7
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed6:	f000 b817 	b.w	8006f08 <_write_r>

08006eda <__sseek>:
 8006eda:	b510      	push	{r4, lr}
 8006edc:	460c      	mov	r4, r1
 8006ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee2:	f000 f855 	bl	8006f90 <_lseek_r>
 8006ee6:	1c43      	adds	r3, r0, #1
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	bf15      	itete	ne
 8006eec:	6560      	strne	r0, [r4, #84]	; 0x54
 8006eee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ef2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ef6:	81a3      	strheq	r3, [r4, #12]
 8006ef8:	bf18      	it	ne
 8006efa:	81a3      	strhne	r3, [r4, #12]
 8006efc:	bd10      	pop	{r4, pc}

08006efe <__sclose>:
 8006efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f02:	f000 b813 	b.w	8006f2c <_close_r>
	...

08006f08 <_write_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4d07      	ldr	r5, [pc, #28]	; (8006f28 <_write_r+0x20>)
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	4608      	mov	r0, r1
 8006f10:	4611      	mov	r1, r2
 8006f12:	2200      	movs	r2, #0
 8006f14:	602a      	str	r2, [r5, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	f7fa f8e1 	bl	80010de <_write>
 8006f1c:	1c43      	adds	r3, r0, #1
 8006f1e:	d102      	bne.n	8006f26 <_write_r+0x1e>
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	b103      	cbz	r3, 8006f26 <_write_r+0x1e>
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	bd38      	pop	{r3, r4, r5, pc}
 8006f28:	200001f8 	.word	0x200001f8

08006f2c <_close_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4d06      	ldr	r5, [pc, #24]	; (8006f48 <_close_r+0x1c>)
 8006f30:	2300      	movs	r3, #0
 8006f32:	4604      	mov	r4, r0
 8006f34:	4608      	mov	r0, r1
 8006f36:	602b      	str	r3, [r5, #0]
 8006f38:	f7fa f8ed 	bl	8001116 <_close>
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d102      	bne.n	8006f46 <_close_r+0x1a>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	b103      	cbz	r3, 8006f46 <_close_r+0x1a>
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	bd38      	pop	{r3, r4, r5, pc}
 8006f48:	200001f8 	.word	0x200001f8

08006f4c <_fstat_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d07      	ldr	r5, [pc, #28]	; (8006f6c <_fstat_r+0x20>)
 8006f50:	2300      	movs	r3, #0
 8006f52:	4604      	mov	r4, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	4611      	mov	r1, r2
 8006f58:	602b      	str	r3, [r5, #0]
 8006f5a:	f7fa f8e8 	bl	800112e <_fstat>
 8006f5e:	1c43      	adds	r3, r0, #1
 8006f60:	d102      	bne.n	8006f68 <_fstat_r+0x1c>
 8006f62:	682b      	ldr	r3, [r5, #0]
 8006f64:	b103      	cbz	r3, 8006f68 <_fstat_r+0x1c>
 8006f66:	6023      	str	r3, [r4, #0]
 8006f68:	bd38      	pop	{r3, r4, r5, pc}
 8006f6a:	bf00      	nop
 8006f6c:	200001f8 	.word	0x200001f8

08006f70 <_isatty_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d06      	ldr	r5, [pc, #24]	; (8006f8c <_isatty_r+0x1c>)
 8006f74:	2300      	movs	r3, #0
 8006f76:	4604      	mov	r4, r0
 8006f78:	4608      	mov	r0, r1
 8006f7a:	602b      	str	r3, [r5, #0]
 8006f7c:	f7fa f8e7 	bl	800114e <_isatty>
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	d102      	bne.n	8006f8a <_isatty_r+0x1a>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	b103      	cbz	r3, 8006f8a <_isatty_r+0x1a>
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	bd38      	pop	{r3, r4, r5, pc}
 8006f8c:	200001f8 	.word	0x200001f8

08006f90 <_lseek_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4d07      	ldr	r5, [pc, #28]	; (8006fb0 <_lseek_r+0x20>)
 8006f94:	4604      	mov	r4, r0
 8006f96:	4608      	mov	r0, r1
 8006f98:	4611      	mov	r1, r2
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	602a      	str	r2, [r5, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f7fa f8e0 	bl	8001164 <_lseek>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_lseek_r+0x1e>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_lseek_r+0x1e>
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	200001f8 	.word	0x200001f8

08006fb4 <__malloc_lock>:
 8006fb4:	4801      	ldr	r0, [pc, #4]	; (8006fbc <__malloc_lock+0x8>)
 8006fb6:	f7ff be0b 	b.w	8006bd0 <__retarget_lock_acquire_recursive>
 8006fba:	bf00      	nop
 8006fbc:	200001ec 	.word	0x200001ec

08006fc0 <__malloc_unlock>:
 8006fc0:	4801      	ldr	r0, [pc, #4]	; (8006fc8 <__malloc_unlock+0x8>)
 8006fc2:	f7ff be06 	b.w	8006bd2 <__retarget_lock_release_recursive>
 8006fc6:	bf00      	nop
 8006fc8:	200001ec 	.word	0x200001ec

08006fcc <_read_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4d07      	ldr	r5, [pc, #28]	; (8006fec <_read_r+0x20>)
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	4608      	mov	r0, r1
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	602a      	str	r2, [r5, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f7fa f862 	bl	80010a4 <_read>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d102      	bne.n	8006fea <_read_r+0x1e>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	b103      	cbz	r3, 8006fea <_read_r+0x1e>
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	200001f8 	.word	0x200001f8

08006ff0 <_init>:
 8006ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff2:	bf00      	nop
 8006ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff6:	bc08      	pop	{r3}
 8006ff8:	469e      	mov	lr, r3
 8006ffa:	4770      	bx	lr

08006ffc <_fini>:
 8006ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffe:	bf00      	nop
 8007000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007002:	bc08      	pop	{r3}
 8007004:	469e      	mov	lr, r3
 8007006:	4770      	bx	lr
